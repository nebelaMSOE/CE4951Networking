//interupt handlers

/*
 * EXTI15_10_IRQHandler()
 * Handles the interrupts for the encoder button,
 * if a button is pressed then a variable is toggled
 * to state that, flag is cleared
 * Args: na
 * Return: na
 */
void EXTI15_10_IRQHandler(void) __attribute__ ((isr));

/*
 * EXTI15_10_IRQHandler()
 * Handles the interrupts for the encoder button,
 * if a button is pressed then a variable is toggled
 * to state that, flag is cleared
 * Args: na
 * Return: na
 */
void EXTI15_10_IRQHandler(void){
	//reduce bouncing
	//due to hardware issue it is long
	delay_1ms(125);
	//verify button press
	if((*EXTI_PR) & (1<<12)){
		//toggle row position
		if (rowPos == 1){
			rowPos = 0;
		} else {
			rowPos++;
		}
		//update wasInterrupt
		wasInterrupt = 1;
		//make sure can type
		if(cantType != 1){
			//play movement note
			piezo_playNote(&move);
			piezo_off();
			//update boat position
			updatePosition();
			//check if move results in collision
			checkCollisionUpdate();
		}
		//clear interrupt
		*EXTI_PR |= 1<<12;
	}
}

/*
 * encoder_init()
 * sets up all the hardware necessary
 * to use the encoder
 * Args: na
 * Return: na
 */
void encoder_init(){
	//Enable the ports
	*RCC_AHB1ENR |= (1<<GPIOAEN);
	//Set data pins as input
	*GPIOA_MODER &= ~(0x3000000);  // Clear mode bits for pin 12, set as input
	//Set pins as pull up
	*GPIOA_PUPDR &= ~(0x3000000);  // Clear pup bits for pin 12,
	*GPIOA_PUPDR |= (0x1000000); //set as pull up
}

/*
 * encoder_enableInterrupts()
 * sets up all the connections necessary
 * to use interrupts generated by the encoder
 * Args: na
 * Return: na
 */
void encoder_enableInterrupts(){
	//enable clock for syscfg
	*RCC_APB2ENR |= (1<<14);
	//Connect PA 12 to EXTI4
	*SYSCFG_EXTICR4 &= ~(0xF);
	//Unmask 12
	*EXTI_IMR |= 1<<12;
	//set falling edge 12
	*EXTI_FTSR |= (1<<12);
	//enable interrupt in NVIC
	*NVIC_ISER1 |= 1<<8;
}