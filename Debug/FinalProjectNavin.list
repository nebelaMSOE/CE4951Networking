
FinalProjectNavin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000168c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019ec  080019ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080019ec  080019ec  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019ec  080019ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080019f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08001a5c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001a5c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a49  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ba3  00000000  00000000  00023ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00024688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00024898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bbf  00000000  00000000  00024a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002806  00000000  00000000  000275ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aebc  00000000  00000000  00029e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00034cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eb4  00000000  00000000  00034d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001844 	.word	0x08001844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001844 	.word	0x08001844

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <TIM2_IRQHandler>:
 * Interrupt handler to handle interrupts
 * from the counter
 *
 * Setup to check receive line and update state machine accordingly
 */
void TIM2_IRQHandler(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	tim->SR = ~(1<<1); //Clear flag
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <TIM2_IRQHandler+0x18>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f06f 0202 	mvn.w	r2, #2
 80002bc:	611a      	str	r2, [r3, #16]
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	20000000 	.word	0x20000000

080002cc <EXTI15_10_IRQHandler>:
/*
 * Interrupt handler triggered on edge of PA15
 *
 * Should start a counter and move state to BUSY
 */
void EXTI15_10_IRQHandler(void){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	*EXTI_PR |= (1<<15); //Clear flag
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <EXTI15_10_IRQHandler+0x1c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <EXTI15_10_IRQHandler+0x1c>)
 80002d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40013c14 	.word	0x40013c14

080002ec <led_init>:
 * Enables the GPIOB in RCC_AHB1ENR
 * Sets LED0 - LED9 to output mode ("01")
 * Args: na
 * Return: na
 */
void led_init(){
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

	//Enables GPIOB in RCC_AHB1ENR
	*RCC_AHB1ENR |= (1<<GPIOBEN);
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <led_init+0x54>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a12      	ldr	r2, [pc, #72]	; (8000340 <led_init+0x54>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6013      	str	r3, [r2, #0]

	//Enable lower 6 leds
	*GPIOB_MODER &= ~(0x3FFF<<10);
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <led_init+0x58>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a10      	ldr	r2, [pc, #64]	; (8000344 <led_init+0x58>)
 8000302:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000306:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800030a:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x555<<10);
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <led_init+0x58>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <led_init+0x58>)
 8000312:	f443 13aa 	orr.w	r3, r3, #1392640	; 0x154000
 8000316:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800031a:	6013      	str	r3, [r2, #0]

	//Enables upper 4 leds
	*GPIOB_MODER &= ~(0xFF<<24);
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <led_init+0x58>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <led_init+0x58>)
 8000322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000326:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x55<<24);
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <led_init+0x58>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <led_init+0x58>)
 800032e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000332:	6013      	str	r3, [r2, #0]

}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023830 	.word	0x40023830
 8000344:	40020400 	.word	0x40020400

08000348 <led_allOff>:
 * led_allOff()
 * Turn off all leds
 * Args: na
 * Return: na
 */
void led_allOff(){
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	//Set led output pins to 0
	*GPIOB_ODR &= ~((0b111111<<5) | (0b1111<<12));
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <led_allOff+0x20>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <led_allOff+0x20>)
 8000352:	f423 4377 	bic.w	r3, r3, #63232	; 0xf700
 8000356:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40020414 	.word	0x40020414

0800036c <led_on>:
 * led_on(uint8_t ledIndex)
 * Turn on specific led, prints error if out of range
 * Args: uint8_t ledIndex: index of led
 * Return: na
 */
void led_on(uint8_t ledIndex){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	//Enables specific LED pin in BSRR set section
	switch (ledIndex) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b09      	cmp	r3, #9
 800037a:	d85d      	bhi.n	8000438 <led_on+0xcc>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <led_on+0x18>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	080003ad 	.word	0x080003ad
 8000388:	080003bb 	.word	0x080003bb
 800038c:	080003c9 	.word	0x080003c9
 8000390:	080003d7 	.word	0x080003d7
 8000394:	080003e5 	.word	0x080003e5
 8000398:	080003f3 	.word	0x080003f3
 800039c:	08000401 	.word	0x08000401
 80003a0:	0800040f 	.word	0x0800040f
 80003a4:	0800041d 	.word	0x0800041d
 80003a8:	0800042b 	.word	0x0800042b
			case 0 : *GPIOB_BSRR |= (1<<5); break;
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <led_on+0xdc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a25      	ldr	r2, [pc, #148]	; (8000448 <led_on+0xdc>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6013      	str	r3, [r2, #0]
 80003b8:	e042      	b.n	8000440 <led_on+0xd4>
			case 1 : *GPIOB_BSRR |= (1<<6); break;
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <led_on+0xdc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <led_on+0xdc>)
 80003c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c4:	6013      	str	r3, [r2, #0]
 80003c6:	e03b      	b.n	8000440 <led_on+0xd4>
			case 2 : *GPIOB_BSRR |= (1<<7); break;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <led_on+0xdc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <led_on+0xdc>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d2:	6013      	str	r3, [r2, #0]
 80003d4:	e034      	b.n	8000440 <led_on+0xd4>
			case 3 : *GPIOB_BSRR |= (1<<8); break;
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <led_on+0xdc>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <led_on+0xdc>)
 80003dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e0:	6013      	str	r3, [r2, #0]
 80003e2:	e02d      	b.n	8000440 <led_on+0xd4>
			case 4 : *GPIOB_BSRR |= (1<<9); break;
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <led_on+0xdc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a17      	ldr	r2, [pc, #92]	; (8000448 <led_on+0xdc>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ee:	6013      	str	r3, [r2, #0]
 80003f0:	e026      	b.n	8000440 <led_on+0xd4>
			case 5 : *GPIOB_BSRR |= (1<<10); break;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <led_on+0xdc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a14      	ldr	r2, [pc, #80]	; (8000448 <led_on+0xdc>)
 80003f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fc:	6013      	str	r3, [r2, #0]
 80003fe:	e01f      	b.n	8000440 <led_on+0xd4>
			case 6 : *GPIOB_BSRR |= (1<<12); break;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <led_on+0xdc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a10      	ldr	r2, [pc, #64]	; (8000448 <led_on+0xdc>)
 8000406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800040a:	6013      	str	r3, [r2, #0]
 800040c:	e018      	b.n	8000440 <led_on+0xd4>
			case 7 : *GPIOB_BSRR |= (1<<13); break;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <led_on+0xdc>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <led_on+0xdc>)
 8000414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000418:	6013      	str	r3, [r2, #0]
 800041a:	e011      	b.n	8000440 <led_on+0xd4>
			case 8 : *GPIOB_BSRR |= (1<<14); break;
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <led_on+0xdc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a09      	ldr	r2, [pc, #36]	; (8000448 <led_on+0xdc>)
 8000422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000426:	6013      	str	r3, [r2, #0]
 8000428:	e00a      	b.n	8000440 <led_on+0xd4>
			case 9 : *GPIOB_BSRR |= (1<<15); break;
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <led_on+0xdc>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <led_on+0xdc>)
 8000430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	e003      	b.n	8000440 <led_on+0xd4>
			default: printf("Args is out of range or not a number"); break;
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <led_on+0xe0>)
 800043a:	f000 f9df 	bl	80007fc <iprintf>
 800043e:	bf00      	nop
	}
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40020418 	.word	0x40020418
 800044c:	0800185c 	.word	0x0800185c

08000450 <main>:
 * BUSY -> IDLE (E3)
 * COLLISION -> BUSY (E1)
 */

int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	//Set up uart connection
	init_usart2(57600, F_CPU);
 8000454:	491b      	ldr	r1, [pc, #108]	; (80004c4 <main+0x74>)
 8000456:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 800045a:	f000 f91b 	bl	8000694 <init_usart2>
	//Test to to ensure connection
	printf("CE4951 Networking Project");
 800045e:	481a      	ldr	r0, [pc, #104]	; (80004c8 <main+0x78>)
 8000460:	f000 f9cc 	bl	80007fc <iprintf>
	//Initialize leds
	led_init();
 8000464:	f7ff ff42 	bl	80002ec <led_init>
	while(1){
		switch (currentState)
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <main+0x7c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d018      	beq.n	80004a2 <main+0x52>
 8000470:	2b02      	cmp	r3, #2
 8000472:	dc1f      	bgt.n	80004b4 <main+0x64>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <main+0x2e>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d009      	beq.n	8000490 <main+0x40>
 800047c:	e01a      	b.n	80004b4 <main+0x64>
		{
		case IDLE:
			//Left two LEDs on
			led_allOff();
 800047e:	f7ff ff63 	bl	8000348 <led_allOff>
			led_on(9);
 8000482:	2009      	movs	r0, #9
 8000484:	f7ff ff72 	bl	800036c <led_on>
			led_on(8);
 8000488:	2008      	movs	r0, #8
 800048a:	f7ff ff6f 	bl	800036c <led_on>
			// Interrupt when E1

			break;
 800048e:	e017      	b.n	80004c0 <main+0x70>

		case BUSY:
			//Middle two LEDs on
			led_allOff();
 8000490:	f7ff ff5a 	bl	8000348 <led_allOff>
			led_on(5);
 8000494:	2005      	movs	r0, #5
 8000496:	f7ff ff69 	bl	800036c <led_on>
			led_on(4);
 800049a:	2004      	movs	r0, #4
 800049c:	f7ff ff66 	bl	800036c <led_on>
			//Interrupt when E2

			//Interrupt when E3

			break;
 80004a0:	e00e      	b.n	80004c0 <main+0x70>

		case COLLISION:
			//Right two LEDs on
			led_allOff();
 80004a2:	f7ff ff51 	bl	8000348 <led_allOff>
			led_on(1);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff ff60 	bl	800036c <led_on>
			led_on(0);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff ff5d 	bl	800036c <led_on>
			//Interrupt when E1

			break;
 80004b2:	e005      	b.n	80004c0 <main+0x70>

		default:
			led_allOff();
 80004b4:	f7ff ff48 	bl	8000348 <led_allOff>
			//Unexpected value for currentState
			//Resetting currentState to initial value
			currentState = IDLE;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <main+0x7c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]

			break;
 80004be:	bf00      	nop
		switch (currentState)
 80004c0:	e7d2      	b.n	8000468 <main+0x18>
 80004c2:	bf00      	nop
 80004c4:	00f42400 	.word	0x00f42400
 80004c8:	08001938 	.word	0x08001938
 80004cc:	20000084 	.word	0x20000084

080004d0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	return -1;
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f8:	605a      	str	r2, [r3, #4]
	return 0;
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <_isatty>:

int _isatty(int file)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	return 1;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800051e:	b480      	push	{r7}
 8000520:	b085      	sub	sp, #20
 8000522:	af00      	add	r7, sp, #0
 8000524:	60f8      	str	r0, [r7, #12]
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	607a      	str	r2, [r7, #4]
	return 0;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x50>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <_sbrk+0x16>
		heap_end = &end;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <_sbrk+0x50>)
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <_sbrk+0x54>)
 800054c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <_sbrk+0x50>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <_sbrk+0x50>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	466a      	mov	r2, sp
 800055e:	4293      	cmp	r3, r2
 8000560:	d907      	bls.n	8000572 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000562:	f000 f919 	bl	8000798 <__errno>
 8000566:	4603      	mov	r3, r0
 8000568:	220c      	movs	r2, #12
 800056a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	e006      	b.n	8000580 <_sbrk+0x48>
	}

	heap_end += incr;
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <_sbrk+0x50>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	4a03      	ldr	r2, [pc, #12]	; (8000588 <_sbrk+0x50>)
 800057c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000088 	.word	0x20000088
 800058c:	200000a8 	.word	0x200000a8

08000590 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e012      	b.n	80005cc <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	3301      	adds	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80005ac:	f000 f836 	bl	800061c <usart2_getch>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d00a      	beq.n	80005d6 <_read+0x46>
		ptr++;
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbe8      	blt.n	80005a6 <_read+0x16>
 80005d4:	e000      	b.n	80005d8 <_read+0x48>
		if(*ptr == '\n') break;
 80005d6:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 80005d8:	693b      	ldr	r3, [r7, #16]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_write>:

int _write(int file, char *ptr, int len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e009      	b.n	8000608 <_write+0x26>
	{
		usart2_putch(*ptr++);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f82f 	bl	8000660 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf1      	blt.n	80005f4 <_write+0x12>
	}
	return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <usart2_getch>:



char usart2_getch(){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8000622:	bf00      	nop
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <usart2_getch+0x3c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	2b20      	cmp	r3, #32
 800062e:	d1f9      	bne.n	8000624 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <usart2_getch+0x40>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f811 	bl	8000660 <usart2_putch>

	if (c == '\r'){  // If character is CR
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b0d      	cmp	r3, #13
 8000642:	d104      	bne.n	800064e <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 8000644:	200a      	movs	r0, #10
 8000646:	f000 f80b 	bl	8000660 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 800064a:	230a      	movs	r3, #10
 800064c:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 800064e:	79fb      	ldrb	r3, [r7, #7]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40004400 	.word	0x40004400
 800065c:	40004404 	.word	0x40004404

08000660 <usart2_putch>:

void usart2_putch(char c){
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 800066a:	bf00      	nop
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <usart2_putch+0x2c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000674:	2b80      	cmp	r3, #128	; 0x80
 8000676:	d1f9      	bne.n	800066c <usart2_putch+0xc>
	*(USART_DR) = c;
 8000678:	4a05      	ldr	r2, [pc, #20]	; (8000690 <usart2_putch+0x30>)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40004400 	.word	0x40004400
 8000690:	40004404 	.word	0x40004404

08000694 <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <init_usart2+0x8c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <init_usart2+0x8c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <init_usart2+0x90>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <init_usart2+0x90>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <init_usart2+0x94>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <init_usart2+0x94>)
 80006bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80006c0:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <init_usart2+0x94>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <init_usart2+0x94>)
 80006c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80006cc:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <init_usart2+0x98>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <init_usart2+0x98>)
 80006d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006d8:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <init_usart2+0x98>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <init_usart2+0x98>)
 80006e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80006e4:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <init_usart2+0x9c>)
 80006e8:	f242 020c 	movw	r2, #8204	; 0x200c
 80006ec:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <init_usart2+0xa0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <init_usart2+0xa4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 80006fa:	4910      	ldr	r1, [pc, #64]	; (800073c <init_usart2+0xa8>)
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	fbb2 f3f3 	udiv	r3, r2, r3
 8000704:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <init_usart2+0xac>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6898      	ldr	r0, [r3, #8]
 800070c:	2300      	movs	r3, #0
 800070e:	2202      	movs	r2, #2
 8000710:	2100      	movs	r1, #0
 8000712:	f000 f88b 	bl	800082c <setvbuf>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023830 	.word	0x40023830
 8000724:	40023840 	.word	0x40023840
 8000728:	40020020 	.word	0x40020020
 800072c:	40020000 	.word	0x40020000
 8000730:	4000440c 	.word	0x4000440c
 8000734:	40004410 	.word	0x40004410
 8000738:	40004414 	.word	0x40004414
 800073c:	40004408 	.word	0x40004408
 8000740:	20000004 	.word	0x20000004

08000744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000746:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1



  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0b      	ldr	r4, [pc, #44]	; (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800076e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000772:	f000 f817 	bl	80007a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fe6b 	bl	8000450 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   r0, =_estack
 800077c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000788:	080019f4 	.word	0x080019f4
  ldr r2, =_sbss
 800078c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000790:	200000a4 	.word	0x200000a4

08000794 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC_IRQHandler>
	...

08000798 <__errno>:
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <__errno+0x8>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000004 	.word	0x20000004

080007a4 <__libc_init_array>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4d0d      	ldr	r5, [pc, #52]	; (80007dc <__libc_init_array+0x38>)
 80007a8:	4c0d      	ldr	r4, [pc, #52]	; (80007e0 <__libc_init_array+0x3c>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	2600      	movs	r6, #0
 80007b0:	42a6      	cmp	r6, r4
 80007b2:	d109      	bne.n	80007c8 <__libc_init_array+0x24>
 80007b4:	4d0b      	ldr	r5, [pc, #44]	; (80007e4 <__libc_init_array+0x40>)
 80007b6:	4c0c      	ldr	r4, [pc, #48]	; (80007e8 <__libc_init_array+0x44>)
 80007b8:	f001 f844 	bl	8001844 <_init>
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	2600      	movs	r6, #0
 80007c2:	42a6      	cmp	r6, r4
 80007c4:	d105      	bne.n	80007d2 <__libc_init_array+0x2e>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007cc:	4798      	blx	r3
 80007ce:	3601      	adds	r6, #1
 80007d0:	e7ee      	b.n	80007b0 <__libc_init_array+0xc>
 80007d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d6:	4798      	blx	r3
 80007d8:	3601      	adds	r6, #1
 80007da:	e7f2      	b.n	80007c2 <__libc_init_array+0x1e>
 80007dc:	080019ec 	.word	0x080019ec
 80007e0:	080019ec 	.word	0x080019ec
 80007e4:	080019ec 	.word	0x080019ec
 80007e8:	080019f0 	.word	0x080019f0

080007ec <memset>:
 80007ec:	4402      	add	r2, r0
 80007ee:	4603      	mov	r3, r0
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d100      	bne.n	80007f6 <memset+0xa>
 80007f4:	4770      	bx	lr
 80007f6:	f803 1b01 	strb.w	r1, [r3], #1
 80007fa:	e7f9      	b.n	80007f0 <memset+0x4>

080007fc <iprintf>:
 80007fc:	b40f      	push	{r0, r1, r2, r3}
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <iprintf+0x2c>)
 8000800:	b513      	push	{r0, r1, r4, lr}
 8000802:	681c      	ldr	r4, [r3, #0]
 8000804:	b124      	cbz	r4, 8000810 <iprintf+0x14>
 8000806:	69a3      	ldr	r3, [r4, #24]
 8000808:	b913      	cbnz	r3, 8000810 <iprintf+0x14>
 800080a:	4620      	mov	r0, r4
 800080c:	f000 faae 	bl	8000d6c <__sinit>
 8000810:	ab05      	add	r3, sp, #20
 8000812:	9a04      	ldr	r2, [sp, #16]
 8000814:	68a1      	ldr	r1, [r4, #8]
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	4620      	mov	r0, r4
 800081a:	f000 fc87 	bl	800112c <_vfiprintf_r>
 800081e:	b002      	add	sp, #8
 8000820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr
 8000828:	20000004 	.word	0x20000004

0800082c <setvbuf>:
 800082c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000830:	461d      	mov	r5, r3
 8000832:	4b5d      	ldr	r3, [pc, #372]	; (80009a8 <setvbuf+0x17c>)
 8000834:	681f      	ldr	r7, [r3, #0]
 8000836:	4604      	mov	r4, r0
 8000838:	460e      	mov	r6, r1
 800083a:	4690      	mov	r8, r2
 800083c:	b127      	cbz	r7, 8000848 <setvbuf+0x1c>
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	b913      	cbnz	r3, 8000848 <setvbuf+0x1c>
 8000842:	4638      	mov	r0, r7
 8000844:	f000 fa92 	bl	8000d6c <__sinit>
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <setvbuf+0x180>)
 800084a:	429c      	cmp	r4, r3
 800084c:	d167      	bne.n	800091e <setvbuf+0xf2>
 800084e:	687c      	ldr	r4, [r7, #4]
 8000850:	f1b8 0f02 	cmp.w	r8, #2
 8000854:	d006      	beq.n	8000864 <setvbuf+0x38>
 8000856:	f1b8 0f01 	cmp.w	r8, #1
 800085a:	f200 809f 	bhi.w	800099c <setvbuf+0x170>
 800085e:	2d00      	cmp	r5, #0
 8000860:	f2c0 809c 	blt.w	800099c <setvbuf+0x170>
 8000864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000866:	07db      	lsls	r3, r3, #31
 8000868:	d405      	bmi.n	8000876 <setvbuf+0x4a>
 800086a:	89a3      	ldrh	r3, [r4, #12]
 800086c:	0598      	lsls	r0, r3, #22
 800086e:	d402      	bmi.n	8000876 <setvbuf+0x4a>
 8000870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000872:	f000 fb19 	bl	8000ea8 <__retarget_lock_acquire_recursive>
 8000876:	4621      	mov	r1, r4
 8000878:	4638      	mov	r0, r7
 800087a:	f000 f9e3 	bl	8000c44 <_fflush_r>
 800087e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000880:	b141      	cbz	r1, 8000894 <setvbuf+0x68>
 8000882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000886:	4299      	cmp	r1, r3
 8000888:	d002      	beq.n	8000890 <setvbuf+0x64>
 800088a:	4638      	mov	r0, r7
 800088c:	f000 fb7a 	bl	8000f84 <_free_r>
 8000890:	2300      	movs	r3, #0
 8000892:	6363      	str	r3, [r4, #52]	; 0x34
 8000894:	2300      	movs	r3, #0
 8000896:	61a3      	str	r3, [r4, #24]
 8000898:	6063      	str	r3, [r4, #4]
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	0619      	lsls	r1, r3, #24
 800089e:	d503      	bpl.n	80008a8 <setvbuf+0x7c>
 80008a0:	6921      	ldr	r1, [r4, #16]
 80008a2:	4638      	mov	r0, r7
 80008a4:	f000 fb6e 	bl	8000f84 <_free_r>
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80008ae:	f023 0303 	bic.w	r3, r3, #3
 80008b2:	f1b8 0f02 	cmp.w	r8, #2
 80008b6:	81a3      	strh	r3, [r4, #12]
 80008b8:	d06c      	beq.n	8000994 <setvbuf+0x168>
 80008ba:	ab01      	add	r3, sp, #4
 80008bc:	466a      	mov	r2, sp
 80008be:	4621      	mov	r1, r4
 80008c0:	4638      	mov	r0, r7
 80008c2:	f000 faf3 	bl	8000eac <__swhatbuf_r>
 80008c6:	89a3      	ldrh	r3, [r4, #12]
 80008c8:	4318      	orrs	r0, r3
 80008ca:	81a0      	strh	r0, [r4, #12]
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d130      	bne.n	8000932 <setvbuf+0x106>
 80008d0:	9d00      	ldr	r5, [sp, #0]
 80008d2:	4628      	mov	r0, r5
 80008d4:	f000 fb4e 	bl	8000f74 <malloc>
 80008d8:	4606      	mov	r6, r0
 80008da:	2800      	cmp	r0, #0
 80008dc:	d155      	bne.n	800098a <setvbuf+0x15e>
 80008de:	f8dd 9000 	ldr.w	r9, [sp]
 80008e2:	45a9      	cmp	r9, r5
 80008e4:	d14a      	bne.n	800097c <setvbuf+0x150>
 80008e6:	f04f 35ff 	mov.w	r5, #4294967295
 80008ea:	2200      	movs	r2, #0
 80008ec:	60a2      	str	r2, [r4, #8]
 80008ee:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80008f2:	6022      	str	r2, [r4, #0]
 80008f4:	6122      	str	r2, [r4, #16]
 80008f6:	2201      	movs	r2, #1
 80008f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008fc:	6162      	str	r2, [r4, #20]
 80008fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	07d2      	lsls	r2, r2, #31
 8000906:	81a3      	strh	r3, [r4, #12]
 8000908:	d405      	bmi.n	8000916 <setvbuf+0xea>
 800090a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800090e:	d102      	bne.n	8000916 <setvbuf+0xea>
 8000910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000912:	f000 faca 	bl	8000eaa <__retarget_lock_release_recursive>
 8000916:	4628      	mov	r0, r5
 8000918:	b003      	add	sp, #12
 800091a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <setvbuf+0x184>)
 8000920:	429c      	cmp	r4, r3
 8000922:	d101      	bne.n	8000928 <setvbuf+0xfc>
 8000924:	68bc      	ldr	r4, [r7, #8]
 8000926:	e793      	b.n	8000850 <setvbuf+0x24>
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <setvbuf+0x188>)
 800092a:	429c      	cmp	r4, r3
 800092c:	bf08      	it	eq
 800092e:	68fc      	ldreq	r4, [r7, #12]
 8000930:	e78e      	b.n	8000850 <setvbuf+0x24>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d0cd      	beq.n	80008d2 <setvbuf+0xa6>
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	b913      	cbnz	r3, 8000940 <setvbuf+0x114>
 800093a:	4638      	mov	r0, r7
 800093c:	f000 fa16 	bl	8000d6c <__sinit>
 8000940:	f1b8 0f01 	cmp.w	r8, #1
 8000944:	bf08      	it	eq
 8000946:	89a3      	ldrheq	r3, [r4, #12]
 8000948:	6026      	str	r6, [r4, #0]
 800094a:	bf04      	itt	eq
 800094c:	f043 0301 	orreq.w	r3, r3, #1
 8000950:	81a3      	strheq	r3, [r4, #12]
 8000952:	89a2      	ldrh	r2, [r4, #12]
 8000954:	f012 0308 	ands.w	r3, r2, #8
 8000958:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800095c:	d01c      	beq.n	8000998 <setvbuf+0x16c>
 800095e:	07d3      	lsls	r3, r2, #31
 8000960:	bf41      	itttt	mi
 8000962:	2300      	movmi	r3, #0
 8000964:	426d      	negmi	r5, r5
 8000966:	60a3      	strmi	r3, [r4, #8]
 8000968:	61a5      	strmi	r5, [r4, #24]
 800096a:	bf58      	it	pl
 800096c:	60a5      	strpl	r5, [r4, #8]
 800096e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8000970:	f015 0501 	ands.w	r5, r5, #1
 8000974:	d115      	bne.n	80009a2 <setvbuf+0x176>
 8000976:	f412 7f00 	tst.w	r2, #512	; 0x200
 800097a:	e7c8      	b.n	800090e <setvbuf+0xe2>
 800097c:	4648      	mov	r0, r9
 800097e:	f000 faf9 	bl	8000f74 <malloc>
 8000982:	4606      	mov	r6, r0
 8000984:	2800      	cmp	r0, #0
 8000986:	d0ae      	beq.n	80008e6 <setvbuf+0xba>
 8000988:	464d      	mov	r5, r9
 800098a:	89a3      	ldrh	r3, [r4, #12]
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	81a3      	strh	r3, [r4, #12]
 8000992:	e7d0      	b.n	8000936 <setvbuf+0x10a>
 8000994:	2500      	movs	r5, #0
 8000996:	e7a8      	b.n	80008ea <setvbuf+0xbe>
 8000998:	60a3      	str	r3, [r4, #8]
 800099a:	e7e8      	b.n	800096e <setvbuf+0x142>
 800099c:	f04f 35ff 	mov.w	r5, #4294967295
 80009a0:	e7b9      	b.n	8000916 <setvbuf+0xea>
 80009a2:	2500      	movs	r5, #0
 80009a4:	e7b7      	b.n	8000916 <setvbuf+0xea>
 80009a6:	bf00      	nop
 80009a8:	20000004 	.word	0x20000004
 80009ac:	08001978 	.word	0x08001978
 80009b0:	08001998 	.word	0x08001998
 80009b4:	08001958 	.word	0x08001958

080009b8 <__swbuf_r>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	460e      	mov	r6, r1
 80009bc:	4614      	mov	r4, r2
 80009be:	4605      	mov	r5, r0
 80009c0:	b118      	cbz	r0, 80009ca <__swbuf_r+0x12>
 80009c2:	6983      	ldr	r3, [r0, #24]
 80009c4:	b90b      	cbnz	r3, 80009ca <__swbuf_r+0x12>
 80009c6:	f000 f9d1 	bl	8000d6c <__sinit>
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <__swbuf_r+0x98>)
 80009cc:	429c      	cmp	r4, r3
 80009ce:	d12b      	bne.n	8000a28 <__swbuf_r+0x70>
 80009d0:	686c      	ldr	r4, [r5, #4]
 80009d2:	69a3      	ldr	r3, [r4, #24]
 80009d4:	60a3      	str	r3, [r4, #8]
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	071a      	lsls	r2, r3, #28
 80009da:	d52f      	bpl.n	8000a3c <__swbuf_r+0x84>
 80009dc:	6923      	ldr	r3, [r4, #16]
 80009de:	b36b      	cbz	r3, 8000a3c <__swbuf_r+0x84>
 80009e0:	6923      	ldr	r3, [r4, #16]
 80009e2:	6820      	ldr	r0, [r4, #0]
 80009e4:	1ac0      	subs	r0, r0, r3
 80009e6:	6963      	ldr	r3, [r4, #20]
 80009e8:	b2f6      	uxtb	r6, r6
 80009ea:	4283      	cmp	r3, r0
 80009ec:	4637      	mov	r7, r6
 80009ee:	dc04      	bgt.n	80009fa <__swbuf_r+0x42>
 80009f0:	4621      	mov	r1, r4
 80009f2:	4628      	mov	r0, r5
 80009f4:	f000 f926 	bl	8000c44 <_fflush_r>
 80009f8:	bb30      	cbnz	r0, 8000a48 <__swbuf_r+0x90>
 80009fa:	68a3      	ldr	r3, [r4, #8]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	60a3      	str	r3, [r4, #8]
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	6022      	str	r2, [r4, #0]
 8000a06:	701e      	strb	r6, [r3, #0]
 8000a08:	6963      	ldr	r3, [r4, #20]
 8000a0a:	3001      	adds	r0, #1
 8000a0c:	4283      	cmp	r3, r0
 8000a0e:	d004      	beq.n	8000a1a <__swbuf_r+0x62>
 8000a10:	89a3      	ldrh	r3, [r4, #12]
 8000a12:	07db      	lsls	r3, r3, #31
 8000a14:	d506      	bpl.n	8000a24 <__swbuf_r+0x6c>
 8000a16:	2e0a      	cmp	r6, #10
 8000a18:	d104      	bne.n	8000a24 <__swbuf_r+0x6c>
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	f000 f911 	bl	8000c44 <_fflush_r>
 8000a22:	b988      	cbnz	r0, 8000a48 <__swbuf_r+0x90>
 8000a24:	4638      	mov	r0, r7
 8000a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <__swbuf_r+0x9c>)
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	d101      	bne.n	8000a32 <__swbuf_r+0x7a>
 8000a2e:	68ac      	ldr	r4, [r5, #8]
 8000a30:	e7cf      	b.n	80009d2 <__swbuf_r+0x1a>
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <__swbuf_r+0xa0>)
 8000a34:	429c      	cmp	r4, r3
 8000a36:	bf08      	it	eq
 8000a38:	68ec      	ldreq	r4, [r5, #12]
 8000a3a:	e7ca      	b.n	80009d2 <__swbuf_r+0x1a>
 8000a3c:	4621      	mov	r1, r4
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f000 f80c 	bl	8000a5c <__swsetup_r>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d0cb      	beq.n	80009e0 <__swbuf_r+0x28>
 8000a48:	f04f 37ff 	mov.w	r7, #4294967295
 8000a4c:	e7ea      	b.n	8000a24 <__swbuf_r+0x6c>
 8000a4e:	bf00      	nop
 8000a50:	08001978 	.word	0x08001978
 8000a54:	08001998 	.word	0x08001998
 8000a58:	08001958 	.word	0x08001958

08000a5c <__swsetup_r>:
 8000a5c:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <__swsetup_r+0xcc>)
 8000a5e:	b570      	push	{r4, r5, r6, lr}
 8000a60:	681d      	ldr	r5, [r3, #0]
 8000a62:	4606      	mov	r6, r0
 8000a64:	460c      	mov	r4, r1
 8000a66:	b125      	cbz	r5, 8000a72 <__swsetup_r+0x16>
 8000a68:	69ab      	ldr	r3, [r5, #24]
 8000a6a:	b913      	cbnz	r3, 8000a72 <__swsetup_r+0x16>
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 f97d 	bl	8000d6c <__sinit>
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <__swsetup_r+0xd0>)
 8000a74:	429c      	cmp	r4, r3
 8000a76:	d10f      	bne.n	8000a98 <__swsetup_r+0x3c>
 8000a78:	686c      	ldr	r4, [r5, #4]
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a80:	0719      	lsls	r1, r3, #28
 8000a82:	d42c      	bmi.n	8000ade <__swsetup_r+0x82>
 8000a84:	06dd      	lsls	r5, r3, #27
 8000a86:	d411      	bmi.n	8000aac <__swsetup_r+0x50>
 8000a88:	2309      	movs	r3, #9
 8000a8a:	6033      	str	r3, [r6, #0]
 8000a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a90:	81a3      	strh	r3, [r4, #12]
 8000a92:	f04f 30ff 	mov.w	r0, #4294967295
 8000a96:	e03e      	b.n	8000b16 <__swsetup_r+0xba>
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <__swsetup_r+0xd4>)
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	d101      	bne.n	8000aa2 <__swsetup_r+0x46>
 8000a9e:	68ac      	ldr	r4, [r5, #8]
 8000aa0:	e7eb      	b.n	8000a7a <__swsetup_r+0x1e>
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <__swsetup_r+0xd8>)
 8000aa4:	429c      	cmp	r4, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	68ec      	ldreq	r4, [r5, #12]
 8000aaa:	e7e6      	b.n	8000a7a <__swsetup_r+0x1e>
 8000aac:	0758      	lsls	r0, r3, #29
 8000aae:	d512      	bpl.n	8000ad6 <__swsetup_r+0x7a>
 8000ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ab2:	b141      	cbz	r1, 8000ac6 <__swsetup_r+0x6a>
 8000ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d002      	beq.n	8000ac2 <__swsetup_r+0x66>
 8000abc:	4630      	mov	r0, r6
 8000abe:	f000 fa61 	bl	8000f84 <_free_r>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000acc:	81a3      	strh	r3, [r4, #12]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	6063      	str	r3, [r4, #4]
 8000ad2:	6923      	ldr	r3, [r4, #16]
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	81a3      	strh	r3, [r4, #12]
 8000ade:	6923      	ldr	r3, [r4, #16]
 8000ae0:	b94b      	cbnz	r3, 8000af6 <__swsetup_r+0x9a>
 8000ae2:	89a3      	ldrh	r3, [r4, #12]
 8000ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aec:	d003      	beq.n	8000af6 <__swsetup_r+0x9a>
 8000aee:	4621      	mov	r1, r4
 8000af0:	4630      	mov	r0, r6
 8000af2:	f000 f9ff 	bl	8000ef4 <__smakebuf_r>
 8000af6:	89a0      	ldrh	r0, [r4, #12]
 8000af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000afc:	f010 0301 	ands.w	r3, r0, #1
 8000b00:	d00a      	beq.n	8000b18 <__swsetup_r+0xbc>
 8000b02:	2300      	movs	r3, #0
 8000b04:	60a3      	str	r3, [r4, #8]
 8000b06:	6963      	ldr	r3, [r4, #20]
 8000b08:	425b      	negs	r3, r3
 8000b0a:	61a3      	str	r3, [r4, #24]
 8000b0c:	6923      	ldr	r3, [r4, #16]
 8000b0e:	b943      	cbnz	r3, 8000b22 <__swsetup_r+0xc6>
 8000b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b14:	d1ba      	bne.n	8000a8c <__swsetup_r+0x30>
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	0781      	lsls	r1, r0, #30
 8000b1a:	bf58      	it	pl
 8000b1c:	6963      	ldrpl	r3, [r4, #20]
 8000b1e:	60a3      	str	r3, [r4, #8]
 8000b20:	e7f4      	b.n	8000b0c <__swsetup_r+0xb0>
 8000b22:	2000      	movs	r0, #0
 8000b24:	e7f7      	b.n	8000b16 <__swsetup_r+0xba>
 8000b26:	bf00      	nop
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	08001978 	.word	0x08001978
 8000b30:	08001998 	.word	0x08001998
 8000b34:	08001958 	.word	0x08001958

08000b38 <__sflush_r>:
 8000b38:	898a      	ldrh	r2, [r1, #12]
 8000b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b3e:	4605      	mov	r5, r0
 8000b40:	0710      	lsls	r0, r2, #28
 8000b42:	460c      	mov	r4, r1
 8000b44:	d458      	bmi.n	8000bf8 <__sflush_r+0xc0>
 8000b46:	684b      	ldr	r3, [r1, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dc05      	bgt.n	8000b58 <__sflush_r+0x20>
 8000b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dc02      	bgt.n	8000b58 <__sflush_r+0x20>
 8000b52:	2000      	movs	r0, #0
 8000b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d0f9      	beq.n	8000b52 <__sflush_r+0x1a>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b64:	682f      	ldr	r7, [r5, #0]
 8000b66:	602b      	str	r3, [r5, #0]
 8000b68:	d032      	beq.n	8000bd0 <__sflush_r+0x98>
 8000b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b6c:	89a3      	ldrh	r3, [r4, #12]
 8000b6e:	075a      	lsls	r2, r3, #29
 8000b70:	d505      	bpl.n	8000b7e <__sflush_r+0x46>
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	1ac0      	subs	r0, r0, r3
 8000b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b78:	b10b      	cbz	r3, 8000b7e <__sflush_r+0x46>
 8000b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b7c:	1ac0      	subs	r0, r0, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4602      	mov	r2, r0
 8000b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b84:	6a21      	ldr	r1, [r4, #32]
 8000b86:	4628      	mov	r0, r5
 8000b88:	47b0      	blx	r6
 8000b8a:	1c43      	adds	r3, r0, #1
 8000b8c:	89a3      	ldrh	r3, [r4, #12]
 8000b8e:	d106      	bne.n	8000b9e <__sflush_r+0x66>
 8000b90:	6829      	ldr	r1, [r5, #0]
 8000b92:	291d      	cmp	r1, #29
 8000b94:	d82c      	bhi.n	8000bf0 <__sflush_r+0xb8>
 8000b96:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <__sflush_r+0x108>)
 8000b98:	40ca      	lsrs	r2, r1
 8000b9a:	07d6      	lsls	r6, r2, #31
 8000b9c:	d528      	bpl.n	8000bf0 <__sflush_r+0xb8>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	6062      	str	r2, [r4, #4]
 8000ba2:	04d9      	lsls	r1, r3, #19
 8000ba4:	6922      	ldr	r2, [r4, #16]
 8000ba6:	6022      	str	r2, [r4, #0]
 8000ba8:	d504      	bpl.n	8000bb4 <__sflush_r+0x7c>
 8000baa:	1c42      	adds	r2, r0, #1
 8000bac:	d101      	bne.n	8000bb2 <__sflush_r+0x7a>
 8000bae:	682b      	ldr	r3, [r5, #0]
 8000bb0:	b903      	cbnz	r3, 8000bb4 <__sflush_r+0x7c>
 8000bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8000bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bb6:	602f      	str	r7, [r5, #0]
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	d0ca      	beq.n	8000b52 <__sflush_r+0x1a>
 8000bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d002      	beq.n	8000bca <__sflush_r+0x92>
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f000 f9dd 	bl	8000f84 <_free_r>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8000bce:	e7c1      	b.n	8000b54 <__sflush_r+0x1c>
 8000bd0:	6a21      	ldr	r1, [r4, #32]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	47b0      	blx	r6
 8000bd8:	1c41      	adds	r1, r0, #1
 8000bda:	d1c7      	bne.n	8000b6c <__sflush_r+0x34>
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0c4      	beq.n	8000b6c <__sflush_r+0x34>
 8000be2:	2b1d      	cmp	r3, #29
 8000be4:	d001      	beq.n	8000bea <__sflush_r+0xb2>
 8000be6:	2b16      	cmp	r3, #22
 8000be8:	d101      	bne.n	8000bee <__sflush_r+0xb6>
 8000bea:	602f      	str	r7, [r5, #0]
 8000bec:	e7b1      	b.n	8000b52 <__sflush_r+0x1a>
 8000bee:	89a3      	ldrh	r3, [r4, #12]
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf4:	81a3      	strh	r3, [r4, #12]
 8000bf6:	e7ad      	b.n	8000b54 <__sflush_r+0x1c>
 8000bf8:	690f      	ldr	r7, [r1, #16]
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d0a9      	beq.n	8000b52 <__sflush_r+0x1a>
 8000bfe:	0793      	lsls	r3, r2, #30
 8000c00:	680e      	ldr	r6, [r1, #0]
 8000c02:	bf08      	it	eq
 8000c04:	694b      	ldreq	r3, [r1, #20]
 8000c06:	600f      	str	r7, [r1, #0]
 8000c08:	bf18      	it	ne
 8000c0a:	2300      	movne	r3, #0
 8000c0c:	eba6 0807 	sub.w	r8, r6, r7
 8000c10:	608b      	str	r3, [r1, #8]
 8000c12:	f1b8 0f00 	cmp.w	r8, #0
 8000c16:	dd9c      	ble.n	8000b52 <__sflush_r+0x1a>
 8000c18:	6a21      	ldr	r1, [r4, #32]
 8000c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	463a      	mov	r2, r7
 8000c20:	4628      	mov	r0, r5
 8000c22:	47b0      	blx	r6
 8000c24:	2800      	cmp	r0, #0
 8000c26:	dc06      	bgt.n	8000c36 <__sflush_r+0xfe>
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	81a3      	strh	r3, [r4, #12]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	e78e      	b.n	8000b54 <__sflush_r+0x1c>
 8000c36:	4407      	add	r7, r0
 8000c38:	eba8 0800 	sub.w	r8, r8, r0
 8000c3c:	e7e9      	b.n	8000c12 <__sflush_r+0xda>
 8000c3e:	bf00      	nop
 8000c40:	20400001 	.word	0x20400001

08000c44 <_fflush_r>:
 8000c44:	b538      	push	{r3, r4, r5, lr}
 8000c46:	690b      	ldr	r3, [r1, #16]
 8000c48:	4605      	mov	r5, r0
 8000c4a:	460c      	mov	r4, r1
 8000c4c:	b913      	cbnz	r3, 8000c54 <_fflush_r+0x10>
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4628      	mov	r0, r5
 8000c52:	bd38      	pop	{r3, r4, r5, pc}
 8000c54:	b118      	cbz	r0, 8000c5e <_fflush_r+0x1a>
 8000c56:	6983      	ldr	r3, [r0, #24]
 8000c58:	b90b      	cbnz	r3, 8000c5e <_fflush_r+0x1a>
 8000c5a:	f000 f887 	bl	8000d6c <__sinit>
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <_fflush_r+0x6c>)
 8000c60:	429c      	cmp	r4, r3
 8000c62:	d11b      	bne.n	8000c9c <_fflush_r+0x58>
 8000c64:	686c      	ldr	r4, [r5, #4]
 8000c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0ef      	beq.n	8000c4e <_fflush_r+0xa>
 8000c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c70:	07d0      	lsls	r0, r2, #31
 8000c72:	d404      	bmi.n	8000c7e <_fflush_r+0x3a>
 8000c74:	0599      	lsls	r1, r3, #22
 8000c76:	d402      	bmi.n	8000c7e <_fflush_r+0x3a>
 8000c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c7a:	f000 f915 	bl	8000ea8 <__retarget_lock_acquire_recursive>
 8000c7e:	4628      	mov	r0, r5
 8000c80:	4621      	mov	r1, r4
 8000c82:	f7ff ff59 	bl	8000b38 <__sflush_r>
 8000c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c88:	07da      	lsls	r2, r3, #31
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	d4e0      	bmi.n	8000c50 <_fflush_r+0xc>
 8000c8e:	89a3      	ldrh	r3, [r4, #12]
 8000c90:	059b      	lsls	r3, r3, #22
 8000c92:	d4dd      	bmi.n	8000c50 <_fflush_r+0xc>
 8000c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c96:	f000 f908 	bl	8000eaa <__retarget_lock_release_recursive>
 8000c9a:	e7d9      	b.n	8000c50 <_fflush_r+0xc>
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <_fflush_r+0x70>)
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	d101      	bne.n	8000ca6 <_fflush_r+0x62>
 8000ca2:	68ac      	ldr	r4, [r5, #8]
 8000ca4:	e7df      	b.n	8000c66 <_fflush_r+0x22>
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <_fflush_r+0x74>)
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	bf08      	it	eq
 8000cac:	68ec      	ldreq	r4, [r5, #12]
 8000cae:	e7da      	b.n	8000c66 <_fflush_r+0x22>
 8000cb0:	08001978 	.word	0x08001978
 8000cb4:	08001998 	.word	0x08001998
 8000cb8:	08001958 	.word	0x08001958

08000cbc <std>:
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	b510      	push	{r4, lr}
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8000cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cca:	6083      	str	r3, [r0, #8]
 8000ccc:	8181      	strh	r1, [r0, #12]
 8000cce:	6643      	str	r3, [r0, #100]	; 0x64
 8000cd0:	81c2      	strh	r2, [r0, #14]
 8000cd2:	6183      	str	r3, [r0, #24]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	305c      	adds	r0, #92	; 0x5c
 8000cda:	f7ff fd87 	bl	80007ec <memset>
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <std+0x38>)
 8000ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <std+0x3c>)
 8000ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <std+0x40>)
 8000ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <std+0x44>)
 8000cec:	6224      	str	r4, [r4, #32]
 8000cee:	6323      	str	r3, [r4, #48]	; 0x30
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	bf00      	nop
 8000cf4:	080016d5 	.word	0x080016d5
 8000cf8:	080016f7 	.word	0x080016f7
 8000cfc:	0800172f 	.word	0x0800172f
 8000d00:	08001753 	.word	0x08001753

08000d04 <_cleanup_r>:
 8000d04:	4901      	ldr	r1, [pc, #4]	; (8000d0c <_cleanup_r+0x8>)
 8000d06:	f000 b8af 	b.w	8000e68 <_fwalk_reent>
 8000d0a:	bf00      	nop
 8000d0c:	08000c45 	.word	0x08000c45

08000d10 <__sfmoreglue>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	1e4a      	subs	r2, r1, #1
 8000d14:	2568      	movs	r5, #104	; 0x68
 8000d16:	4355      	muls	r5, r2
 8000d18:	460e      	mov	r6, r1
 8000d1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d1e:	f000 f981 	bl	8001024 <_malloc_r>
 8000d22:	4604      	mov	r4, r0
 8000d24:	b140      	cbz	r0, 8000d38 <__sfmoreglue+0x28>
 8000d26:	2100      	movs	r1, #0
 8000d28:	e9c0 1600 	strd	r1, r6, [r0]
 8000d2c:	300c      	adds	r0, #12
 8000d2e:	60a0      	str	r0, [r4, #8]
 8000d30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d34:	f7ff fd5a 	bl	80007ec <memset>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}

08000d3c <__sfp_lock_acquire>:
 8000d3c:	4801      	ldr	r0, [pc, #4]	; (8000d44 <__sfp_lock_acquire+0x8>)
 8000d3e:	f000 b8b3 	b.w	8000ea8 <__retarget_lock_acquire_recursive>
 8000d42:	bf00      	nop
 8000d44:	2000009c 	.word	0x2000009c

08000d48 <__sfp_lock_release>:
 8000d48:	4801      	ldr	r0, [pc, #4]	; (8000d50 <__sfp_lock_release+0x8>)
 8000d4a:	f000 b8ae 	b.w	8000eaa <__retarget_lock_release_recursive>
 8000d4e:	bf00      	nop
 8000d50:	2000009c 	.word	0x2000009c

08000d54 <__sinit_lock_acquire>:
 8000d54:	4801      	ldr	r0, [pc, #4]	; (8000d5c <__sinit_lock_acquire+0x8>)
 8000d56:	f000 b8a7 	b.w	8000ea8 <__retarget_lock_acquire_recursive>
 8000d5a:	bf00      	nop
 8000d5c:	20000097 	.word	0x20000097

08000d60 <__sinit_lock_release>:
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <__sinit_lock_release+0x8>)
 8000d62:	f000 b8a2 	b.w	8000eaa <__retarget_lock_release_recursive>
 8000d66:	bf00      	nop
 8000d68:	20000097 	.word	0x20000097

08000d6c <__sinit>:
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	4604      	mov	r4, r0
 8000d70:	f7ff fff0 	bl	8000d54 <__sinit_lock_acquire>
 8000d74:	69a3      	ldr	r3, [r4, #24]
 8000d76:	b11b      	cbz	r3, 8000d80 <__sinit+0x14>
 8000d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d7c:	f7ff bff0 	b.w	8000d60 <__sinit_lock_release>
 8000d80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d84:	6523      	str	r3, [r4, #80]	; 0x50
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <__sinit+0x68>)
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <__sinit+0x6c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	bf04      	itt	eq
 8000d92:	2301      	moveq	r3, #1
 8000d94:	61a3      	streq	r3, [r4, #24]
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 f820 	bl	8000ddc <__sfp>
 8000d9c:	6060      	str	r0, [r4, #4]
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f000 f81c 	bl	8000ddc <__sfp>
 8000da4:	60a0      	str	r0, [r4, #8]
 8000da6:	4620      	mov	r0, r4
 8000da8:	f000 f818 	bl	8000ddc <__sfp>
 8000dac:	2200      	movs	r2, #0
 8000dae:	60e0      	str	r0, [r4, #12]
 8000db0:	2104      	movs	r1, #4
 8000db2:	6860      	ldr	r0, [r4, #4]
 8000db4:	f7ff ff82 	bl	8000cbc <std>
 8000db8:	68a0      	ldr	r0, [r4, #8]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2109      	movs	r1, #9
 8000dbe:	f7ff ff7d 	bl	8000cbc <std>
 8000dc2:	68e0      	ldr	r0, [r4, #12]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	2112      	movs	r1, #18
 8000dc8:	f7ff ff78 	bl	8000cbc <std>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61a3      	str	r3, [r4, #24]
 8000dd0:	e7d2      	b.n	8000d78 <__sinit+0xc>
 8000dd2:	bf00      	nop
 8000dd4:	08001954 	.word	0x08001954
 8000dd8:	08000d05 	.word	0x08000d05

08000ddc <__sfp>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	4607      	mov	r7, r0
 8000de0:	f7ff ffac 	bl	8000d3c <__sfp_lock_acquire>
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <__sfp+0x84>)
 8000de6:	681e      	ldr	r6, [r3, #0]
 8000de8:	69b3      	ldr	r3, [r6, #24]
 8000dea:	b913      	cbnz	r3, 8000df2 <__sfp+0x16>
 8000dec:	4630      	mov	r0, r6
 8000dee:	f7ff ffbd 	bl	8000d6c <__sinit>
 8000df2:	3648      	adds	r6, #72	; 0x48
 8000df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	d503      	bpl.n	8000e04 <__sfp+0x28>
 8000dfc:	6833      	ldr	r3, [r6, #0]
 8000dfe:	b30b      	cbz	r3, 8000e44 <__sfp+0x68>
 8000e00:	6836      	ldr	r6, [r6, #0]
 8000e02:	e7f7      	b.n	8000df4 <__sfp+0x18>
 8000e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e08:	b9d5      	cbnz	r5, 8000e40 <__sfp+0x64>
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <__sfp+0x88>)
 8000e0c:	60e3      	str	r3, [r4, #12]
 8000e0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e12:	6665      	str	r5, [r4, #100]	; 0x64
 8000e14:	f000 f847 	bl	8000ea6 <__retarget_lock_init_recursive>
 8000e18:	f7ff ff96 	bl	8000d48 <__sfp_lock_release>
 8000e1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e24:	6025      	str	r5, [r4, #0]
 8000e26:	61a5      	str	r5, [r4, #24]
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e30:	f7ff fcdc 	bl	80007ec <memset>
 8000e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e40:	3468      	adds	r4, #104	; 0x68
 8000e42:	e7d9      	b.n	8000df8 <__sfp+0x1c>
 8000e44:	2104      	movs	r1, #4
 8000e46:	4638      	mov	r0, r7
 8000e48:	f7ff ff62 	bl	8000d10 <__sfmoreglue>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	6030      	str	r0, [r6, #0]
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d1d5      	bne.n	8000e00 <__sfp+0x24>
 8000e54:	f7ff ff78 	bl	8000d48 <__sfp_lock_release>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	e7ee      	b.n	8000e3c <__sfp+0x60>
 8000e5e:	bf00      	nop
 8000e60:	08001954 	.word	0x08001954
 8000e64:	ffff0001 	.word	0xffff0001

08000e68 <_fwalk_reent>:
 8000e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4688      	mov	r8, r1
 8000e70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e74:	2700      	movs	r7, #0
 8000e76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e7a:	f1b9 0901 	subs.w	r9, r9, #1
 8000e7e:	d505      	bpl.n	8000e8c <_fwalk_reent+0x24>
 8000e80:	6824      	ldr	r4, [r4, #0]
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d1f7      	bne.n	8000e76 <_fwalk_reent+0xe>
 8000e86:	4638      	mov	r0, r7
 8000e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e8c:	89ab      	ldrh	r3, [r5, #12]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d907      	bls.n	8000ea2 <_fwalk_reent+0x3a>
 8000e92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e96:	3301      	adds	r3, #1
 8000e98:	d003      	beq.n	8000ea2 <_fwalk_reent+0x3a>
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	47c0      	blx	r8
 8000ea0:	4307      	orrs	r7, r0
 8000ea2:	3568      	adds	r5, #104	; 0x68
 8000ea4:	e7e9      	b.n	8000e7a <_fwalk_reent+0x12>

08000ea6 <__retarget_lock_init_recursive>:
 8000ea6:	4770      	bx	lr

08000ea8 <__retarget_lock_acquire_recursive>:
 8000ea8:	4770      	bx	lr

08000eaa <__retarget_lock_release_recursive>:
 8000eaa:	4770      	bx	lr

08000eac <__swhatbuf_r>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	460e      	mov	r6, r1
 8000eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	b096      	sub	sp, #88	; 0x58
 8000eb8:	4614      	mov	r4, r2
 8000eba:	461d      	mov	r5, r3
 8000ebc:	da07      	bge.n	8000ece <__swhatbuf_r+0x22>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	89b3      	ldrh	r3, [r6, #12]
 8000ec4:	061a      	lsls	r2, r3, #24
 8000ec6:	d410      	bmi.n	8000eea <__swhatbuf_r+0x3e>
 8000ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ecc:	e00e      	b.n	8000eec <__swhatbuf_r+0x40>
 8000ece:	466a      	mov	r2, sp
 8000ed0:	f000 fc66 	bl	80017a0 <_fstat_r>
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	dbf2      	blt.n	8000ebe <__swhatbuf_r+0x12>
 8000ed8:	9a01      	ldr	r2, [sp, #4]
 8000eda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ee2:	425a      	negs	r2, r3
 8000ee4:	415a      	adcs	r2, r3
 8000ee6:	602a      	str	r2, [r5, #0]
 8000ee8:	e7ee      	b.n	8000ec8 <__swhatbuf_r+0x1c>
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	2000      	movs	r0, #0
 8000eee:	6023      	str	r3, [r4, #0]
 8000ef0:	b016      	add	sp, #88	; 0x58
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}

08000ef4 <__smakebuf_r>:
 8000ef4:	898b      	ldrh	r3, [r1, #12]
 8000ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ef8:	079d      	lsls	r5, r3, #30
 8000efa:	4606      	mov	r6, r0
 8000efc:	460c      	mov	r4, r1
 8000efe:	d507      	bpl.n	8000f10 <__smakebuf_r+0x1c>
 8000f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	6123      	str	r3, [r4, #16]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	6163      	str	r3, [r4, #20]
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	ab01      	add	r3, sp, #4
 8000f12:	466a      	mov	r2, sp
 8000f14:	f7ff ffca 	bl	8000eac <__swhatbuf_r>
 8000f18:	9900      	ldr	r1, [sp, #0]
 8000f1a:	4605      	mov	r5, r0
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f000 f881 	bl	8001024 <_malloc_r>
 8000f22:	b948      	cbnz	r0, 8000f38 <__smakebuf_r+0x44>
 8000f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f28:	059a      	lsls	r2, r3, #22
 8000f2a:	d4ef      	bmi.n	8000f0c <__smakebuf_r+0x18>
 8000f2c:	f023 0303 	bic.w	r3, r3, #3
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	81a3      	strh	r3, [r4, #12]
 8000f36:	e7e3      	b.n	8000f00 <__smakebuf_r+0xc>
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <__smakebuf_r+0x7c>)
 8000f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f3c:	89a3      	ldrh	r3, [r4, #12]
 8000f3e:	6020      	str	r0, [r4, #0]
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	81a3      	strh	r3, [r4, #12]
 8000f46:	9b00      	ldr	r3, [sp, #0]
 8000f48:	6163      	str	r3, [r4, #20]
 8000f4a:	9b01      	ldr	r3, [sp, #4]
 8000f4c:	6120      	str	r0, [r4, #16]
 8000f4e:	b15b      	cbz	r3, 8000f68 <__smakebuf_r+0x74>
 8000f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f54:	4630      	mov	r0, r6
 8000f56:	f000 fc35 	bl	80017c4 <_isatty_r>
 8000f5a:	b128      	cbz	r0, 8000f68 <__smakebuf_r+0x74>
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	f023 0303 	bic.w	r3, r3, #3
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	81a3      	strh	r3, [r4, #12]
 8000f68:	89a0      	ldrh	r0, [r4, #12]
 8000f6a:	4305      	orrs	r5, r0
 8000f6c:	81a5      	strh	r5, [r4, #12]
 8000f6e:	e7cd      	b.n	8000f0c <__smakebuf_r+0x18>
 8000f70:	08000d05 	.word	0x08000d05

08000f74 <malloc>:
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <malloc+0xc>)
 8000f76:	4601      	mov	r1, r0
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	f000 b853 	b.w	8001024 <_malloc_r>
 8000f7e:	bf00      	nop
 8000f80:	20000004 	.word	0x20000004

08000f84 <_free_r>:
 8000f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f86:	2900      	cmp	r1, #0
 8000f88:	d048      	beq.n	800101c <_free_r+0x98>
 8000f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f8e:	9001      	str	r0, [sp, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f1a1 0404 	sub.w	r4, r1, #4
 8000f96:	bfb8      	it	lt
 8000f98:	18e4      	addlt	r4, r4, r3
 8000f9a:	f000 fc35 	bl	8001808 <__malloc_lock>
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <_free_r+0x9c>)
 8000fa0:	9801      	ldr	r0, [sp, #4]
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	b933      	cbnz	r3, 8000fb6 <_free_r+0x32>
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	6014      	str	r4, [r2, #0]
 8000fac:	b003      	add	sp, #12
 8000fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fb2:	f000 bc2f 	b.w	8001814 <__malloc_unlock>
 8000fb6:	42a3      	cmp	r3, r4
 8000fb8:	d90b      	bls.n	8000fd2 <_free_r+0x4e>
 8000fba:	6821      	ldr	r1, [r4, #0]
 8000fbc:	1862      	adds	r2, r4, r1
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	bf04      	itt	eq
 8000fc2:	681a      	ldreq	r2, [r3, #0]
 8000fc4:	685b      	ldreq	r3, [r3, #4]
 8000fc6:	6063      	str	r3, [r4, #4]
 8000fc8:	bf04      	itt	eq
 8000fca:	1852      	addeq	r2, r2, r1
 8000fcc:	6022      	streq	r2, [r4, #0]
 8000fce:	602c      	str	r4, [r5, #0]
 8000fd0:	e7ec      	b.n	8000fac <_free_r+0x28>
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	b10b      	cbz	r3, 8000fdc <_free_r+0x58>
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d9fa      	bls.n	8000fd2 <_free_r+0x4e>
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	1855      	adds	r5, r2, r1
 8000fe0:	42a5      	cmp	r5, r4
 8000fe2:	d10b      	bne.n	8000ffc <_free_r+0x78>
 8000fe4:	6824      	ldr	r4, [r4, #0]
 8000fe6:	4421      	add	r1, r4
 8000fe8:	1854      	adds	r4, r2, r1
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	6011      	str	r1, [r2, #0]
 8000fee:	d1dd      	bne.n	8000fac <_free_r+0x28>
 8000ff0:	681c      	ldr	r4, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	6053      	str	r3, [r2, #4]
 8000ff6:	4421      	add	r1, r4
 8000ff8:	6011      	str	r1, [r2, #0]
 8000ffa:	e7d7      	b.n	8000fac <_free_r+0x28>
 8000ffc:	d902      	bls.n	8001004 <_free_r+0x80>
 8000ffe:	230c      	movs	r3, #12
 8001000:	6003      	str	r3, [r0, #0]
 8001002:	e7d3      	b.n	8000fac <_free_r+0x28>
 8001004:	6825      	ldr	r5, [r4, #0]
 8001006:	1961      	adds	r1, r4, r5
 8001008:	428b      	cmp	r3, r1
 800100a:	bf04      	itt	eq
 800100c:	6819      	ldreq	r1, [r3, #0]
 800100e:	685b      	ldreq	r3, [r3, #4]
 8001010:	6063      	str	r3, [r4, #4]
 8001012:	bf04      	itt	eq
 8001014:	1949      	addeq	r1, r1, r5
 8001016:	6021      	streq	r1, [r4, #0]
 8001018:	6054      	str	r4, [r2, #4]
 800101a:	e7c7      	b.n	8000fac <_free_r+0x28>
 800101c:	b003      	add	sp, #12
 800101e:	bd30      	pop	{r4, r5, pc}
 8001020:	2000008c 	.word	0x2000008c

08001024 <_malloc_r>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	1ccd      	adds	r5, r1, #3
 8001028:	f025 0503 	bic.w	r5, r5, #3
 800102c:	3508      	adds	r5, #8
 800102e:	2d0c      	cmp	r5, #12
 8001030:	bf38      	it	cc
 8001032:	250c      	movcc	r5, #12
 8001034:	2d00      	cmp	r5, #0
 8001036:	4606      	mov	r6, r0
 8001038:	db01      	blt.n	800103e <_malloc_r+0x1a>
 800103a:	42a9      	cmp	r1, r5
 800103c:	d903      	bls.n	8001046 <_malloc_r+0x22>
 800103e:	230c      	movs	r3, #12
 8001040:	6033      	str	r3, [r6, #0]
 8001042:	2000      	movs	r0, #0
 8001044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001046:	f000 fbdf 	bl	8001808 <__malloc_lock>
 800104a:	4921      	ldr	r1, [pc, #132]	; (80010d0 <_malloc_r+0xac>)
 800104c:	680a      	ldr	r2, [r1, #0]
 800104e:	4614      	mov	r4, r2
 8001050:	b99c      	cbnz	r4, 800107a <_malloc_r+0x56>
 8001052:	4f20      	ldr	r7, [pc, #128]	; (80010d4 <_malloc_r+0xb0>)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b923      	cbnz	r3, 8001062 <_malloc_r+0x3e>
 8001058:	4621      	mov	r1, r4
 800105a:	4630      	mov	r0, r6
 800105c:	f000 fb2a 	bl	80016b4 <_sbrk_r>
 8001060:	6038      	str	r0, [r7, #0]
 8001062:	4629      	mov	r1, r5
 8001064:	4630      	mov	r0, r6
 8001066:	f000 fb25 	bl	80016b4 <_sbrk_r>
 800106a:	1c43      	adds	r3, r0, #1
 800106c:	d123      	bne.n	80010b6 <_malloc_r+0x92>
 800106e:	230c      	movs	r3, #12
 8001070:	6033      	str	r3, [r6, #0]
 8001072:	4630      	mov	r0, r6
 8001074:	f000 fbce 	bl	8001814 <__malloc_unlock>
 8001078:	e7e3      	b.n	8001042 <_malloc_r+0x1e>
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	1b5b      	subs	r3, r3, r5
 800107e:	d417      	bmi.n	80010b0 <_malloc_r+0x8c>
 8001080:	2b0b      	cmp	r3, #11
 8001082:	d903      	bls.n	800108c <_malloc_r+0x68>
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	441c      	add	r4, r3
 8001088:	6025      	str	r5, [r4, #0]
 800108a:	e004      	b.n	8001096 <_malloc_r+0x72>
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	42a2      	cmp	r2, r4
 8001090:	bf0c      	ite	eq
 8001092:	600b      	streq	r3, [r1, #0]
 8001094:	6053      	strne	r3, [r2, #4]
 8001096:	4630      	mov	r0, r6
 8001098:	f000 fbbc 	bl	8001814 <__malloc_unlock>
 800109c:	f104 000b 	add.w	r0, r4, #11
 80010a0:	1d23      	adds	r3, r4, #4
 80010a2:	f020 0007 	bic.w	r0, r0, #7
 80010a6:	1ac2      	subs	r2, r0, r3
 80010a8:	d0cc      	beq.n	8001044 <_malloc_r+0x20>
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	50a3      	str	r3, [r4, r2]
 80010ae:	e7c9      	b.n	8001044 <_malloc_r+0x20>
 80010b0:	4622      	mov	r2, r4
 80010b2:	6864      	ldr	r4, [r4, #4]
 80010b4:	e7cc      	b.n	8001050 <_malloc_r+0x2c>
 80010b6:	1cc4      	adds	r4, r0, #3
 80010b8:	f024 0403 	bic.w	r4, r4, #3
 80010bc:	42a0      	cmp	r0, r4
 80010be:	d0e3      	beq.n	8001088 <_malloc_r+0x64>
 80010c0:	1a21      	subs	r1, r4, r0
 80010c2:	4630      	mov	r0, r6
 80010c4:	f000 faf6 	bl	80016b4 <_sbrk_r>
 80010c8:	3001      	adds	r0, #1
 80010ca:	d1dd      	bne.n	8001088 <_malloc_r+0x64>
 80010cc:	e7cf      	b.n	800106e <_malloc_r+0x4a>
 80010ce:	bf00      	nop
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	20000090 	.word	0x20000090

080010d8 <__sfputc_r>:
 80010d8:	6893      	ldr	r3, [r2, #8]
 80010da:	3b01      	subs	r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	b410      	push	{r4}
 80010e0:	6093      	str	r3, [r2, #8]
 80010e2:	da08      	bge.n	80010f6 <__sfputc_r+0x1e>
 80010e4:	6994      	ldr	r4, [r2, #24]
 80010e6:	42a3      	cmp	r3, r4
 80010e8:	db01      	blt.n	80010ee <__sfputc_r+0x16>
 80010ea:	290a      	cmp	r1, #10
 80010ec:	d103      	bne.n	80010f6 <__sfputc_r+0x1e>
 80010ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010f2:	f7ff bc61 	b.w	80009b8 <__swbuf_r>
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	1c58      	adds	r0, r3, #1
 80010fa:	6010      	str	r0, [r2, #0]
 80010fc:	7019      	strb	r1, [r3, #0]
 80010fe:	4608      	mov	r0, r1
 8001100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001104:	4770      	bx	lr

08001106 <__sfputs_r>:
 8001106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001108:	4606      	mov	r6, r0
 800110a:	460f      	mov	r7, r1
 800110c:	4614      	mov	r4, r2
 800110e:	18d5      	adds	r5, r2, r3
 8001110:	42ac      	cmp	r4, r5
 8001112:	d101      	bne.n	8001118 <__sfputs_r+0x12>
 8001114:	2000      	movs	r0, #0
 8001116:	e007      	b.n	8001128 <__sfputs_r+0x22>
 8001118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800111c:	463a      	mov	r2, r7
 800111e:	4630      	mov	r0, r6
 8001120:	f7ff ffda 	bl	80010d8 <__sfputc_r>
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	d1f3      	bne.n	8001110 <__sfputs_r+0xa>
 8001128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800112c <_vfiprintf_r>:
 800112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001130:	460d      	mov	r5, r1
 8001132:	b09d      	sub	sp, #116	; 0x74
 8001134:	4614      	mov	r4, r2
 8001136:	4698      	mov	r8, r3
 8001138:	4606      	mov	r6, r0
 800113a:	b118      	cbz	r0, 8001144 <_vfiprintf_r+0x18>
 800113c:	6983      	ldr	r3, [r0, #24]
 800113e:	b90b      	cbnz	r3, 8001144 <_vfiprintf_r+0x18>
 8001140:	f7ff fe14 	bl	8000d6c <__sinit>
 8001144:	4b89      	ldr	r3, [pc, #548]	; (800136c <_vfiprintf_r+0x240>)
 8001146:	429d      	cmp	r5, r3
 8001148:	d11b      	bne.n	8001182 <_vfiprintf_r+0x56>
 800114a:	6875      	ldr	r5, [r6, #4]
 800114c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800114e:	07d9      	lsls	r1, r3, #31
 8001150:	d405      	bmi.n	800115e <_vfiprintf_r+0x32>
 8001152:	89ab      	ldrh	r3, [r5, #12]
 8001154:	059a      	lsls	r2, r3, #22
 8001156:	d402      	bmi.n	800115e <_vfiprintf_r+0x32>
 8001158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800115a:	f7ff fea5 	bl	8000ea8 <__retarget_lock_acquire_recursive>
 800115e:	89ab      	ldrh	r3, [r5, #12]
 8001160:	071b      	lsls	r3, r3, #28
 8001162:	d501      	bpl.n	8001168 <_vfiprintf_r+0x3c>
 8001164:	692b      	ldr	r3, [r5, #16]
 8001166:	b9eb      	cbnz	r3, 80011a4 <_vfiprintf_r+0x78>
 8001168:	4629      	mov	r1, r5
 800116a:	4630      	mov	r0, r6
 800116c:	f7ff fc76 	bl	8000a5c <__swsetup_r>
 8001170:	b1c0      	cbz	r0, 80011a4 <_vfiprintf_r+0x78>
 8001172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001174:	07dc      	lsls	r4, r3, #31
 8001176:	d50e      	bpl.n	8001196 <_vfiprintf_r+0x6a>
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	b01d      	add	sp, #116	; 0x74
 800117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001182:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <_vfiprintf_r+0x244>)
 8001184:	429d      	cmp	r5, r3
 8001186:	d101      	bne.n	800118c <_vfiprintf_r+0x60>
 8001188:	68b5      	ldr	r5, [r6, #8]
 800118a:	e7df      	b.n	800114c <_vfiprintf_r+0x20>
 800118c:	4b79      	ldr	r3, [pc, #484]	; (8001374 <_vfiprintf_r+0x248>)
 800118e:	429d      	cmp	r5, r3
 8001190:	bf08      	it	eq
 8001192:	68f5      	ldreq	r5, [r6, #12]
 8001194:	e7da      	b.n	800114c <_vfiprintf_r+0x20>
 8001196:	89ab      	ldrh	r3, [r5, #12]
 8001198:	0598      	lsls	r0, r3, #22
 800119a:	d4ed      	bmi.n	8001178 <_vfiprintf_r+0x4c>
 800119c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800119e:	f7ff fe84 	bl	8000eaa <__retarget_lock_release_recursive>
 80011a2:	e7e9      	b.n	8001178 <_vfiprintf_r+0x4c>
 80011a4:	2300      	movs	r3, #0
 80011a6:	9309      	str	r3, [sp, #36]	; 0x24
 80011a8:	2320      	movs	r3, #32
 80011aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80011b2:	2330      	movs	r3, #48	; 0x30
 80011b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001378 <_vfiprintf_r+0x24c>
 80011b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011bc:	f04f 0901 	mov.w	r9, #1
 80011c0:	4623      	mov	r3, r4
 80011c2:	469a      	mov	sl, r3
 80011c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011c8:	b10a      	cbz	r2, 80011ce <_vfiprintf_r+0xa2>
 80011ca:	2a25      	cmp	r2, #37	; 0x25
 80011cc:	d1f9      	bne.n	80011c2 <_vfiprintf_r+0x96>
 80011ce:	ebba 0b04 	subs.w	fp, sl, r4
 80011d2:	d00b      	beq.n	80011ec <_vfiprintf_r+0xc0>
 80011d4:	465b      	mov	r3, fp
 80011d6:	4622      	mov	r2, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff ff93 	bl	8001106 <__sfputs_r>
 80011e0:	3001      	adds	r0, #1
 80011e2:	f000 80aa 	beq.w	800133a <_vfiprintf_r+0x20e>
 80011e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011e8:	445a      	add	r2, fp
 80011ea:	9209      	str	r2, [sp, #36]	; 0x24
 80011ec:	f89a 3000 	ldrb.w	r3, [sl]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a2 	beq.w	800133a <_vfiprintf_r+0x20e>
 80011f6:	2300      	movs	r3, #0
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001200:	f10a 0a01 	add.w	sl, sl, #1
 8001204:	9304      	str	r3, [sp, #16]
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800120c:	931a      	str	r3, [sp, #104]	; 0x68
 800120e:	4654      	mov	r4, sl
 8001210:	2205      	movs	r2, #5
 8001212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001216:	4858      	ldr	r0, [pc, #352]	; (8001378 <_vfiprintf_r+0x24c>)
 8001218:	f7fe fffa 	bl	8000210 <memchr>
 800121c:	9a04      	ldr	r2, [sp, #16]
 800121e:	b9d8      	cbnz	r0, 8001258 <_vfiprintf_r+0x12c>
 8001220:	06d1      	lsls	r1, r2, #27
 8001222:	bf44      	itt	mi
 8001224:	2320      	movmi	r3, #32
 8001226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800122a:	0713      	lsls	r3, r2, #28
 800122c:	bf44      	itt	mi
 800122e:	232b      	movmi	r3, #43	; 0x2b
 8001230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001234:	f89a 3000 	ldrb.w	r3, [sl]
 8001238:	2b2a      	cmp	r3, #42	; 0x2a
 800123a:	d015      	beq.n	8001268 <_vfiprintf_r+0x13c>
 800123c:	9a07      	ldr	r2, [sp, #28]
 800123e:	4654      	mov	r4, sl
 8001240:	2000      	movs	r0, #0
 8001242:	f04f 0c0a 	mov.w	ip, #10
 8001246:	4621      	mov	r1, r4
 8001248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800124c:	3b30      	subs	r3, #48	; 0x30
 800124e:	2b09      	cmp	r3, #9
 8001250:	d94e      	bls.n	80012f0 <_vfiprintf_r+0x1c4>
 8001252:	b1b0      	cbz	r0, 8001282 <_vfiprintf_r+0x156>
 8001254:	9207      	str	r2, [sp, #28]
 8001256:	e014      	b.n	8001282 <_vfiprintf_r+0x156>
 8001258:	eba0 0308 	sub.w	r3, r0, r8
 800125c:	fa09 f303 	lsl.w	r3, r9, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	9304      	str	r3, [sp, #16]
 8001264:	46a2      	mov	sl, r4
 8001266:	e7d2      	b.n	800120e <_vfiprintf_r+0xe2>
 8001268:	9b03      	ldr	r3, [sp, #12]
 800126a:	1d19      	adds	r1, r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	9103      	str	r1, [sp, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	bfbb      	ittet	lt
 8001274:	425b      	neglt	r3, r3
 8001276:	f042 0202 	orrlt.w	r2, r2, #2
 800127a:	9307      	strge	r3, [sp, #28]
 800127c:	9307      	strlt	r3, [sp, #28]
 800127e:	bfb8      	it	lt
 8001280:	9204      	strlt	r2, [sp, #16]
 8001282:	7823      	ldrb	r3, [r4, #0]
 8001284:	2b2e      	cmp	r3, #46	; 0x2e
 8001286:	d10c      	bne.n	80012a2 <_vfiprintf_r+0x176>
 8001288:	7863      	ldrb	r3, [r4, #1]
 800128a:	2b2a      	cmp	r3, #42	; 0x2a
 800128c:	d135      	bne.n	80012fa <_vfiprintf_r+0x1ce>
 800128e:	9b03      	ldr	r3, [sp, #12]
 8001290:	1d1a      	adds	r2, r3, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	9203      	str	r2, [sp, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	bfb8      	it	lt
 800129a:	f04f 33ff 	movlt.w	r3, #4294967295
 800129e:	3402      	adds	r4, #2
 80012a0:	9305      	str	r3, [sp, #20]
 80012a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001388 <_vfiprintf_r+0x25c>
 80012a6:	7821      	ldrb	r1, [r4, #0]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4650      	mov	r0, sl
 80012ac:	f7fe ffb0 	bl	8000210 <memchr>
 80012b0:	b140      	cbz	r0, 80012c4 <_vfiprintf_r+0x198>
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	eba0 000a 	sub.w	r0, r0, sl
 80012b8:	fa03 f000 	lsl.w	r0, r3, r0
 80012bc:	9b04      	ldr	r3, [sp, #16]
 80012be:	4303      	orrs	r3, r0
 80012c0:	3401      	adds	r4, #1
 80012c2:	9304      	str	r3, [sp, #16]
 80012c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012c8:	482c      	ldr	r0, [pc, #176]	; (800137c <_vfiprintf_r+0x250>)
 80012ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012ce:	2206      	movs	r2, #6
 80012d0:	f7fe ff9e 	bl	8000210 <memchr>
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d03f      	beq.n	8001358 <_vfiprintf_r+0x22c>
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <_vfiprintf_r+0x254>)
 80012da:	bb1b      	cbnz	r3, 8001324 <_vfiprintf_r+0x1f8>
 80012dc:	9b03      	ldr	r3, [sp, #12]
 80012de:	3307      	adds	r3, #7
 80012e0:	f023 0307 	bic.w	r3, r3, #7
 80012e4:	3308      	adds	r3, #8
 80012e6:	9303      	str	r3, [sp, #12]
 80012e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ea:	443b      	add	r3, r7
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	e767      	b.n	80011c0 <_vfiprintf_r+0x94>
 80012f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80012f4:	460c      	mov	r4, r1
 80012f6:	2001      	movs	r0, #1
 80012f8:	e7a5      	b.n	8001246 <_vfiprintf_r+0x11a>
 80012fa:	2300      	movs	r3, #0
 80012fc:	3401      	adds	r4, #1
 80012fe:	9305      	str	r3, [sp, #20]
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0c0a 	mov.w	ip, #10
 8001306:	4620      	mov	r0, r4
 8001308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800130c:	3a30      	subs	r2, #48	; 0x30
 800130e:	2a09      	cmp	r2, #9
 8001310:	d903      	bls.n	800131a <_vfiprintf_r+0x1ee>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0c5      	beq.n	80012a2 <_vfiprintf_r+0x176>
 8001316:	9105      	str	r1, [sp, #20]
 8001318:	e7c3      	b.n	80012a2 <_vfiprintf_r+0x176>
 800131a:	fb0c 2101 	mla	r1, ip, r1, r2
 800131e:	4604      	mov	r4, r0
 8001320:	2301      	movs	r3, #1
 8001322:	e7f0      	b.n	8001306 <_vfiprintf_r+0x1da>
 8001324:	ab03      	add	r3, sp, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	462a      	mov	r2, r5
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <_vfiprintf_r+0x258>)
 800132c:	a904      	add	r1, sp, #16
 800132e:	4630      	mov	r0, r6
 8001330:	f3af 8000 	nop.w
 8001334:	4607      	mov	r7, r0
 8001336:	1c78      	adds	r0, r7, #1
 8001338:	d1d6      	bne.n	80012e8 <_vfiprintf_r+0x1bc>
 800133a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800133c:	07d9      	lsls	r1, r3, #31
 800133e:	d405      	bmi.n	800134c <_vfiprintf_r+0x220>
 8001340:	89ab      	ldrh	r3, [r5, #12]
 8001342:	059a      	lsls	r2, r3, #22
 8001344:	d402      	bmi.n	800134c <_vfiprintf_r+0x220>
 8001346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001348:	f7ff fdaf 	bl	8000eaa <__retarget_lock_release_recursive>
 800134c:	89ab      	ldrh	r3, [r5, #12]
 800134e:	065b      	lsls	r3, r3, #25
 8001350:	f53f af12 	bmi.w	8001178 <_vfiprintf_r+0x4c>
 8001354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001356:	e711      	b.n	800117c <_vfiprintf_r+0x50>
 8001358:	ab03      	add	r3, sp, #12
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	462a      	mov	r2, r5
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <_vfiprintf_r+0x258>)
 8001360:	a904      	add	r1, sp, #16
 8001362:	4630      	mov	r0, r6
 8001364:	f000 f880 	bl	8001468 <_printf_i>
 8001368:	e7e4      	b.n	8001334 <_vfiprintf_r+0x208>
 800136a:	bf00      	nop
 800136c:	08001978 	.word	0x08001978
 8001370:	08001998 	.word	0x08001998
 8001374:	08001958 	.word	0x08001958
 8001378:	080019b8 	.word	0x080019b8
 800137c:	080019c2 	.word	0x080019c2
 8001380:	00000000 	.word	0x00000000
 8001384:	08001107 	.word	0x08001107
 8001388:	080019be 	.word	0x080019be

0800138c <_printf_common>:
 800138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001390:	4616      	mov	r6, r2
 8001392:	4699      	mov	r9, r3
 8001394:	688a      	ldr	r2, [r1, #8]
 8001396:	690b      	ldr	r3, [r1, #16]
 8001398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800139c:	4293      	cmp	r3, r2
 800139e:	bfb8      	it	lt
 80013a0:	4613      	movlt	r3, r2
 80013a2:	6033      	str	r3, [r6, #0]
 80013a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013a8:	4607      	mov	r7, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	b10a      	cbz	r2, 80013b2 <_printf_common+0x26>
 80013ae:	3301      	adds	r3, #1
 80013b0:	6033      	str	r3, [r6, #0]
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	0699      	lsls	r1, r3, #26
 80013b6:	bf42      	ittt	mi
 80013b8:	6833      	ldrmi	r3, [r6, #0]
 80013ba:	3302      	addmi	r3, #2
 80013bc:	6033      	strmi	r3, [r6, #0]
 80013be:	6825      	ldr	r5, [r4, #0]
 80013c0:	f015 0506 	ands.w	r5, r5, #6
 80013c4:	d106      	bne.n	80013d4 <_printf_common+0x48>
 80013c6:	f104 0a19 	add.w	sl, r4, #25
 80013ca:	68e3      	ldr	r3, [r4, #12]
 80013cc:	6832      	ldr	r2, [r6, #0]
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	42ab      	cmp	r3, r5
 80013d2:	dc26      	bgt.n	8001422 <_printf_common+0x96>
 80013d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013d8:	1e13      	subs	r3, r2, #0
 80013da:	6822      	ldr	r2, [r4, #0]
 80013dc:	bf18      	it	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	0692      	lsls	r2, r2, #26
 80013e2:	d42b      	bmi.n	800143c <_printf_common+0xb0>
 80013e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013e8:	4649      	mov	r1, r9
 80013ea:	4638      	mov	r0, r7
 80013ec:	47c0      	blx	r8
 80013ee:	3001      	adds	r0, #1
 80013f0:	d01e      	beq.n	8001430 <_printf_common+0xa4>
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	68e5      	ldr	r5, [r4, #12]
 80013f6:	6832      	ldr	r2, [r6, #0]
 80013f8:	f003 0306 	and.w	r3, r3, #6
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	bf08      	it	eq
 8001400:	1aad      	subeq	r5, r5, r2
 8001402:	68a3      	ldr	r3, [r4, #8]
 8001404:	6922      	ldr	r2, [r4, #16]
 8001406:	bf0c      	ite	eq
 8001408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800140c:	2500      	movne	r5, #0
 800140e:	4293      	cmp	r3, r2
 8001410:	bfc4      	itt	gt
 8001412:	1a9b      	subgt	r3, r3, r2
 8001414:	18ed      	addgt	r5, r5, r3
 8001416:	2600      	movs	r6, #0
 8001418:	341a      	adds	r4, #26
 800141a:	42b5      	cmp	r5, r6
 800141c:	d11a      	bne.n	8001454 <_printf_common+0xc8>
 800141e:	2000      	movs	r0, #0
 8001420:	e008      	b.n	8001434 <_printf_common+0xa8>
 8001422:	2301      	movs	r3, #1
 8001424:	4652      	mov	r2, sl
 8001426:	4649      	mov	r1, r9
 8001428:	4638      	mov	r0, r7
 800142a:	47c0      	blx	r8
 800142c:	3001      	adds	r0, #1
 800142e:	d103      	bne.n	8001438 <_printf_common+0xac>
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001438:	3501      	adds	r5, #1
 800143a:	e7c6      	b.n	80013ca <_printf_common+0x3e>
 800143c:	18e1      	adds	r1, r4, r3
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	2030      	movs	r0, #48	; 0x30
 8001442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001446:	4422      	add	r2, r4
 8001448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800144c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001450:	3302      	adds	r3, #2
 8001452:	e7c7      	b.n	80013e4 <_printf_common+0x58>
 8001454:	2301      	movs	r3, #1
 8001456:	4622      	mov	r2, r4
 8001458:	4649      	mov	r1, r9
 800145a:	4638      	mov	r0, r7
 800145c:	47c0      	blx	r8
 800145e:	3001      	adds	r0, #1
 8001460:	d0e6      	beq.n	8001430 <_printf_common+0xa4>
 8001462:	3601      	adds	r6, #1
 8001464:	e7d9      	b.n	800141a <_printf_common+0x8e>
	...

08001468 <_printf_i>:
 8001468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800146c:	460c      	mov	r4, r1
 800146e:	4691      	mov	r9, r2
 8001470:	7e27      	ldrb	r7, [r4, #24]
 8001472:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001474:	2f78      	cmp	r7, #120	; 0x78
 8001476:	4680      	mov	r8, r0
 8001478:	469a      	mov	sl, r3
 800147a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800147e:	d807      	bhi.n	8001490 <_printf_i+0x28>
 8001480:	2f62      	cmp	r7, #98	; 0x62
 8001482:	d80a      	bhi.n	800149a <_printf_i+0x32>
 8001484:	2f00      	cmp	r7, #0
 8001486:	f000 80d8 	beq.w	800163a <_printf_i+0x1d2>
 800148a:	2f58      	cmp	r7, #88	; 0x58
 800148c:	f000 80a3 	beq.w	80015d6 <_printf_i+0x16e>
 8001490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001498:	e03a      	b.n	8001510 <_printf_i+0xa8>
 800149a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800149e:	2b15      	cmp	r3, #21
 80014a0:	d8f6      	bhi.n	8001490 <_printf_i+0x28>
 80014a2:	a001      	add	r0, pc, #4	; (adr r0, 80014a8 <_printf_i+0x40>)
 80014a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80014a8:	08001501 	.word	0x08001501
 80014ac:	08001515 	.word	0x08001515
 80014b0:	08001491 	.word	0x08001491
 80014b4:	08001491 	.word	0x08001491
 80014b8:	08001491 	.word	0x08001491
 80014bc:	08001491 	.word	0x08001491
 80014c0:	08001515 	.word	0x08001515
 80014c4:	08001491 	.word	0x08001491
 80014c8:	08001491 	.word	0x08001491
 80014cc:	08001491 	.word	0x08001491
 80014d0:	08001491 	.word	0x08001491
 80014d4:	08001621 	.word	0x08001621
 80014d8:	08001545 	.word	0x08001545
 80014dc:	08001603 	.word	0x08001603
 80014e0:	08001491 	.word	0x08001491
 80014e4:	08001491 	.word	0x08001491
 80014e8:	08001643 	.word	0x08001643
 80014ec:	08001491 	.word	0x08001491
 80014f0:	08001545 	.word	0x08001545
 80014f4:	08001491 	.word	0x08001491
 80014f8:	08001491 	.word	0x08001491
 80014fc:	0800160b 	.word	0x0800160b
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	1d1a      	adds	r2, r3, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	600a      	str	r2, [r1, #0]
 8001508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800150c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001510:	2301      	movs	r3, #1
 8001512:	e0a3      	b.n	800165c <_printf_i+0x1f4>
 8001514:	6825      	ldr	r5, [r4, #0]
 8001516:	6808      	ldr	r0, [r1, #0]
 8001518:	062e      	lsls	r6, r5, #24
 800151a:	f100 0304 	add.w	r3, r0, #4
 800151e:	d50a      	bpl.n	8001536 <_printf_i+0xce>
 8001520:	6805      	ldr	r5, [r0, #0]
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	2d00      	cmp	r5, #0
 8001526:	da03      	bge.n	8001530 <_printf_i+0xc8>
 8001528:	232d      	movs	r3, #45	; 0x2d
 800152a:	426d      	negs	r5, r5
 800152c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001530:	485e      	ldr	r0, [pc, #376]	; (80016ac <_printf_i+0x244>)
 8001532:	230a      	movs	r3, #10
 8001534:	e019      	b.n	800156a <_printf_i+0x102>
 8001536:	f015 0f40 	tst.w	r5, #64	; 0x40
 800153a:	6805      	ldr	r5, [r0, #0]
 800153c:	600b      	str	r3, [r1, #0]
 800153e:	bf18      	it	ne
 8001540:	b22d      	sxthne	r5, r5
 8001542:	e7ef      	b.n	8001524 <_printf_i+0xbc>
 8001544:	680b      	ldr	r3, [r1, #0]
 8001546:	6825      	ldr	r5, [r4, #0]
 8001548:	1d18      	adds	r0, r3, #4
 800154a:	6008      	str	r0, [r1, #0]
 800154c:	0628      	lsls	r0, r5, #24
 800154e:	d501      	bpl.n	8001554 <_printf_i+0xec>
 8001550:	681d      	ldr	r5, [r3, #0]
 8001552:	e002      	b.n	800155a <_printf_i+0xf2>
 8001554:	0669      	lsls	r1, r5, #25
 8001556:	d5fb      	bpl.n	8001550 <_printf_i+0xe8>
 8001558:	881d      	ldrh	r5, [r3, #0]
 800155a:	4854      	ldr	r0, [pc, #336]	; (80016ac <_printf_i+0x244>)
 800155c:	2f6f      	cmp	r7, #111	; 0x6f
 800155e:	bf0c      	ite	eq
 8001560:	2308      	moveq	r3, #8
 8001562:	230a      	movne	r3, #10
 8001564:	2100      	movs	r1, #0
 8001566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800156a:	6866      	ldr	r6, [r4, #4]
 800156c:	60a6      	str	r6, [r4, #8]
 800156e:	2e00      	cmp	r6, #0
 8001570:	bfa2      	ittt	ge
 8001572:	6821      	ldrge	r1, [r4, #0]
 8001574:	f021 0104 	bicge.w	r1, r1, #4
 8001578:	6021      	strge	r1, [r4, #0]
 800157a:	b90d      	cbnz	r5, 8001580 <_printf_i+0x118>
 800157c:	2e00      	cmp	r6, #0
 800157e:	d04d      	beq.n	800161c <_printf_i+0x1b4>
 8001580:	4616      	mov	r6, r2
 8001582:	fbb5 f1f3 	udiv	r1, r5, r3
 8001586:	fb03 5711 	mls	r7, r3, r1, r5
 800158a:	5dc7      	ldrb	r7, [r0, r7]
 800158c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001590:	462f      	mov	r7, r5
 8001592:	42bb      	cmp	r3, r7
 8001594:	460d      	mov	r5, r1
 8001596:	d9f4      	bls.n	8001582 <_printf_i+0x11a>
 8001598:	2b08      	cmp	r3, #8
 800159a:	d10b      	bne.n	80015b4 <_printf_i+0x14c>
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	07df      	lsls	r7, r3, #31
 80015a0:	d508      	bpl.n	80015b4 <_printf_i+0x14c>
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	6861      	ldr	r1, [r4, #4]
 80015a6:	4299      	cmp	r1, r3
 80015a8:	bfde      	ittt	le
 80015aa:	2330      	movle	r3, #48	; 0x30
 80015ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015b4:	1b92      	subs	r2, r2, r6
 80015b6:	6122      	str	r2, [r4, #16]
 80015b8:	f8cd a000 	str.w	sl, [sp]
 80015bc:	464b      	mov	r3, r9
 80015be:	aa03      	add	r2, sp, #12
 80015c0:	4621      	mov	r1, r4
 80015c2:	4640      	mov	r0, r8
 80015c4:	f7ff fee2 	bl	800138c <_printf_common>
 80015c8:	3001      	adds	r0, #1
 80015ca:	d14c      	bne.n	8001666 <_printf_i+0x1fe>
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	b004      	add	sp, #16
 80015d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015d6:	4835      	ldr	r0, [pc, #212]	; (80016ac <_printf_i+0x244>)
 80015d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	680e      	ldr	r6, [r1, #0]
 80015e0:	061f      	lsls	r7, r3, #24
 80015e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80015e6:	600e      	str	r6, [r1, #0]
 80015e8:	d514      	bpl.n	8001614 <_printf_i+0x1ac>
 80015ea:	07d9      	lsls	r1, r3, #31
 80015ec:	bf44      	itt	mi
 80015ee:	f043 0320 	orrmi.w	r3, r3, #32
 80015f2:	6023      	strmi	r3, [r4, #0]
 80015f4:	b91d      	cbnz	r5, 80015fe <_printf_i+0x196>
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	f023 0320 	bic.w	r3, r3, #32
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	2310      	movs	r3, #16
 8001600:	e7b0      	b.n	8001564 <_printf_i+0xfc>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	2378      	movs	r3, #120	; 0x78
 800160c:	4828      	ldr	r0, [pc, #160]	; (80016b0 <_printf_i+0x248>)
 800160e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001612:	e7e3      	b.n	80015dc <_printf_i+0x174>
 8001614:	065e      	lsls	r6, r3, #25
 8001616:	bf48      	it	mi
 8001618:	b2ad      	uxthmi	r5, r5
 800161a:	e7e6      	b.n	80015ea <_printf_i+0x182>
 800161c:	4616      	mov	r6, r2
 800161e:	e7bb      	b.n	8001598 <_printf_i+0x130>
 8001620:	680b      	ldr	r3, [r1, #0]
 8001622:	6826      	ldr	r6, [r4, #0]
 8001624:	6960      	ldr	r0, [r4, #20]
 8001626:	1d1d      	adds	r5, r3, #4
 8001628:	600d      	str	r5, [r1, #0]
 800162a:	0635      	lsls	r5, r6, #24
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	d501      	bpl.n	8001634 <_printf_i+0x1cc>
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	e002      	b.n	800163a <_printf_i+0x1d2>
 8001634:	0671      	lsls	r1, r6, #25
 8001636:	d5fb      	bpl.n	8001630 <_printf_i+0x1c8>
 8001638:	8018      	strh	r0, [r3, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	6123      	str	r3, [r4, #16]
 800163e:	4616      	mov	r6, r2
 8001640:	e7ba      	b.n	80015b8 <_printf_i+0x150>
 8001642:	680b      	ldr	r3, [r1, #0]
 8001644:	1d1a      	adds	r2, r3, #4
 8001646:	600a      	str	r2, [r1, #0]
 8001648:	681e      	ldr	r6, [r3, #0]
 800164a:	6862      	ldr	r2, [r4, #4]
 800164c:	2100      	movs	r1, #0
 800164e:	4630      	mov	r0, r6
 8001650:	f7fe fdde 	bl	8000210 <memchr>
 8001654:	b108      	cbz	r0, 800165a <_printf_i+0x1f2>
 8001656:	1b80      	subs	r0, r0, r6
 8001658:	6060      	str	r0, [r4, #4]
 800165a:	6863      	ldr	r3, [r4, #4]
 800165c:	6123      	str	r3, [r4, #16]
 800165e:	2300      	movs	r3, #0
 8001660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001664:	e7a8      	b.n	80015b8 <_printf_i+0x150>
 8001666:	6923      	ldr	r3, [r4, #16]
 8001668:	4632      	mov	r2, r6
 800166a:	4649      	mov	r1, r9
 800166c:	4640      	mov	r0, r8
 800166e:	47d0      	blx	sl
 8001670:	3001      	adds	r0, #1
 8001672:	d0ab      	beq.n	80015cc <_printf_i+0x164>
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	079b      	lsls	r3, r3, #30
 8001678:	d413      	bmi.n	80016a2 <_printf_i+0x23a>
 800167a:	68e0      	ldr	r0, [r4, #12]
 800167c:	9b03      	ldr	r3, [sp, #12]
 800167e:	4298      	cmp	r0, r3
 8001680:	bfb8      	it	lt
 8001682:	4618      	movlt	r0, r3
 8001684:	e7a4      	b.n	80015d0 <_printf_i+0x168>
 8001686:	2301      	movs	r3, #1
 8001688:	4632      	mov	r2, r6
 800168a:	4649      	mov	r1, r9
 800168c:	4640      	mov	r0, r8
 800168e:	47d0      	blx	sl
 8001690:	3001      	adds	r0, #1
 8001692:	d09b      	beq.n	80015cc <_printf_i+0x164>
 8001694:	3501      	adds	r5, #1
 8001696:	68e3      	ldr	r3, [r4, #12]
 8001698:	9903      	ldr	r1, [sp, #12]
 800169a:	1a5b      	subs	r3, r3, r1
 800169c:	42ab      	cmp	r3, r5
 800169e:	dcf2      	bgt.n	8001686 <_printf_i+0x21e>
 80016a0:	e7eb      	b.n	800167a <_printf_i+0x212>
 80016a2:	2500      	movs	r5, #0
 80016a4:	f104 0619 	add.w	r6, r4, #25
 80016a8:	e7f5      	b.n	8001696 <_printf_i+0x22e>
 80016aa:	bf00      	nop
 80016ac:	080019c9 	.word	0x080019c9
 80016b0:	080019da 	.word	0x080019da

080016b4 <_sbrk_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	4d06      	ldr	r5, [pc, #24]	; (80016d0 <_sbrk_r+0x1c>)
 80016b8:	2300      	movs	r3, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	f7fe ff3a 	bl	8000538 <_sbrk>
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	d102      	bne.n	80016ce <_sbrk_r+0x1a>
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	b103      	cbz	r3, 80016ce <_sbrk_r+0x1a>
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	200000a0 	.word	0x200000a0

080016d4 <__sread>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	460c      	mov	r4, r1
 80016d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016dc:	f000 f8a0 	bl	8001820 <_read_r>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	bfab      	itete	ge
 80016e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016e6:	89a3      	ldrhlt	r3, [r4, #12]
 80016e8:	181b      	addge	r3, r3, r0
 80016ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016ee:	bfac      	ite	ge
 80016f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80016f2:	81a3      	strhlt	r3, [r4, #12]
 80016f4:	bd10      	pop	{r4, pc}

080016f6 <__swrite>:
 80016f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016fa:	461f      	mov	r7, r3
 80016fc:	898b      	ldrh	r3, [r1, #12]
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	4605      	mov	r5, r0
 8001702:	460c      	mov	r4, r1
 8001704:	4616      	mov	r6, r2
 8001706:	d505      	bpl.n	8001714 <__swrite+0x1e>
 8001708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800170c:	2302      	movs	r3, #2
 800170e:	2200      	movs	r2, #0
 8001710:	f000 f868 	bl	80017e4 <_lseek_r>
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800171a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800171e:	81a3      	strh	r3, [r4, #12]
 8001720:	4632      	mov	r2, r6
 8001722:	463b      	mov	r3, r7
 8001724:	4628      	mov	r0, r5
 8001726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	f000 b817 	b.w	800175c <_write_r>

0800172e <__sseek>:
 800172e:	b510      	push	{r4, lr}
 8001730:	460c      	mov	r4, r1
 8001732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001736:	f000 f855 	bl	80017e4 <_lseek_r>
 800173a:	1c43      	adds	r3, r0, #1
 800173c:	89a3      	ldrh	r3, [r4, #12]
 800173e:	bf15      	itete	ne
 8001740:	6560      	strne	r0, [r4, #84]	; 0x54
 8001742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800174a:	81a3      	strheq	r3, [r4, #12]
 800174c:	bf18      	it	ne
 800174e:	81a3      	strhne	r3, [r4, #12]
 8001750:	bd10      	pop	{r4, pc}

08001752 <__sclose>:
 8001752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001756:	f000 b813 	b.w	8001780 <_close_r>
	...

0800175c <_write_r>:
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4d07      	ldr	r5, [pc, #28]	; (800177c <_write_r+0x20>)
 8001760:	4604      	mov	r4, r0
 8001762:	4608      	mov	r0, r1
 8001764:	4611      	mov	r1, r2
 8001766:	2200      	movs	r2, #0
 8001768:	602a      	str	r2, [r5, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f7fe ff39 	bl	80005e2 <_write>
 8001770:	1c43      	adds	r3, r0, #1
 8001772:	d102      	bne.n	800177a <_write_r+0x1e>
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	b103      	cbz	r3, 800177a <_write_r+0x1e>
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	bd38      	pop	{r3, r4, r5, pc}
 800177c:	200000a0 	.word	0x200000a0

08001780 <_close_r>:
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4d06      	ldr	r5, [pc, #24]	; (800179c <_close_r+0x1c>)
 8001784:	2300      	movs	r3, #0
 8001786:	4604      	mov	r4, r0
 8001788:	4608      	mov	r0, r1
 800178a:	602b      	str	r3, [r5, #0]
 800178c:	f7fe fea0 	bl	80004d0 <_close>
 8001790:	1c43      	adds	r3, r0, #1
 8001792:	d102      	bne.n	800179a <_close_r+0x1a>
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	b103      	cbz	r3, 800179a <_close_r+0x1a>
 8001798:	6023      	str	r3, [r4, #0]
 800179a:	bd38      	pop	{r3, r4, r5, pc}
 800179c:	200000a0 	.word	0x200000a0

080017a0 <_fstat_r>:
 80017a0:	b538      	push	{r3, r4, r5, lr}
 80017a2:	4d07      	ldr	r5, [pc, #28]	; (80017c0 <_fstat_r+0x20>)
 80017a4:	2300      	movs	r3, #0
 80017a6:	4604      	mov	r4, r0
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	602b      	str	r3, [r5, #0]
 80017ae:	f7fe fe9b 	bl	80004e8 <_fstat>
 80017b2:	1c43      	adds	r3, r0, #1
 80017b4:	d102      	bne.n	80017bc <_fstat_r+0x1c>
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	b103      	cbz	r3, 80017bc <_fstat_r+0x1c>
 80017ba:	6023      	str	r3, [r4, #0]
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
 80017be:	bf00      	nop
 80017c0:	200000a0 	.word	0x200000a0

080017c4 <_isatty_r>:
 80017c4:	b538      	push	{r3, r4, r5, lr}
 80017c6:	4d06      	ldr	r5, [pc, #24]	; (80017e0 <_isatty_r+0x1c>)
 80017c8:	2300      	movs	r3, #0
 80017ca:	4604      	mov	r4, r0
 80017cc:	4608      	mov	r0, r1
 80017ce:	602b      	str	r3, [r5, #0]
 80017d0:	f7fe fe9a 	bl	8000508 <_isatty>
 80017d4:	1c43      	adds	r3, r0, #1
 80017d6:	d102      	bne.n	80017de <_isatty_r+0x1a>
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	b103      	cbz	r3, 80017de <_isatty_r+0x1a>
 80017dc:	6023      	str	r3, [r4, #0]
 80017de:	bd38      	pop	{r3, r4, r5, pc}
 80017e0:	200000a0 	.word	0x200000a0

080017e4 <_lseek_r>:
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	4d07      	ldr	r5, [pc, #28]	; (8001804 <_lseek_r+0x20>)
 80017e8:	4604      	mov	r4, r0
 80017ea:	4608      	mov	r0, r1
 80017ec:	4611      	mov	r1, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	602a      	str	r2, [r5, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f7fe fe93 	bl	800051e <_lseek>
 80017f8:	1c43      	adds	r3, r0, #1
 80017fa:	d102      	bne.n	8001802 <_lseek_r+0x1e>
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	b103      	cbz	r3, 8001802 <_lseek_r+0x1e>
 8001800:	6023      	str	r3, [r4, #0]
 8001802:	bd38      	pop	{r3, r4, r5, pc}
 8001804:	200000a0 	.word	0x200000a0

08001808 <__malloc_lock>:
 8001808:	4801      	ldr	r0, [pc, #4]	; (8001810 <__malloc_lock+0x8>)
 800180a:	f7ff bb4d 	b.w	8000ea8 <__retarget_lock_acquire_recursive>
 800180e:	bf00      	nop
 8001810:	20000098 	.word	0x20000098

08001814 <__malloc_unlock>:
 8001814:	4801      	ldr	r0, [pc, #4]	; (800181c <__malloc_unlock+0x8>)
 8001816:	f7ff bb48 	b.w	8000eaa <__retarget_lock_release_recursive>
 800181a:	bf00      	nop
 800181c:	20000098 	.word	0x20000098

08001820 <_read_r>:
 8001820:	b538      	push	{r3, r4, r5, lr}
 8001822:	4d07      	ldr	r5, [pc, #28]	; (8001840 <_read_r+0x20>)
 8001824:	4604      	mov	r4, r0
 8001826:	4608      	mov	r0, r1
 8001828:	4611      	mov	r1, r2
 800182a:	2200      	movs	r2, #0
 800182c:	602a      	str	r2, [r5, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f7fe feae 	bl	8000590 <_read>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	d102      	bne.n	800183e <_read_r+0x1e>
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	b103      	cbz	r3, 800183e <_read_r+0x1e>
 800183c:	6023      	str	r3, [r4, #0]
 800183e:	bd38      	pop	{r3, r4, r5, pc}
 8001840:	200000a0 	.word	0x200000a0

08001844 <_init>:
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	bf00      	nop
 8001848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184a:	bc08      	pop	{r3}
 800184c:	469e      	mov	lr, r3
 800184e:	4770      	bx	lr

08001850 <_fini>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	bf00      	nop
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr
