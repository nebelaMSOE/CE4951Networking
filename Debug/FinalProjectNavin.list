
FinalProjectNavin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001658  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001828  08001828  00011828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800199c  0800199c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800199c  0800199c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800199c  0800199c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019a0  080019a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080019a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  08001a0c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08001a0c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003aab  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bd0  00000000  00000000  00023b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00024718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00024938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003704  00000000  00000000  00024af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002898  00000000  00000000  000281f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000af0d  00000000  00000000  0002aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00035999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea8  00000000  00000000  000359ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001810 	.word	0x08001810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001810 	.word	0x08001810

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <counter_init>:

/*
 * Initializes the counter to use interrupts and
 * keep track of time
 */
void counter_init(){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

	//Unmask interrupt
	*NVIC_ISER0 |= (1<<28);
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <counter_init+0x54>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <counter_init+0x54>)
 80002ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002be:	6013      	str	r3, [r2, #0]

	*RCC_APB1ENR |= 1;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <counter_init+0x58>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <counter_init+0x58>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]

	//Set timeout for 1.1ms
	tim->ARR = 17600;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <counter_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f244 42c0 	movw	r2, #17600	; 0x44c0
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->CCR1 = 17600;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <counter_init+0x5c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f244 42c0 	movw	r2, #17600	; 0x44c0
 80002de:	631a      	str	r2, [r3, #48]	; 0x30

	//Enable interrupt
	tim->DIER = 2;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <counter_init+0x5c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2202      	movs	r2, #2
 80002e6:	60da      	str	r2, [r3, #12]

	tim->CCMR1 = (0b011<<4);
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <counter_init+0x5c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2230      	movs	r2, #48	; 0x30
 80002ee:	619a      	str	r2, [r3, #24]

	tim->CCER = 1;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <counter_init+0x5c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2201      	movs	r2, #1
 80002f6:	621a      	str	r2, [r3, #32]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	40023840 	.word	0x40023840
 800030c:	20000000 	.word	0x20000000

08000310 <detect_init>:
/*
 * Init function to enable external interrupt
 * on pin PA15, triggering on any edge
 *
 */
void detect_init(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	//Enable components
	*RCC_AHB1ENR |= (1<<GPIOAEN);
 8000314:	4b20      	ldr	r3, [pc, #128]	; (8000398 <detect_init+0x88>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <detect_init+0x88>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]
	*RCC_APB2ENR |= (SYSCFGEN);
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <detect_init+0x8c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a1d      	ldr	r2, [pc, #116]	; (800039c <detect_init+0x8c>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6013      	str	r3, [r2, #0]

	//Set A15 to input (Clear that part of the register)
	*GPIOA_MODER &= ~(0xC0000000);
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <detect_init+0x90>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <detect_init+0x90>)
 8000332:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000336:	6013      	str	r3, [r2, #0]

	//Set A15 to pull up
	*GPIOA_PUPDR &= ~(0xC0000000);
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <detect_init+0x94>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <detect_init+0x94>)
 800033e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000342:	6013      	str	r3, [r2, #0]
	*GPIOA_PUPDR |= (0x40000000);
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <detect_init+0x94>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <detect_init+0x94>)
 800034a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800034e:	6013      	str	r3, [r2, #0]

	//Enable interrupt
	*SYSCFG_EXTICR4 &= ~(0xF000);
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <detect_init+0x98>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <detect_init+0x98>)
 8000356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800035a:	6013      	str	r3, [r2, #0]

	//Enable trigger on both edges
	*EXTI_RTSR |= (1<<15);
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <detect_init+0x9c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a12      	ldr	r2, [pc, #72]	; (80003ac <detect_init+0x9c>)
 8000362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000366:	6013      	str	r3, [r2, #0]
	*EXTI_FTSR |= (1<<15);
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <detect_init+0xa0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <detect_init+0xa0>)
 800036e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000372:	6013      	str	r3, [r2, #0]

	//Unmask interrupt
	*NVIC_ISER1 |= (1<<8);
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <detect_init+0xa4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <detect_init+0xa4>)
 800037a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037e:	6013      	str	r3, [r2, #0]

	//Enable interrupt
	*EXTI_IMR |= (1<<15);
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <detect_init+0xa8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <detect_init+0xa8>)
 8000386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023830 	.word	0x40023830
 800039c:	40023844 	.word	0x40023844
 80003a0:	40020000 	.word	0x40020000
 80003a4:	4002000c 	.word	0x4002000c
 80003a8:	40013814 	.word	0x40013814
 80003ac:	40013c08 	.word	0x40013c08
 80003b0:	40013c0c 	.word	0x40013c0c
 80003b4:	e000e104 	.word	0xe000e104
 80003b8:	40013c00 	.word	0x40013c00

080003bc <counter_start>:

/*
 * Starts the counter
 */
void counter_start(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	timeTaken = 0;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <counter_start+0x1c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
	tim->CR1 = 1;
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <counter_start+0x20>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	20000084 	.word	0x20000084
 80003dc:	20000000 	.word	0x20000000

080003e0 <counter_stop>:

/*
 * Stops the counter
 */
void counter_stop(){
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	tim->CR1 = 0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <counter_stop+0x18>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000000 	.word	0x20000000

080003fc <counter_resetValue>:
uint32_t counter_getCount(){
	return timeTaken;
}

//resets value of counter
void counter_resetValue(){
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	*TIM2_CNT = 0;
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <counter_resetValue+0x14>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40000024 	.word	0x40000024

08000414 <counter_resetFlag>:

//resets interrupt flag
void counter_resetFlag(){
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	tim->SR = ~(1<<1);
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <counter_resetFlag+0x18>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f06f 0202 	mvn.w	r2, #2
 8000420:	611a      	str	r2, [r3, #16]
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000

08000430 <led_init>:
 * Enables the GPIOB in RCC_AHB1ENR
 * Sets LED0 - LED9 to output mode ("01")
 * Args: na
 * Return: na
 */
void led_init(){
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

	//Enables GPIOB in RCC_AHB1ENR
	*RCC_AHB1ENR |= (1<<GPIOBEN);
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <led_init+0x54>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a12      	ldr	r2, [pc, #72]	; (8000484 <led_init+0x54>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6013      	str	r3, [r2, #0]

	//Enable lower 6 leds
	*GPIOB_MODER &= ~(0x3FFF<<10);
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <led_init+0x58>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <led_init+0x58>)
 8000446:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800044a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800044e:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x555<<10);
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <led_init+0x58>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <led_init+0x58>)
 8000456:	f443 13aa 	orr.w	r3, r3, #1392640	; 0x154000
 800045a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800045e:	6013      	str	r3, [r2, #0]

	//Enables upper 4 leds
	*GPIOB_MODER &= ~(0xFF<<24);
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <led_init+0x58>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a08      	ldr	r2, [pc, #32]	; (8000488 <led_init+0x58>)
 8000466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800046a:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x55<<24);
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <led_init+0x58>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <led_init+0x58>)
 8000472:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000476:	6013      	str	r3, [r2, #0]

}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023830 	.word	0x40023830
 8000488:	40020400 	.word	0x40020400

0800048c <led_allOff>:
 * led_allOff()
 * Turn off all leds
 * Args: na
 * Return: na
 */
void led_allOff(){
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	//Set led output pins to 0
	*GPIOB_ODR &= ~((0b111111<<5) | (0b1111<<12));
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <led_allOff+0x20>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a05      	ldr	r2, [pc, #20]	; (80004ac <led_allOff+0x20>)
 8000496:	f423 4377 	bic.w	r3, r3, #63232	; 0xf700
 800049a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40020414 	.word	0x40020414

080004b0 <led_on>:
 * led_on(uint8_t ledIndex)
 * Turn on specific led, prints error if out of range
 * Args: uint8_t ledIndex: index of led
 * Return: na
 */
void led_on(uint8_t ledIndex){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	//Enables specific LED pin in BSRR set section
	switch (ledIndex) {
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b09      	cmp	r3, #9
 80004be:	d85d      	bhi.n	800057c <led_on+0xcc>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <led_on+0x18>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004f1 	.word	0x080004f1
 80004cc:	080004ff 	.word	0x080004ff
 80004d0:	0800050d 	.word	0x0800050d
 80004d4:	0800051b 	.word	0x0800051b
 80004d8:	08000529 	.word	0x08000529
 80004dc:	08000537 	.word	0x08000537
 80004e0:	08000545 	.word	0x08000545
 80004e4:	08000553 	.word	0x08000553
 80004e8:	08000561 	.word	0x08000561
 80004ec:	0800056f 	.word	0x0800056f
			case 0 : *GPIOB_BSRR |= (1<<5); break;
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <led_on+0xdc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a25      	ldr	r2, [pc, #148]	; (800058c <led_on+0xdc>)
 80004f6:	f043 0320 	orr.w	r3, r3, #32
 80004fa:	6013      	str	r3, [r2, #0]
 80004fc:	e042      	b.n	8000584 <led_on+0xd4>
			case 1 : *GPIOB_BSRR |= (1<<6); break;
 80004fe:	4b23      	ldr	r3, [pc, #140]	; (800058c <led_on+0xdc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a22      	ldr	r2, [pc, #136]	; (800058c <led_on+0xdc>)
 8000504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	e03b      	b.n	8000584 <led_on+0xd4>
			case 2 : *GPIOB_BSRR |= (1<<7); break;
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <led_on+0xdc>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1e      	ldr	r2, [pc, #120]	; (800058c <led_on+0xdc>)
 8000512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000516:	6013      	str	r3, [r2, #0]
 8000518:	e034      	b.n	8000584 <led_on+0xd4>
			case 3 : *GPIOB_BSRR |= (1<<8); break;
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <led_on+0xdc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a1b      	ldr	r2, [pc, #108]	; (800058c <led_on+0xdc>)
 8000520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000524:	6013      	str	r3, [r2, #0]
 8000526:	e02d      	b.n	8000584 <led_on+0xd4>
			case 4 : *GPIOB_BSRR |= (1<<9); break;
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <led_on+0xdc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a17      	ldr	r2, [pc, #92]	; (800058c <led_on+0xdc>)
 800052e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	e026      	b.n	8000584 <led_on+0xd4>
			case 5 : *GPIOB_BSRR |= (1<<10); break;
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <led_on+0xdc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <led_on+0xdc>)
 800053c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	e01f      	b.n	8000584 <led_on+0xd4>
			case 6 : *GPIOB_BSRR |= (1<<12); break;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <led_on+0xdc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a10      	ldr	r2, [pc, #64]	; (800058c <led_on+0xdc>)
 800054a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	e018      	b.n	8000584 <led_on+0xd4>
			case 7 : *GPIOB_BSRR |= (1<<13); break;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <led_on+0xdc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <led_on+0xdc>)
 8000558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	e011      	b.n	8000584 <led_on+0xd4>
			case 8 : *GPIOB_BSRR |= (1<<14); break;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <led_on+0xdc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <led_on+0xdc>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	e00a      	b.n	8000584 <led_on+0xd4>
			case 9 : *GPIOB_BSRR |= (1<<15); break;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <led_on+0xdc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a06      	ldr	r2, [pc, #24]	; (800058c <led_on+0xdc>)
 8000574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e003      	b.n	8000584 <led_on+0xd4>
			default: printf("Args is out of range or not a number"); break;
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <led_on+0xe0>)
 800057e:	f000 f9f1 	bl	8000964 <iprintf>
 8000582:	bf00      	nop
	}
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40020418 	.word	0x40020418
 8000590:	08001828 	.word	0x08001828

08000594 <main>:
 * BUSY -> IDLE (E3)
 * COLLISION -> BUSY (E1)
 */

int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	//init_usart2(57600, F_CPU);
	//Test to to ensure connection
	//printf("CE4951 Networking Project");

	//Initialize leds
	led_init();
 8000598:	f7ff ff4a 	bl	8000430 <led_init>
	//Initialize counter with timeout of 1.1ms
	counter_init();
 800059c:	f7ff fe88 	bl	80002b0 <counter_init>
	//Initialize pin PA15 and interrupts on any edge
	detect_init();
 80005a0:	f7ff feb6 	bl	8000310 <detect_init>
	while(1){
		switch (currentState)
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <main+0x6c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d018      	beq.n	80005de <main+0x4a>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	dc1f      	bgt.n	80005f0 <main+0x5c>
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <main+0x26>
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d009      	beq.n	80005cc <main+0x38>
 80005b8:	e01a      	b.n	80005f0 <main+0x5c>
		{
		case IDLE:
			//Left two LEDs on
			led_allOff();
 80005ba:	f7ff ff67 	bl	800048c <led_allOff>
			led_on(9);
 80005be:	2009      	movs	r0, #9
 80005c0:	f7ff ff76 	bl	80004b0 <led_on>
			led_on(8);
 80005c4:	2008      	movs	r0, #8
 80005c6:	f7ff ff73 	bl	80004b0 <led_on>
			// Interrupt when E1

			break;
 80005ca:	e017      	b.n	80005fc <main+0x68>

		case BUSY:
			//Middle two LEDs on
			led_allOff();
 80005cc:	f7ff ff5e 	bl	800048c <led_allOff>
			led_on(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f7ff ff6d 	bl	80004b0 <led_on>
			led_on(4);
 80005d6:	2004      	movs	r0, #4
 80005d8:	f7ff ff6a 	bl	80004b0 <led_on>
			//Interrupt when E2

			//Interrupt when E3

			break;
 80005dc:	e00e      	b.n	80005fc <main+0x68>

		case COLLISION:
			//Right two LEDs on
			led_allOff();
 80005de:	f7ff ff55 	bl	800048c <led_allOff>
			led_on(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff ff64 	bl	80004b0 <led_on>
			led_on(0);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ff61 	bl	80004b0 <led_on>
			//Interrupt when E1

			break;
 80005ee:	e005      	b.n	80005fc <main+0x68>

		default:
			led_allOff();
 80005f0:	f7ff ff4c 	bl	800048c <led_allOff>
			//Unexpected value for currentState
			//Resetting currentState to initial value
			currentState = IDLE;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <main+0x6c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

			break;
 80005fa:	bf00      	nop
		switch (currentState)
 80005fc:	e7d2      	b.n	80005a4 <main+0x10>
 80005fe:	bf00      	nop
 8000600:	20000088 	.word	0x20000088

08000604 <TIM2_IRQHandler>:
 * Interrupt handler to handle interrupts
 * from the counter
 * Args: na
 * Return: na
 */
void TIM2_IRQHandler(void){
 8000604:	4668      	mov	r0, sp
 8000606:	f020 0107 	bic.w	r1, r0, #7
 800060a:	468d      	mov	sp, r1
 800060c:	b581      	push	{r0, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
	//Clear flag
	counter_resetFlag();
 8000612:	f7ff feff 	bl	8000414 <counter_resetFlag>
	//get value on pin A15
	uint32_t valueIn = *GPIOA_IDR & 0x8000;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <TIM2_IRQHandler+0x64>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061e:	607b      	str	r3, [r7, #4]
	//shift value to be 1 or 0
	valueIn = (valueIn >> 15);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	0bdb      	lsrs	r3, r3, #15
 8000624:	607b      	str	r3, [r7, #4]
	if(currentState == BUSY){
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <TIM2_IRQHandler+0x68>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d114      	bne.n	8000658 <TIM2_IRQHandler+0x54>
		//if busy and E2 move to collision
		if(valueIn == 0){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d107      	bne.n	8000644 <TIM2_IRQHandler+0x40>
			currentState = COLLISION;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <TIM2_IRQHandler+0x68>)
 8000636:	2202      	movs	r2, #2
 8000638:	701a      	strb	r2, [r3, #0]
			//stop counter
			counter_stop();
 800063a:	f7ff fed1 	bl	80003e0 <counter_stop>
			//reset counter value to 0
			counter_resetValue();
 800063e:	f7ff fedd 	bl	80003fc <counter_resetValue>
			//reset counter value
			counter_resetValue();
		}
	}

}
 8000642:	e009      	b.n	8000658 <TIM2_IRQHandler+0x54>
		} else if (valueIn == 1){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d106      	bne.n	8000658 <TIM2_IRQHandler+0x54>
			currentState = IDLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <TIM2_IRQHandler+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
			counter_stop();
 8000650:	f7ff fec6 	bl	80003e0 <counter_stop>
			counter_resetValue();
 8000654:	f7ff fed2 	bl	80003fc <counter_resetValue>
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 8000662:	4685      	mov	sp, r0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40020010 	.word	0x40020010
 800066c:	20000088 	.word	0x20000088

08000670 <EXTI15_10_IRQHandler>:
 * Handles the interrupts for a signal edge
 * on pin A15
 * Args: na
 * Return: na
 */
void EXTI15_10_IRQHandler(void){
 8000670:	4668      	mov	r0, sp
 8000672:	f020 0107 	bic.w	r1, r0, #7
 8000676:	468d      	mov	sp, r1
 8000678:	b589      	push	{r0, r3, r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//verify interrupt on pin 15
	if((*EXTI_PR) & (1<<15)){
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <EXTI15_10_IRQHandler+0x70>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d024      	beq.n	80006d2 <EXTI15_10_IRQHandler+0x62>
		//clear interrupt
		*EXTI_PR |= 1<<15;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <EXTI15_10_IRQHandler+0x70>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <EXTI15_10_IRQHandler+0x70>)
 800068e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000692:	6013      	str	r3, [r2, #0]
		switch (currentState)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <EXTI15_10_IRQHandler+0x74>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <EXTI15_10_IRQHandler+0x32>
 800069c:	2b02      	cmp	r3, #2
 800069e:	d008      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x42>
 80006a0:	e00f      	b.n	80006c2 <EXTI15_10_IRQHandler+0x52>
				{
				case IDLE:
					//if idle and E1 move to busy
					currentState = BUSY;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <EXTI15_10_IRQHandler+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
					//reset counter value to 0
					counter_resetValue();
 80006a8:	f7ff fea8 	bl	80003fc <counter_resetValue>
					//start counter
					counter_start();
 80006ac:	f7ff fe86 	bl	80003bc <counter_start>
					break;
 80006b0:	e010      	b.n	80006d4 <EXTI15_10_IRQHandler+0x64>

				case COLLISION:
					//if collision and E1 move to busy
					currentState = BUSY;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <EXTI15_10_IRQHandler+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
					//reset counter value to 0
					counter_resetValue();
 80006b8:	f7ff fea0 	bl	80003fc <counter_resetValue>
					//start counter
					counter_start();
 80006bc:	f7ff fe7e 	bl	80003bc <counter_start>
					break;
 80006c0:	e008      	b.n	80006d4 <EXTI15_10_IRQHandler+0x64>

				default:
					led_allOff();
 80006c2:	f7ff fee3 	bl	800048c <led_allOff>
					//Unexpected value for currentState
					//Resetting currentState to initial value
					currentState = IDLE;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <EXTI15_10_IRQHandler+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
					//stop counter
					counter_stop();
 80006cc:	f7ff fe88 	bl	80003e0 <counter_stop>

					break;
 80006d0:	e000      	b.n	80006d4 <EXTI15_10_IRQHandler+0x64>
				}
	}
 80006d2:	bf00      	nop
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80006dc:	4685      	mov	sp, r0
 80006de:	4770      	bx	lr
 80006e0:	40013c14 	.word	0x40013c14
 80006e4:	20000088 	.word	0x20000088

080006e8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	return -1;
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000710:	605a      	str	r2, [r3, #4]
	return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <_isatty>:

int _isatty(int file)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
	return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <_sbrk+0x50>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x16>
		heap_end = &end;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <_sbrk+0x50>)
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <_sbrk+0x54>)
 8000764:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <_sbrk+0x50>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <_sbrk+0x50>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	466a      	mov	r2, sp
 8000776:	4293      	cmp	r3, r2
 8000778:	d907      	bls.n	800078a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800077a:	f000 f8c1 	bl	8000900 <__errno>
 800077e:	4603      	mov	r3, r0
 8000780:	220c      	movs	r2, #12
 8000782:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	e006      	b.n	8000798 <_sbrk+0x48>
	}

	heap_end += incr;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <_sbrk+0x50>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_sbrk+0x50>)
 8000794:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	200000a8 	.word	0x200000a8

080007a8 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e012      	b.n	80007e4 <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	3301      	adds	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80007c4:	f000 f836 	bl	8000834 <usart2_getch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	d00a      	beq.n	80007ee <_read+0x46>
		ptr++;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3301      	adds	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbe8      	blt.n	80007be <_read+0x16>
 80007ec:	e000      	b.n	80007f0 <_read+0x48>
		if(*ptr == '\n') break;
 80007ee:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 80007f0:	693b      	ldr	r3, [r7, #16]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_write>:

int _write(int file, char *ptr, int len)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e009      	b.n	8000820 <_write+0x26>
	{
		usart2_putch(*ptr++);
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	60ba      	str	r2, [r7, #8]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f82f 	bl	8000878 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf1      	blt.n	800080c <_write+0x12>
	}
	return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <usart2_getch>:



char usart2_getch(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 800083a:	bf00      	nop
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <usart2_getch+0x3c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	2b20      	cmp	r3, #32
 8000846:	d1f9      	bne.n	800083c <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <usart2_getch+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f811 	bl	8000878 <usart2_putch>

	if (c == '\r'){  // If character is CR
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b0d      	cmp	r3, #13
 800085a:	d104      	bne.n	8000866 <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 800085c:	200a      	movs	r0, #10
 800085e:	f000 f80b 	bl	8000878 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 8000862:	230a      	movs	r3, #10
 8000864:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 8000866:	79fb      	ldrb	r3, [r7, #7]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40004400 	.word	0x40004400
 8000874:	40004404 	.word	0x40004404

08000878 <usart2_putch>:

void usart2_putch(char c){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 8000882:	bf00      	nop
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <usart2_putch+0x2c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088c:	2b80      	cmp	r3, #128	; 0x80
 800088e:	d1f9      	bne.n	8000884 <usart2_putch+0xc>
	*(USART_DR) = c;
 8000890:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <usart2_putch+0x30>)
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40004404 	.word	0x40004404

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008da:	f000 f817 	bl	800090c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff fe59 	bl	8000594 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008f0:	080019a4 	.word	0x080019a4
  ldr r2, =_sbss
 80008f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008f8:	200000a8 	.word	0x200000a8

080008fc <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <__errno>:
 8000900:	4b01      	ldr	r3, [pc, #4]	; (8000908 <__errno+0x8>)
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000004 	.word	0x20000004

0800090c <__libc_init_array>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4d0d      	ldr	r5, [pc, #52]	; (8000944 <__libc_init_array+0x38>)
 8000910:	4c0d      	ldr	r4, [pc, #52]	; (8000948 <__libc_init_array+0x3c>)
 8000912:	1b64      	subs	r4, r4, r5
 8000914:	10a4      	asrs	r4, r4, #2
 8000916:	2600      	movs	r6, #0
 8000918:	42a6      	cmp	r6, r4
 800091a:	d109      	bne.n	8000930 <__libc_init_array+0x24>
 800091c:	4d0b      	ldr	r5, [pc, #44]	; (800094c <__libc_init_array+0x40>)
 800091e:	4c0c      	ldr	r4, [pc, #48]	; (8000950 <__libc_init_array+0x44>)
 8000920:	f000 ff76 	bl	8001810 <_init>
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	2600      	movs	r6, #0
 800092a:	42a6      	cmp	r6, r4
 800092c:	d105      	bne.n	800093a <__libc_init_array+0x2e>
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f855 3b04 	ldr.w	r3, [r5], #4
 8000934:	4798      	blx	r3
 8000936:	3601      	adds	r6, #1
 8000938:	e7ee      	b.n	8000918 <__libc_init_array+0xc>
 800093a:	f855 3b04 	ldr.w	r3, [r5], #4
 800093e:	4798      	blx	r3
 8000940:	3601      	adds	r6, #1
 8000942:	e7f2      	b.n	800092a <__libc_init_array+0x1e>
 8000944:	0800199c 	.word	0x0800199c
 8000948:	0800199c 	.word	0x0800199c
 800094c:	0800199c 	.word	0x0800199c
 8000950:	080019a0 	.word	0x080019a0

08000954 <memset>:
 8000954:	4402      	add	r2, r0
 8000956:	4603      	mov	r3, r0
 8000958:	4293      	cmp	r3, r2
 800095a:	d100      	bne.n	800095e <memset+0xa>
 800095c:	4770      	bx	lr
 800095e:	f803 1b01 	strb.w	r1, [r3], #1
 8000962:	e7f9      	b.n	8000958 <memset+0x4>

08000964 <iprintf>:
 8000964:	b40f      	push	{r0, r1, r2, r3}
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <iprintf+0x2c>)
 8000968:	b513      	push	{r0, r1, r4, lr}
 800096a:	681c      	ldr	r4, [r3, #0]
 800096c:	b124      	cbz	r4, 8000978 <iprintf+0x14>
 800096e:	69a3      	ldr	r3, [r4, #24]
 8000970:	b913      	cbnz	r3, 8000978 <iprintf+0x14>
 8000972:	4620      	mov	r0, r4
 8000974:	f000 f9e8 	bl	8000d48 <__sinit>
 8000978:	ab05      	add	r3, sp, #20
 800097a:	9a04      	ldr	r2, [sp, #16]
 800097c:	68a1      	ldr	r1, [r4, #8]
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	4620      	mov	r0, r4
 8000982:	f000 fbb9 	bl	80010f8 <_vfiprintf_r>
 8000986:	b002      	add	sp, #8
 8000988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800098c:	b004      	add	sp, #16
 800098e:	4770      	bx	lr
 8000990:	20000004 	.word	0x20000004

08000994 <__swbuf_r>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	460e      	mov	r6, r1
 8000998:	4614      	mov	r4, r2
 800099a:	4605      	mov	r5, r0
 800099c:	b118      	cbz	r0, 80009a6 <__swbuf_r+0x12>
 800099e:	6983      	ldr	r3, [r0, #24]
 80009a0:	b90b      	cbnz	r3, 80009a6 <__swbuf_r+0x12>
 80009a2:	f000 f9d1 	bl	8000d48 <__sinit>
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <__swbuf_r+0x98>)
 80009a8:	429c      	cmp	r4, r3
 80009aa:	d12b      	bne.n	8000a04 <__swbuf_r+0x70>
 80009ac:	686c      	ldr	r4, [r5, #4]
 80009ae:	69a3      	ldr	r3, [r4, #24]
 80009b0:	60a3      	str	r3, [r4, #8]
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	071a      	lsls	r2, r3, #28
 80009b6:	d52f      	bpl.n	8000a18 <__swbuf_r+0x84>
 80009b8:	6923      	ldr	r3, [r4, #16]
 80009ba:	b36b      	cbz	r3, 8000a18 <__swbuf_r+0x84>
 80009bc:	6923      	ldr	r3, [r4, #16]
 80009be:	6820      	ldr	r0, [r4, #0]
 80009c0:	1ac0      	subs	r0, r0, r3
 80009c2:	6963      	ldr	r3, [r4, #20]
 80009c4:	b2f6      	uxtb	r6, r6
 80009c6:	4283      	cmp	r3, r0
 80009c8:	4637      	mov	r7, r6
 80009ca:	dc04      	bgt.n	80009d6 <__swbuf_r+0x42>
 80009cc:	4621      	mov	r1, r4
 80009ce:	4628      	mov	r0, r5
 80009d0:	f000 f926 	bl	8000c20 <_fflush_r>
 80009d4:	bb30      	cbnz	r0, 8000a24 <__swbuf_r+0x90>
 80009d6:	68a3      	ldr	r3, [r4, #8]
 80009d8:	3b01      	subs	r3, #1
 80009da:	60a3      	str	r3, [r4, #8]
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	6022      	str	r2, [r4, #0]
 80009e2:	701e      	strb	r6, [r3, #0]
 80009e4:	6963      	ldr	r3, [r4, #20]
 80009e6:	3001      	adds	r0, #1
 80009e8:	4283      	cmp	r3, r0
 80009ea:	d004      	beq.n	80009f6 <__swbuf_r+0x62>
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	07db      	lsls	r3, r3, #31
 80009f0:	d506      	bpl.n	8000a00 <__swbuf_r+0x6c>
 80009f2:	2e0a      	cmp	r6, #10
 80009f4:	d104      	bne.n	8000a00 <__swbuf_r+0x6c>
 80009f6:	4621      	mov	r1, r4
 80009f8:	4628      	mov	r0, r5
 80009fa:	f000 f911 	bl	8000c20 <_fflush_r>
 80009fe:	b988      	cbnz	r0, 8000a24 <__swbuf_r+0x90>
 8000a00:	4638      	mov	r0, r7
 8000a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <__swbuf_r+0x9c>)
 8000a06:	429c      	cmp	r4, r3
 8000a08:	d101      	bne.n	8000a0e <__swbuf_r+0x7a>
 8000a0a:	68ac      	ldr	r4, [r5, #8]
 8000a0c:	e7cf      	b.n	80009ae <__swbuf_r+0x1a>
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <__swbuf_r+0xa0>)
 8000a10:	429c      	cmp	r4, r3
 8000a12:	bf08      	it	eq
 8000a14:	68ec      	ldreq	r4, [r5, #12]
 8000a16:	e7ca      	b.n	80009ae <__swbuf_r+0x1a>
 8000a18:	4621      	mov	r1, r4
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 f80c 	bl	8000a38 <__swsetup_r>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d0cb      	beq.n	80009bc <__swbuf_r+0x28>
 8000a24:	f04f 37ff 	mov.w	r7, #4294967295
 8000a28:	e7ea      	b.n	8000a00 <__swbuf_r+0x6c>
 8000a2a:	bf00      	nop
 8000a2c:	08001928 	.word	0x08001928
 8000a30:	08001948 	.word	0x08001948
 8000a34:	08001908 	.word	0x08001908

08000a38 <__swsetup_r>:
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <__swsetup_r+0xcc>)
 8000a3a:	b570      	push	{r4, r5, r6, lr}
 8000a3c:	681d      	ldr	r5, [r3, #0]
 8000a3e:	4606      	mov	r6, r0
 8000a40:	460c      	mov	r4, r1
 8000a42:	b125      	cbz	r5, 8000a4e <__swsetup_r+0x16>
 8000a44:	69ab      	ldr	r3, [r5, #24]
 8000a46:	b913      	cbnz	r3, 8000a4e <__swsetup_r+0x16>
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f000 f97d 	bl	8000d48 <__sinit>
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <__swsetup_r+0xd0>)
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d10f      	bne.n	8000a74 <__swsetup_r+0x3c>
 8000a54:	686c      	ldr	r4, [r5, #4]
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a5c:	0719      	lsls	r1, r3, #28
 8000a5e:	d42c      	bmi.n	8000aba <__swsetup_r+0x82>
 8000a60:	06dd      	lsls	r5, r3, #27
 8000a62:	d411      	bmi.n	8000a88 <__swsetup_r+0x50>
 8000a64:	2309      	movs	r3, #9
 8000a66:	6033      	str	r3, [r6, #0]
 8000a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a6c:	81a3      	strh	r3, [r4, #12]
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	e03e      	b.n	8000af2 <__swsetup_r+0xba>
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <__swsetup_r+0xd4>)
 8000a76:	429c      	cmp	r4, r3
 8000a78:	d101      	bne.n	8000a7e <__swsetup_r+0x46>
 8000a7a:	68ac      	ldr	r4, [r5, #8]
 8000a7c:	e7eb      	b.n	8000a56 <__swsetup_r+0x1e>
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <__swsetup_r+0xd8>)
 8000a80:	429c      	cmp	r4, r3
 8000a82:	bf08      	it	eq
 8000a84:	68ec      	ldreq	r4, [r5, #12]
 8000a86:	e7e6      	b.n	8000a56 <__swsetup_r+0x1e>
 8000a88:	0758      	lsls	r0, r3, #29
 8000a8a:	d512      	bpl.n	8000ab2 <__swsetup_r+0x7a>
 8000a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a8e:	b141      	cbz	r1, 8000aa2 <__swsetup_r+0x6a>
 8000a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d002      	beq.n	8000a9e <__swsetup_r+0x66>
 8000a98:	4630      	mov	r0, r6
 8000a9a:	f000 fa59 	bl	8000f50 <_free_r>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8000aa2:	89a3      	ldrh	r3, [r4, #12]
 8000aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000aa8:	81a3      	strh	r3, [r4, #12]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	6063      	str	r3, [r4, #4]
 8000aae:	6923      	ldr	r3, [r4, #16]
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	89a3      	ldrh	r3, [r4, #12]
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	81a3      	strh	r3, [r4, #12]
 8000aba:	6923      	ldr	r3, [r4, #16]
 8000abc:	b94b      	cbnz	r3, 8000ad2 <__swsetup_r+0x9a>
 8000abe:	89a3      	ldrh	r3, [r4, #12]
 8000ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ac8:	d003      	beq.n	8000ad2 <__swsetup_r+0x9a>
 8000aca:	4621      	mov	r1, r4
 8000acc:	4630      	mov	r0, r6
 8000ace:	f000 f9ff 	bl	8000ed0 <__smakebuf_r>
 8000ad2:	89a0      	ldrh	r0, [r4, #12]
 8000ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ad8:	f010 0301 	ands.w	r3, r0, #1
 8000adc:	d00a      	beq.n	8000af4 <__swsetup_r+0xbc>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60a3      	str	r3, [r4, #8]
 8000ae2:	6963      	ldr	r3, [r4, #20]
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	61a3      	str	r3, [r4, #24]
 8000ae8:	6923      	ldr	r3, [r4, #16]
 8000aea:	b943      	cbnz	r3, 8000afe <__swsetup_r+0xc6>
 8000aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000af0:	d1ba      	bne.n	8000a68 <__swsetup_r+0x30>
 8000af2:	bd70      	pop	{r4, r5, r6, pc}
 8000af4:	0781      	lsls	r1, r0, #30
 8000af6:	bf58      	it	pl
 8000af8:	6963      	ldrpl	r3, [r4, #20]
 8000afa:	60a3      	str	r3, [r4, #8]
 8000afc:	e7f4      	b.n	8000ae8 <__swsetup_r+0xb0>
 8000afe:	2000      	movs	r0, #0
 8000b00:	e7f7      	b.n	8000af2 <__swsetup_r+0xba>
 8000b02:	bf00      	nop
 8000b04:	20000004 	.word	0x20000004
 8000b08:	08001928 	.word	0x08001928
 8000b0c:	08001948 	.word	0x08001948
 8000b10:	08001908 	.word	0x08001908

08000b14 <__sflush_r>:
 8000b14:	898a      	ldrh	r2, [r1, #12]
 8000b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	0710      	lsls	r0, r2, #28
 8000b1e:	460c      	mov	r4, r1
 8000b20:	d458      	bmi.n	8000bd4 <__sflush_r+0xc0>
 8000b22:	684b      	ldr	r3, [r1, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	dc05      	bgt.n	8000b34 <__sflush_r+0x20>
 8000b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dc02      	bgt.n	8000b34 <__sflush_r+0x20>
 8000b2e:	2000      	movs	r0, #0
 8000b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0f9      	beq.n	8000b2e <__sflush_r+0x1a>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b40:	682f      	ldr	r7, [r5, #0]
 8000b42:	602b      	str	r3, [r5, #0]
 8000b44:	d032      	beq.n	8000bac <__sflush_r+0x98>
 8000b46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	075a      	lsls	r2, r3, #29
 8000b4c:	d505      	bpl.n	8000b5a <__sflush_r+0x46>
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	1ac0      	subs	r0, r0, r3
 8000b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b54:	b10b      	cbz	r3, 8000b5a <__sflush_r+0x46>
 8000b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b58:	1ac0      	subs	r0, r0, r3
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b60:	6a21      	ldr	r1, [r4, #32]
 8000b62:	4628      	mov	r0, r5
 8000b64:	47b0      	blx	r6
 8000b66:	1c43      	adds	r3, r0, #1
 8000b68:	89a3      	ldrh	r3, [r4, #12]
 8000b6a:	d106      	bne.n	8000b7a <__sflush_r+0x66>
 8000b6c:	6829      	ldr	r1, [r5, #0]
 8000b6e:	291d      	cmp	r1, #29
 8000b70:	d82c      	bhi.n	8000bcc <__sflush_r+0xb8>
 8000b72:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <__sflush_r+0x108>)
 8000b74:	40ca      	lsrs	r2, r1
 8000b76:	07d6      	lsls	r6, r2, #31
 8000b78:	d528      	bpl.n	8000bcc <__sflush_r+0xb8>
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	6062      	str	r2, [r4, #4]
 8000b7e:	04d9      	lsls	r1, r3, #19
 8000b80:	6922      	ldr	r2, [r4, #16]
 8000b82:	6022      	str	r2, [r4, #0]
 8000b84:	d504      	bpl.n	8000b90 <__sflush_r+0x7c>
 8000b86:	1c42      	adds	r2, r0, #1
 8000b88:	d101      	bne.n	8000b8e <__sflush_r+0x7a>
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	b903      	cbnz	r3, 8000b90 <__sflush_r+0x7c>
 8000b8e:	6560      	str	r0, [r4, #84]	; 0x54
 8000b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b92:	602f      	str	r7, [r5, #0]
 8000b94:	2900      	cmp	r1, #0
 8000b96:	d0ca      	beq.n	8000b2e <__sflush_r+0x1a>
 8000b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d002      	beq.n	8000ba6 <__sflush_r+0x92>
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f000 f9d5 	bl	8000f50 <_free_r>
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8000baa:	e7c1      	b.n	8000b30 <__sflush_r+0x1c>
 8000bac:	6a21      	ldr	r1, [r4, #32]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	47b0      	blx	r6
 8000bb4:	1c41      	adds	r1, r0, #1
 8000bb6:	d1c7      	bne.n	8000b48 <__sflush_r+0x34>
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0c4      	beq.n	8000b48 <__sflush_r+0x34>
 8000bbe:	2b1d      	cmp	r3, #29
 8000bc0:	d001      	beq.n	8000bc6 <__sflush_r+0xb2>
 8000bc2:	2b16      	cmp	r3, #22
 8000bc4:	d101      	bne.n	8000bca <__sflush_r+0xb6>
 8000bc6:	602f      	str	r7, [r5, #0]
 8000bc8:	e7b1      	b.n	8000b2e <__sflush_r+0x1a>
 8000bca:	89a3      	ldrh	r3, [r4, #12]
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	81a3      	strh	r3, [r4, #12]
 8000bd2:	e7ad      	b.n	8000b30 <__sflush_r+0x1c>
 8000bd4:	690f      	ldr	r7, [r1, #16]
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	d0a9      	beq.n	8000b2e <__sflush_r+0x1a>
 8000bda:	0793      	lsls	r3, r2, #30
 8000bdc:	680e      	ldr	r6, [r1, #0]
 8000bde:	bf08      	it	eq
 8000be0:	694b      	ldreq	r3, [r1, #20]
 8000be2:	600f      	str	r7, [r1, #0]
 8000be4:	bf18      	it	ne
 8000be6:	2300      	movne	r3, #0
 8000be8:	eba6 0807 	sub.w	r8, r6, r7
 8000bec:	608b      	str	r3, [r1, #8]
 8000bee:	f1b8 0f00 	cmp.w	r8, #0
 8000bf2:	dd9c      	ble.n	8000b2e <__sflush_r+0x1a>
 8000bf4:	6a21      	ldr	r1, [r4, #32]
 8000bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	463a      	mov	r2, r7
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	47b0      	blx	r6
 8000c00:	2800      	cmp	r0, #0
 8000c02:	dc06      	bgt.n	8000c12 <__sflush_r+0xfe>
 8000c04:	89a3      	ldrh	r3, [r4, #12]
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	81a3      	strh	r3, [r4, #12]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	e78e      	b.n	8000b30 <__sflush_r+0x1c>
 8000c12:	4407      	add	r7, r0
 8000c14:	eba8 0800 	sub.w	r8, r8, r0
 8000c18:	e7e9      	b.n	8000bee <__sflush_r+0xda>
 8000c1a:	bf00      	nop
 8000c1c:	20400001 	.word	0x20400001

08000c20 <_fflush_r>:
 8000c20:	b538      	push	{r3, r4, r5, lr}
 8000c22:	690b      	ldr	r3, [r1, #16]
 8000c24:	4605      	mov	r5, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	b913      	cbnz	r3, 8000c30 <_fflush_r+0x10>
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	4628      	mov	r0, r5
 8000c2e:	bd38      	pop	{r3, r4, r5, pc}
 8000c30:	b118      	cbz	r0, 8000c3a <_fflush_r+0x1a>
 8000c32:	6983      	ldr	r3, [r0, #24]
 8000c34:	b90b      	cbnz	r3, 8000c3a <_fflush_r+0x1a>
 8000c36:	f000 f887 	bl	8000d48 <__sinit>
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <_fflush_r+0x6c>)
 8000c3c:	429c      	cmp	r4, r3
 8000c3e:	d11b      	bne.n	8000c78 <_fflush_r+0x58>
 8000c40:	686c      	ldr	r4, [r5, #4]
 8000c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0ef      	beq.n	8000c2a <_fflush_r+0xa>
 8000c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c4c:	07d0      	lsls	r0, r2, #31
 8000c4e:	d404      	bmi.n	8000c5a <_fflush_r+0x3a>
 8000c50:	0599      	lsls	r1, r3, #22
 8000c52:	d402      	bmi.n	8000c5a <_fflush_r+0x3a>
 8000c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c56:	f000 f915 	bl	8000e84 <__retarget_lock_acquire_recursive>
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	f7ff ff59 	bl	8000b14 <__sflush_r>
 8000c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c64:	07da      	lsls	r2, r3, #31
 8000c66:	4605      	mov	r5, r0
 8000c68:	d4e0      	bmi.n	8000c2c <_fflush_r+0xc>
 8000c6a:	89a3      	ldrh	r3, [r4, #12]
 8000c6c:	059b      	lsls	r3, r3, #22
 8000c6e:	d4dd      	bmi.n	8000c2c <_fflush_r+0xc>
 8000c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c72:	f000 f908 	bl	8000e86 <__retarget_lock_release_recursive>
 8000c76:	e7d9      	b.n	8000c2c <_fflush_r+0xc>
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <_fflush_r+0x70>)
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	d101      	bne.n	8000c82 <_fflush_r+0x62>
 8000c7e:	68ac      	ldr	r4, [r5, #8]
 8000c80:	e7df      	b.n	8000c42 <_fflush_r+0x22>
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <_fflush_r+0x74>)
 8000c84:	429c      	cmp	r4, r3
 8000c86:	bf08      	it	eq
 8000c88:	68ec      	ldreq	r4, [r5, #12]
 8000c8a:	e7da      	b.n	8000c42 <_fflush_r+0x22>
 8000c8c:	08001928 	.word	0x08001928
 8000c90:	08001948 	.word	0x08001948
 8000c94:	08001908 	.word	0x08001908

08000c98 <std>:
 8000c98:	2300      	movs	r3, #0
 8000c9a:	b510      	push	{r4, lr}
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8000ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ca6:	6083      	str	r3, [r0, #8]
 8000ca8:	8181      	strh	r1, [r0, #12]
 8000caa:	6643      	str	r3, [r0, #100]	; 0x64
 8000cac:	81c2      	strh	r2, [r0, #14]
 8000cae:	6183      	str	r3, [r0, #24]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	305c      	adds	r0, #92	; 0x5c
 8000cb6:	f7ff fe4d 	bl	8000954 <memset>
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <std+0x38>)
 8000cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <std+0x3c>)
 8000cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <std+0x40>)
 8000cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <std+0x44>)
 8000cc8:	6224      	str	r4, [r4, #32]
 8000cca:	6323      	str	r3, [r4, #48]	; 0x30
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	bf00      	nop
 8000cd0:	080016a1 	.word	0x080016a1
 8000cd4:	080016c3 	.word	0x080016c3
 8000cd8:	080016fb 	.word	0x080016fb
 8000cdc:	0800171f 	.word	0x0800171f

08000ce0 <_cleanup_r>:
 8000ce0:	4901      	ldr	r1, [pc, #4]	; (8000ce8 <_cleanup_r+0x8>)
 8000ce2:	f000 b8af 	b.w	8000e44 <_fwalk_reent>
 8000ce6:	bf00      	nop
 8000ce8:	08000c21 	.word	0x08000c21

08000cec <__sfmoreglue>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	1e4a      	subs	r2, r1, #1
 8000cf0:	2568      	movs	r5, #104	; 0x68
 8000cf2:	4355      	muls	r5, r2
 8000cf4:	460e      	mov	r6, r1
 8000cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cfa:	f000 f979 	bl	8000ff0 <_malloc_r>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	b140      	cbz	r0, 8000d14 <__sfmoreglue+0x28>
 8000d02:	2100      	movs	r1, #0
 8000d04:	e9c0 1600 	strd	r1, r6, [r0]
 8000d08:	300c      	adds	r0, #12
 8000d0a:	60a0      	str	r0, [r4, #8]
 8000d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d10:	f7ff fe20 	bl	8000954 <memset>
 8000d14:	4620      	mov	r0, r4
 8000d16:	bd70      	pop	{r4, r5, r6, pc}

08000d18 <__sfp_lock_acquire>:
 8000d18:	4801      	ldr	r0, [pc, #4]	; (8000d20 <__sfp_lock_acquire+0x8>)
 8000d1a:	f000 b8b3 	b.w	8000e84 <__retarget_lock_acquire_recursive>
 8000d1e:	bf00      	nop
 8000d20:	200000a0 	.word	0x200000a0

08000d24 <__sfp_lock_release>:
 8000d24:	4801      	ldr	r0, [pc, #4]	; (8000d2c <__sfp_lock_release+0x8>)
 8000d26:	f000 b8ae 	b.w	8000e86 <__retarget_lock_release_recursive>
 8000d2a:	bf00      	nop
 8000d2c:	200000a0 	.word	0x200000a0

08000d30 <__sinit_lock_acquire>:
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <__sinit_lock_acquire+0x8>)
 8000d32:	f000 b8a7 	b.w	8000e84 <__retarget_lock_acquire_recursive>
 8000d36:	bf00      	nop
 8000d38:	2000009b 	.word	0x2000009b

08000d3c <__sinit_lock_release>:
 8000d3c:	4801      	ldr	r0, [pc, #4]	; (8000d44 <__sinit_lock_release+0x8>)
 8000d3e:	f000 b8a2 	b.w	8000e86 <__retarget_lock_release_recursive>
 8000d42:	bf00      	nop
 8000d44:	2000009b 	.word	0x2000009b

08000d48 <__sinit>:
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fff0 	bl	8000d30 <__sinit_lock_acquire>
 8000d50:	69a3      	ldr	r3, [r4, #24]
 8000d52:	b11b      	cbz	r3, 8000d5c <__sinit+0x14>
 8000d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d58:	f7ff bff0 	b.w	8000d3c <__sinit_lock_release>
 8000d5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d60:	6523      	str	r3, [r4, #80]	; 0x50
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <__sinit+0x68>)
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <__sinit+0x6c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	bf04      	itt	eq
 8000d6e:	2301      	moveq	r3, #1
 8000d70:	61a3      	streq	r3, [r4, #24]
 8000d72:	4620      	mov	r0, r4
 8000d74:	f000 f820 	bl	8000db8 <__sfp>
 8000d78:	6060      	str	r0, [r4, #4]
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f000 f81c 	bl	8000db8 <__sfp>
 8000d80:	60a0      	str	r0, [r4, #8]
 8000d82:	4620      	mov	r0, r4
 8000d84:	f000 f818 	bl	8000db8 <__sfp>
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60e0      	str	r0, [r4, #12]
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	6860      	ldr	r0, [r4, #4]
 8000d90:	f7ff ff82 	bl	8000c98 <std>
 8000d94:	68a0      	ldr	r0, [r4, #8]
 8000d96:	2201      	movs	r2, #1
 8000d98:	2109      	movs	r1, #9
 8000d9a:	f7ff ff7d 	bl	8000c98 <std>
 8000d9e:	68e0      	ldr	r0, [r4, #12]
 8000da0:	2202      	movs	r2, #2
 8000da2:	2112      	movs	r1, #18
 8000da4:	f7ff ff78 	bl	8000c98 <std>
 8000da8:	2301      	movs	r3, #1
 8000daa:	61a3      	str	r3, [r4, #24]
 8000dac:	e7d2      	b.n	8000d54 <__sinit+0xc>
 8000dae:	bf00      	nop
 8000db0:	08001904 	.word	0x08001904
 8000db4:	08000ce1 	.word	0x08000ce1

08000db8 <__sfp>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	4607      	mov	r7, r0
 8000dbc:	f7ff ffac 	bl	8000d18 <__sfp_lock_acquire>
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <__sfp+0x84>)
 8000dc2:	681e      	ldr	r6, [r3, #0]
 8000dc4:	69b3      	ldr	r3, [r6, #24]
 8000dc6:	b913      	cbnz	r3, 8000dce <__sfp+0x16>
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff ffbd 	bl	8000d48 <__sinit>
 8000dce:	3648      	adds	r6, #72	; 0x48
 8000dd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	d503      	bpl.n	8000de0 <__sfp+0x28>
 8000dd8:	6833      	ldr	r3, [r6, #0]
 8000dda:	b30b      	cbz	r3, 8000e20 <__sfp+0x68>
 8000ddc:	6836      	ldr	r6, [r6, #0]
 8000dde:	e7f7      	b.n	8000dd0 <__sfp+0x18>
 8000de0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000de4:	b9d5      	cbnz	r5, 8000e1c <__sfp+0x64>
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <__sfp+0x88>)
 8000de8:	60e3      	str	r3, [r4, #12]
 8000dea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000dee:	6665      	str	r5, [r4, #100]	; 0x64
 8000df0:	f000 f847 	bl	8000e82 <__retarget_lock_init_recursive>
 8000df4:	f7ff ff96 	bl	8000d24 <__sfp_lock_release>
 8000df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e00:	6025      	str	r5, [r4, #0]
 8000e02:	61a5      	str	r5, [r4, #24]
 8000e04:	2208      	movs	r2, #8
 8000e06:	4629      	mov	r1, r5
 8000e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e0c:	f7ff fda2 	bl	8000954 <memset>
 8000e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e18:	4620      	mov	r0, r4
 8000e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1c:	3468      	adds	r4, #104	; 0x68
 8000e1e:	e7d9      	b.n	8000dd4 <__sfp+0x1c>
 8000e20:	2104      	movs	r1, #4
 8000e22:	4638      	mov	r0, r7
 8000e24:	f7ff ff62 	bl	8000cec <__sfmoreglue>
 8000e28:	4604      	mov	r4, r0
 8000e2a:	6030      	str	r0, [r6, #0]
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	d1d5      	bne.n	8000ddc <__sfp+0x24>
 8000e30:	f7ff ff78 	bl	8000d24 <__sfp_lock_release>
 8000e34:	230c      	movs	r3, #12
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	e7ee      	b.n	8000e18 <__sfp+0x60>
 8000e3a:	bf00      	nop
 8000e3c:	08001904 	.word	0x08001904
 8000e40:	ffff0001 	.word	0xffff0001

08000e44 <_fwalk_reent>:
 8000e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4688      	mov	r8, r1
 8000e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e50:	2700      	movs	r7, #0
 8000e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e56:	f1b9 0901 	subs.w	r9, r9, #1
 8000e5a:	d505      	bpl.n	8000e68 <_fwalk_reent+0x24>
 8000e5c:	6824      	ldr	r4, [r4, #0]
 8000e5e:	2c00      	cmp	r4, #0
 8000e60:	d1f7      	bne.n	8000e52 <_fwalk_reent+0xe>
 8000e62:	4638      	mov	r0, r7
 8000e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e68:	89ab      	ldrh	r3, [r5, #12]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d907      	bls.n	8000e7e <_fwalk_reent+0x3a>
 8000e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e72:	3301      	adds	r3, #1
 8000e74:	d003      	beq.n	8000e7e <_fwalk_reent+0x3a>
 8000e76:	4629      	mov	r1, r5
 8000e78:	4630      	mov	r0, r6
 8000e7a:	47c0      	blx	r8
 8000e7c:	4307      	orrs	r7, r0
 8000e7e:	3568      	adds	r5, #104	; 0x68
 8000e80:	e7e9      	b.n	8000e56 <_fwalk_reent+0x12>

08000e82 <__retarget_lock_init_recursive>:
 8000e82:	4770      	bx	lr

08000e84 <__retarget_lock_acquire_recursive>:
 8000e84:	4770      	bx	lr

08000e86 <__retarget_lock_release_recursive>:
 8000e86:	4770      	bx	lr

08000e88 <__swhatbuf_r>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	460e      	mov	r6, r1
 8000e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e90:	2900      	cmp	r1, #0
 8000e92:	b096      	sub	sp, #88	; 0x58
 8000e94:	4614      	mov	r4, r2
 8000e96:	461d      	mov	r5, r3
 8000e98:	da07      	bge.n	8000eaa <__swhatbuf_r+0x22>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	602b      	str	r3, [r5, #0]
 8000e9e:	89b3      	ldrh	r3, [r6, #12]
 8000ea0:	061a      	lsls	r2, r3, #24
 8000ea2:	d410      	bmi.n	8000ec6 <__swhatbuf_r+0x3e>
 8000ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea8:	e00e      	b.n	8000ec8 <__swhatbuf_r+0x40>
 8000eaa:	466a      	mov	r2, sp
 8000eac:	f000 fc5e 	bl	800176c <_fstat_r>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	dbf2      	blt.n	8000e9a <__swhatbuf_r+0x12>
 8000eb4:	9a01      	ldr	r2, [sp, #4]
 8000eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000eba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ebe:	425a      	negs	r2, r3
 8000ec0:	415a      	adcs	r2, r3
 8000ec2:	602a      	str	r2, [r5, #0]
 8000ec4:	e7ee      	b.n	8000ea4 <__swhatbuf_r+0x1c>
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	2000      	movs	r0, #0
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	b016      	add	sp, #88	; 0x58
 8000ece:	bd70      	pop	{r4, r5, r6, pc}

08000ed0 <__smakebuf_r>:
 8000ed0:	898b      	ldrh	r3, [r1, #12]
 8000ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ed4:	079d      	lsls	r5, r3, #30
 8000ed6:	4606      	mov	r6, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	d507      	bpl.n	8000eec <__smakebuf_r+0x1c>
 8000edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	6123      	str	r3, [r4, #16]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	6163      	str	r3, [r4, #20]
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	ab01      	add	r3, sp, #4
 8000eee:	466a      	mov	r2, sp
 8000ef0:	f7ff ffca 	bl	8000e88 <__swhatbuf_r>
 8000ef4:	9900      	ldr	r1, [sp, #0]
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f000 f879 	bl	8000ff0 <_malloc_r>
 8000efe:	b948      	cbnz	r0, 8000f14 <__smakebuf_r+0x44>
 8000f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f04:	059a      	lsls	r2, r3, #22
 8000f06:	d4ef      	bmi.n	8000ee8 <__smakebuf_r+0x18>
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	81a3      	strh	r3, [r4, #12]
 8000f12:	e7e3      	b.n	8000edc <__smakebuf_r+0xc>
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <__smakebuf_r+0x7c>)
 8000f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f18:	89a3      	ldrh	r3, [r4, #12]
 8000f1a:	6020      	str	r0, [r4, #0]
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	81a3      	strh	r3, [r4, #12]
 8000f22:	9b00      	ldr	r3, [sp, #0]
 8000f24:	6163      	str	r3, [r4, #20]
 8000f26:	9b01      	ldr	r3, [sp, #4]
 8000f28:	6120      	str	r0, [r4, #16]
 8000f2a:	b15b      	cbz	r3, 8000f44 <__smakebuf_r+0x74>
 8000f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f30:	4630      	mov	r0, r6
 8000f32:	f000 fc2d 	bl	8001790 <_isatty_r>
 8000f36:	b128      	cbz	r0, 8000f44 <__smakebuf_r+0x74>
 8000f38:	89a3      	ldrh	r3, [r4, #12]
 8000f3a:	f023 0303 	bic.w	r3, r3, #3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	81a3      	strh	r3, [r4, #12]
 8000f44:	89a0      	ldrh	r0, [r4, #12]
 8000f46:	4305      	orrs	r5, r0
 8000f48:	81a5      	strh	r5, [r4, #12]
 8000f4a:	e7cd      	b.n	8000ee8 <__smakebuf_r+0x18>
 8000f4c:	08000ce1 	.word	0x08000ce1

08000f50 <_free_r>:
 8000f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d048      	beq.n	8000fe8 <_free_r+0x98>
 8000f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f5a:	9001      	str	r0, [sp, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8000f62:	bfb8      	it	lt
 8000f64:	18e4      	addlt	r4, r4, r3
 8000f66:	f000 fc35 	bl	80017d4 <__malloc_lock>
 8000f6a:	4a20      	ldr	r2, [pc, #128]	; (8000fec <_free_r+0x9c>)
 8000f6c:	9801      	ldr	r0, [sp, #4]
 8000f6e:	6813      	ldr	r3, [r2, #0]
 8000f70:	4615      	mov	r5, r2
 8000f72:	b933      	cbnz	r3, 8000f82 <_free_r+0x32>
 8000f74:	6063      	str	r3, [r4, #4]
 8000f76:	6014      	str	r4, [r2, #0]
 8000f78:	b003      	add	sp, #12
 8000f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f7e:	f000 bc2f 	b.w	80017e0 <__malloc_unlock>
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	d90b      	bls.n	8000f9e <_free_r+0x4e>
 8000f86:	6821      	ldr	r1, [r4, #0]
 8000f88:	1862      	adds	r2, r4, r1
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	bf04      	itt	eq
 8000f8e:	681a      	ldreq	r2, [r3, #0]
 8000f90:	685b      	ldreq	r3, [r3, #4]
 8000f92:	6063      	str	r3, [r4, #4]
 8000f94:	bf04      	itt	eq
 8000f96:	1852      	addeq	r2, r2, r1
 8000f98:	6022      	streq	r2, [r4, #0]
 8000f9a:	602c      	str	r4, [r5, #0]
 8000f9c:	e7ec      	b.n	8000f78 <_free_r+0x28>
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	b10b      	cbz	r3, 8000fa8 <_free_r+0x58>
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d9fa      	bls.n	8000f9e <_free_r+0x4e>
 8000fa8:	6811      	ldr	r1, [r2, #0]
 8000faa:	1855      	adds	r5, r2, r1
 8000fac:	42a5      	cmp	r5, r4
 8000fae:	d10b      	bne.n	8000fc8 <_free_r+0x78>
 8000fb0:	6824      	ldr	r4, [r4, #0]
 8000fb2:	4421      	add	r1, r4
 8000fb4:	1854      	adds	r4, r2, r1
 8000fb6:	42a3      	cmp	r3, r4
 8000fb8:	6011      	str	r1, [r2, #0]
 8000fba:	d1dd      	bne.n	8000f78 <_free_r+0x28>
 8000fbc:	681c      	ldr	r4, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	6053      	str	r3, [r2, #4]
 8000fc2:	4421      	add	r1, r4
 8000fc4:	6011      	str	r1, [r2, #0]
 8000fc6:	e7d7      	b.n	8000f78 <_free_r+0x28>
 8000fc8:	d902      	bls.n	8000fd0 <_free_r+0x80>
 8000fca:	230c      	movs	r3, #12
 8000fcc:	6003      	str	r3, [r0, #0]
 8000fce:	e7d3      	b.n	8000f78 <_free_r+0x28>
 8000fd0:	6825      	ldr	r5, [r4, #0]
 8000fd2:	1961      	adds	r1, r4, r5
 8000fd4:	428b      	cmp	r3, r1
 8000fd6:	bf04      	itt	eq
 8000fd8:	6819      	ldreq	r1, [r3, #0]
 8000fda:	685b      	ldreq	r3, [r3, #4]
 8000fdc:	6063      	str	r3, [r4, #4]
 8000fde:	bf04      	itt	eq
 8000fe0:	1949      	addeq	r1, r1, r5
 8000fe2:	6021      	streq	r1, [r4, #0]
 8000fe4:	6054      	str	r4, [r2, #4]
 8000fe6:	e7c7      	b.n	8000f78 <_free_r+0x28>
 8000fe8:	b003      	add	sp, #12
 8000fea:	bd30      	pop	{r4, r5, pc}
 8000fec:	20000090 	.word	0x20000090

08000ff0 <_malloc_r>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	1ccd      	adds	r5, r1, #3
 8000ff4:	f025 0503 	bic.w	r5, r5, #3
 8000ff8:	3508      	adds	r5, #8
 8000ffa:	2d0c      	cmp	r5, #12
 8000ffc:	bf38      	it	cc
 8000ffe:	250c      	movcc	r5, #12
 8001000:	2d00      	cmp	r5, #0
 8001002:	4606      	mov	r6, r0
 8001004:	db01      	blt.n	800100a <_malloc_r+0x1a>
 8001006:	42a9      	cmp	r1, r5
 8001008:	d903      	bls.n	8001012 <_malloc_r+0x22>
 800100a:	230c      	movs	r3, #12
 800100c:	6033      	str	r3, [r6, #0]
 800100e:	2000      	movs	r0, #0
 8001010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001012:	f000 fbdf 	bl	80017d4 <__malloc_lock>
 8001016:	4921      	ldr	r1, [pc, #132]	; (800109c <_malloc_r+0xac>)
 8001018:	680a      	ldr	r2, [r1, #0]
 800101a:	4614      	mov	r4, r2
 800101c:	b99c      	cbnz	r4, 8001046 <_malloc_r+0x56>
 800101e:	4f20      	ldr	r7, [pc, #128]	; (80010a0 <_malloc_r+0xb0>)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b923      	cbnz	r3, 800102e <_malloc_r+0x3e>
 8001024:	4621      	mov	r1, r4
 8001026:	4630      	mov	r0, r6
 8001028:	f000 fb2a 	bl	8001680 <_sbrk_r>
 800102c:	6038      	str	r0, [r7, #0]
 800102e:	4629      	mov	r1, r5
 8001030:	4630      	mov	r0, r6
 8001032:	f000 fb25 	bl	8001680 <_sbrk_r>
 8001036:	1c43      	adds	r3, r0, #1
 8001038:	d123      	bne.n	8001082 <_malloc_r+0x92>
 800103a:	230c      	movs	r3, #12
 800103c:	6033      	str	r3, [r6, #0]
 800103e:	4630      	mov	r0, r6
 8001040:	f000 fbce 	bl	80017e0 <__malloc_unlock>
 8001044:	e7e3      	b.n	800100e <_malloc_r+0x1e>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	1b5b      	subs	r3, r3, r5
 800104a:	d417      	bmi.n	800107c <_malloc_r+0x8c>
 800104c:	2b0b      	cmp	r3, #11
 800104e:	d903      	bls.n	8001058 <_malloc_r+0x68>
 8001050:	6023      	str	r3, [r4, #0]
 8001052:	441c      	add	r4, r3
 8001054:	6025      	str	r5, [r4, #0]
 8001056:	e004      	b.n	8001062 <_malloc_r+0x72>
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	42a2      	cmp	r2, r4
 800105c:	bf0c      	ite	eq
 800105e:	600b      	streq	r3, [r1, #0]
 8001060:	6053      	strne	r3, [r2, #4]
 8001062:	4630      	mov	r0, r6
 8001064:	f000 fbbc 	bl	80017e0 <__malloc_unlock>
 8001068:	f104 000b 	add.w	r0, r4, #11
 800106c:	1d23      	adds	r3, r4, #4
 800106e:	f020 0007 	bic.w	r0, r0, #7
 8001072:	1ac2      	subs	r2, r0, r3
 8001074:	d0cc      	beq.n	8001010 <_malloc_r+0x20>
 8001076:	1a1b      	subs	r3, r3, r0
 8001078:	50a3      	str	r3, [r4, r2]
 800107a:	e7c9      	b.n	8001010 <_malloc_r+0x20>
 800107c:	4622      	mov	r2, r4
 800107e:	6864      	ldr	r4, [r4, #4]
 8001080:	e7cc      	b.n	800101c <_malloc_r+0x2c>
 8001082:	1cc4      	adds	r4, r0, #3
 8001084:	f024 0403 	bic.w	r4, r4, #3
 8001088:	42a0      	cmp	r0, r4
 800108a:	d0e3      	beq.n	8001054 <_malloc_r+0x64>
 800108c:	1a21      	subs	r1, r4, r0
 800108e:	4630      	mov	r0, r6
 8001090:	f000 faf6 	bl	8001680 <_sbrk_r>
 8001094:	3001      	adds	r0, #1
 8001096:	d1dd      	bne.n	8001054 <_malloc_r+0x64>
 8001098:	e7cf      	b.n	800103a <_malloc_r+0x4a>
 800109a:	bf00      	nop
 800109c:	20000090 	.word	0x20000090
 80010a0:	20000094 	.word	0x20000094

080010a4 <__sfputc_r>:
 80010a4:	6893      	ldr	r3, [r2, #8]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	b410      	push	{r4}
 80010ac:	6093      	str	r3, [r2, #8]
 80010ae:	da08      	bge.n	80010c2 <__sfputc_r+0x1e>
 80010b0:	6994      	ldr	r4, [r2, #24]
 80010b2:	42a3      	cmp	r3, r4
 80010b4:	db01      	blt.n	80010ba <__sfputc_r+0x16>
 80010b6:	290a      	cmp	r1, #10
 80010b8:	d103      	bne.n	80010c2 <__sfputc_r+0x1e>
 80010ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010be:	f7ff bc69 	b.w	8000994 <__swbuf_r>
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	1c58      	adds	r0, r3, #1
 80010c6:	6010      	str	r0, [r2, #0]
 80010c8:	7019      	strb	r1, [r3, #0]
 80010ca:	4608      	mov	r0, r1
 80010cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <__sfputs_r>:
 80010d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d4:	4606      	mov	r6, r0
 80010d6:	460f      	mov	r7, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	18d5      	adds	r5, r2, r3
 80010dc:	42ac      	cmp	r4, r5
 80010de:	d101      	bne.n	80010e4 <__sfputs_r+0x12>
 80010e0:	2000      	movs	r0, #0
 80010e2:	e007      	b.n	80010f4 <__sfputs_r+0x22>
 80010e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010e8:	463a      	mov	r2, r7
 80010ea:	4630      	mov	r0, r6
 80010ec:	f7ff ffda 	bl	80010a4 <__sfputc_r>
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	d1f3      	bne.n	80010dc <__sfputs_r+0xa>
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010f8 <_vfiprintf_r>:
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010fc:	460d      	mov	r5, r1
 80010fe:	b09d      	sub	sp, #116	; 0x74
 8001100:	4614      	mov	r4, r2
 8001102:	4698      	mov	r8, r3
 8001104:	4606      	mov	r6, r0
 8001106:	b118      	cbz	r0, 8001110 <_vfiprintf_r+0x18>
 8001108:	6983      	ldr	r3, [r0, #24]
 800110a:	b90b      	cbnz	r3, 8001110 <_vfiprintf_r+0x18>
 800110c:	f7ff fe1c 	bl	8000d48 <__sinit>
 8001110:	4b89      	ldr	r3, [pc, #548]	; (8001338 <_vfiprintf_r+0x240>)
 8001112:	429d      	cmp	r5, r3
 8001114:	d11b      	bne.n	800114e <_vfiprintf_r+0x56>
 8001116:	6875      	ldr	r5, [r6, #4]
 8001118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800111a:	07d9      	lsls	r1, r3, #31
 800111c:	d405      	bmi.n	800112a <_vfiprintf_r+0x32>
 800111e:	89ab      	ldrh	r3, [r5, #12]
 8001120:	059a      	lsls	r2, r3, #22
 8001122:	d402      	bmi.n	800112a <_vfiprintf_r+0x32>
 8001124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001126:	f7ff fead 	bl	8000e84 <__retarget_lock_acquire_recursive>
 800112a:	89ab      	ldrh	r3, [r5, #12]
 800112c:	071b      	lsls	r3, r3, #28
 800112e:	d501      	bpl.n	8001134 <_vfiprintf_r+0x3c>
 8001130:	692b      	ldr	r3, [r5, #16]
 8001132:	b9eb      	cbnz	r3, 8001170 <_vfiprintf_r+0x78>
 8001134:	4629      	mov	r1, r5
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff fc7e 	bl	8000a38 <__swsetup_r>
 800113c:	b1c0      	cbz	r0, 8001170 <_vfiprintf_r+0x78>
 800113e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001140:	07dc      	lsls	r4, r3, #31
 8001142:	d50e      	bpl.n	8001162 <_vfiprintf_r+0x6a>
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	b01d      	add	sp, #116	; 0x74
 800114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114e:	4b7b      	ldr	r3, [pc, #492]	; (800133c <_vfiprintf_r+0x244>)
 8001150:	429d      	cmp	r5, r3
 8001152:	d101      	bne.n	8001158 <_vfiprintf_r+0x60>
 8001154:	68b5      	ldr	r5, [r6, #8]
 8001156:	e7df      	b.n	8001118 <_vfiprintf_r+0x20>
 8001158:	4b79      	ldr	r3, [pc, #484]	; (8001340 <_vfiprintf_r+0x248>)
 800115a:	429d      	cmp	r5, r3
 800115c:	bf08      	it	eq
 800115e:	68f5      	ldreq	r5, [r6, #12]
 8001160:	e7da      	b.n	8001118 <_vfiprintf_r+0x20>
 8001162:	89ab      	ldrh	r3, [r5, #12]
 8001164:	0598      	lsls	r0, r3, #22
 8001166:	d4ed      	bmi.n	8001144 <_vfiprintf_r+0x4c>
 8001168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800116a:	f7ff fe8c 	bl	8000e86 <__retarget_lock_release_recursive>
 800116e:	e7e9      	b.n	8001144 <_vfiprintf_r+0x4c>
 8001170:	2300      	movs	r3, #0
 8001172:	9309      	str	r3, [sp, #36]	; 0x24
 8001174:	2320      	movs	r3, #32
 8001176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800117a:	f8cd 800c 	str.w	r8, [sp, #12]
 800117e:	2330      	movs	r3, #48	; 0x30
 8001180:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001344 <_vfiprintf_r+0x24c>
 8001184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001188:	f04f 0901 	mov.w	r9, #1
 800118c:	4623      	mov	r3, r4
 800118e:	469a      	mov	sl, r3
 8001190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001194:	b10a      	cbz	r2, 800119a <_vfiprintf_r+0xa2>
 8001196:	2a25      	cmp	r2, #37	; 0x25
 8001198:	d1f9      	bne.n	800118e <_vfiprintf_r+0x96>
 800119a:	ebba 0b04 	subs.w	fp, sl, r4
 800119e:	d00b      	beq.n	80011b8 <_vfiprintf_r+0xc0>
 80011a0:	465b      	mov	r3, fp
 80011a2:	4622      	mov	r2, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	4630      	mov	r0, r6
 80011a8:	f7ff ff93 	bl	80010d2 <__sfputs_r>
 80011ac:	3001      	adds	r0, #1
 80011ae:	f000 80aa 	beq.w	8001306 <_vfiprintf_r+0x20e>
 80011b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011b4:	445a      	add	r2, fp
 80011b6:	9209      	str	r2, [sp, #36]	; 0x24
 80011b8:	f89a 3000 	ldrb.w	r3, [sl]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a2 	beq.w	8001306 <_vfiprintf_r+0x20e>
 80011c2:	2300      	movs	r3, #0
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011cc:	f10a 0a01 	add.w	sl, sl, #1
 80011d0:	9304      	str	r3, [sp, #16]
 80011d2:	9307      	str	r3, [sp, #28]
 80011d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011d8:	931a      	str	r3, [sp, #104]	; 0x68
 80011da:	4654      	mov	r4, sl
 80011dc:	2205      	movs	r2, #5
 80011de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011e2:	4858      	ldr	r0, [pc, #352]	; (8001344 <_vfiprintf_r+0x24c>)
 80011e4:	f7ff f814 	bl	8000210 <memchr>
 80011e8:	9a04      	ldr	r2, [sp, #16]
 80011ea:	b9d8      	cbnz	r0, 8001224 <_vfiprintf_r+0x12c>
 80011ec:	06d1      	lsls	r1, r2, #27
 80011ee:	bf44      	itt	mi
 80011f0:	2320      	movmi	r3, #32
 80011f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011f6:	0713      	lsls	r3, r2, #28
 80011f8:	bf44      	itt	mi
 80011fa:	232b      	movmi	r3, #43	; 0x2b
 80011fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001200:	f89a 3000 	ldrb.w	r3, [sl]
 8001204:	2b2a      	cmp	r3, #42	; 0x2a
 8001206:	d015      	beq.n	8001234 <_vfiprintf_r+0x13c>
 8001208:	9a07      	ldr	r2, [sp, #28]
 800120a:	4654      	mov	r4, sl
 800120c:	2000      	movs	r0, #0
 800120e:	f04f 0c0a 	mov.w	ip, #10
 8001212:	4621      	mov	r1, r4
 8001214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001218:	3b30      	subs	r3, #48	; 0x30
 800121a:	2b09      	cmp	r3, #9
 800121c:	d94e      	bls.n	80012bc <_vfiprintf_r+0x1c4>
 800121e:	b1b0      	cbz	r0, 800124e <_vfiprintf_r+0x156>
 8001220:	9207      	str	r2, [sp, #28]
 8001222:	e014      	b.n	800124e <_vfiprintf_r+0x156>
 8001224:	eba0 0308 	sub.w	r3, r0, r8
 8001228:	fa09 f303 	lsl.w	r3, r9, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	9304      	str	r3, [sp, #16]
 8001230:	46a2      	mov	sl, r4
 8001232:	e7d2      	b.n	80011da <_vfiprintf_r+0xe2>
 8001234:	9b03      	ldr	r3, [sp, #12]
 8001236:	1d19      	adds	r1, r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	9103      	str	r1, [sp, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	bfbb      	ittet	lt
 8001240:	425b      	neglt	r3, r3
 8001242:	f042 0202 	orrlt.w	r2, r2, #2
 8001246:	9307      	strge	r3, [sp, #28]
 8001248:	9307      	strlt	r3, [sp, #28]
 800124a:	bfb8      	it	lt
 800124c:	9204      	strlt	r2, [sp, #16]
 800124e:	7823      	ldrb	r3, [r4, #0]
 8001250:	2b2e      	cmp	r3, #46	; 0x2e
 8001252:	d10c      	bne.n	800126e <_vfiprintf_r+0x176>
 8001254:	7863      	ldrb	r3, [r4, #1]
 8001256:	2b2a      	cmp	r3, #42	; 0x2a
 8001258:	d135      	bne.n	80012c6 <_vfiprintf_r+0x1ce>
 800125a:	9b03      	ldr	r3, [sp, #12]
 800125c:	1d1a      	adds	r2, r3, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	9203      	str	r2, [sp, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bfb8      	it	lt
 8001266:	f04f 33ff 	movlt.w	r3, #4294967295
 800126a:	3402      	adds	r4, #2
 800126c:	9305      	str	r3, [sp, #20]
 800126e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001354 <_vfiprintf_r+0x25c>
 8001272:	7821      	ldrb	r1, [r4, #0]
 8001274:	2203      	movs	r2, #3
 8001276:	4650      	mov	r0, sl
 8001278:	f7fe ffca 	bl	8000210 <memchr>
 800127c:	b140      	cbz	r0, 8001290 <_vfiprintf_r+0x198>
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	eba0 000a 	sub.w	r0, r0, sl
 8001284:	fa03 f000 	lsl.w	r0, r3, r0
 8001288:	9b04      	ldr	r3, [sp, #16]
 800128a:	4303      	orrs	r3, r0
 800128c:	3401      	adds	r4, #1
 800128e:	9304      	str	r3, [sp, #16]
 8001290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001294:	482c      	ldr	r0, [pc, #176]	; (8001348 <_vfiprintf_r+0x250>)
 8001296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800129a:	2206      	movs	r2, #6
 800129c:	f7fe ffb8 	bl	8000210 <memchr>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d03f      	beq.n	8001324 <_vfiprintf_r+0x22c>
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <_vfiprintf_r+0x254>)
 80012a6:	bb1b      	cbnz	r3, 80012f0 <_vfiprintf_r+0x1f8>
 80012a8:	9b03      	ldr	r3, [sp, #12]
 80012aa:	3307      	adds	r3, #7
 80012ac:	f023 0307 	bic.w	r3, r3, #7
 80012b0:	3308      	adds	r3, #8
 80012b2:	9303      	str	r3, [sp, #12]
 80012b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012b6:	443b      	add	r3, r7
 80012b8:	9309      	str	r3, [sp, #36]	; 0x24
 80012ba:	e767      	b.n	800118c <_vfiprintf_r+0x94>
 80012bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80012c0:	460c      	mov	r4, r1
 80012c2:	2001      	movs	r0, #1
 80012c4:	e7a5      	b.n	8001212 <_vfiprintf_r+0x11a>
 80012c6:	2300      	movs	r3, #0
 80012c8:	3401      	adds	r4, #1
 80012ca:	9305      	str	r3, [sp, #20]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 0c0a 	mov.w	ip, #10
 80012d2:	4620      	mov	r0, r4
 80012d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012d8:	3a30      	subs	r2, #48	; 0x30
 80012da:	2a09      	cmp	r2, #9
 80012dc:	d903      	bls.n	80012e6 <_vfiprintf_r+0x1ee>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0c5      	beq.n	800126e <_vfiprintf_r+0x176>
 80012e2:	9105      	str	r1, [sp, #20]
 80012e4:	e7c3      	b.n	800126e <_vfiprintf_r+0x176>
 80012e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80012ea:	4604      	mov	r4, r0
 80012ec:	2301      	movs	r3, #1
 80012ee:	e7f0      	b.n	80012d2 <_vfiprintf_r+0x1da>
 80012f0:	ab03      	add	r3, sp, #12
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	462a      	mov	r2, r5
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <_vfiprintf_r+0x258>)
 80012f8:	a904      	add	r1, sp, #16
 80012fa:	4630      	mov	r0, r6
 80012fc:	f3af 8000 	nop.w
 8001300:	4607      	mov	r7, r0
 8001302:	1c78      	adds	r0, r7, #1
 8001304:	d1d6      	bne.n	80012b4 <_vfiprintf_r+0x1bc>
 8001306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001308:	07d9      	lsls	r1, r3, #31
 800130a:	d405      	bmi.n	8001318 <_vfiprintf_r+0x220>
 800130c:	89ab      	ldrh	r3, [r5, #12]
 800130e:	059a      	lsls	r2, r3, #22
 8001310:	d402      	bmi.n	8001318 <_vfiprintf_r+0x220>
 8001312:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001314:	f7ff fdb7 	bl	8000e86 <__retarget_lock_release_recursive>
 8001318:	89ab      	ldrh	r3, [r5, #12]
 800131a:	065b      	lsls	r3, r3, #25
 800131c:	f53f af12 	bmi.w	8001144 <_vfiprintf_r+0x4c>
 8001320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001322:	e711      	b.n	8001148 <_vfiprintf_r+0x50>
 8001324:	ab03      	add	r3, sp, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	462a      	mov	r2, r5
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <_vfiprintf_r+0x258>)
 800132c:	a904      	add	r1, sp, #16
 800132e:	4630      	mov	r0, r6
 8001330:	f000 f880 	bl	8001434 <_printf_i>
 8001334:	e7e4      	b.n	8001300 <_vfiprintf_r+0x208>
 8001336:	bf00      	nop
 8001338:	08001928 	.word	0x08001928
 800133c:	08001948 	.word	0x08001948
 8001340:	08001908 	.word	0x08001908
 8001344:	08001968 	.word	0x08001968
 8001348:	08001972 	.word	0x08001972
 800134c:	00000000 	.word	0x00000000
 8001350:	080010d3 	.word	0x080010d3
 8001354:	0800196e 	.word	0x0800196e

08001358 <_printf_common>:
 8001358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800135c:	4616      	mov	r6, r2
 800135e:	4699      	mov	r9, r3
 8001360:	688a      	ldr	r2, [r1, #8]
 8001362:	690b      	ldr	r3, [r1, #16]
 8001364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001368:	4293      	cmp	r3, r2
 800136a:	bfb8      	it	lt
 800136c:	4613      	movlt	r3, r2
 800136e:	6033      	str	r3, [r6, #0]
 8001370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001374:	4607      	mov	r7, r0
 8001376:	460c      	mov	r4, r1
 8001378:	b10a      	cbz	r2, 800137e <_printf_common+0x26>
 800137a:	3301      	adds	r3, #1
 800137c:	6033      	str	r3, [r6, #0]
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	0699      	lsls	r1, r3, #26
 8001382:	bf42      	ittt	mi
 8001384:	6833      	ldrmi	r3, [r6, #0]
 8001386:	3302      	addmi	r3, #2
 8001388:	6033      	strmi	r3, [r6, #0]
 800138a:	6825      	ldr	r5, [r4, #0]
 800138c:	f015 0506 	ands.w	r5, r5, #6
 8001390:	d106      	bne.n	80013a0 <_printf_common+0x48>
 8001392:	f104 0a19 	add.w	sl, r4, #25
 8001396:	68e3      	ldr	r3, [r4, #12]
 8001398:	6832      	ldr	r2, [r6, #0]
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	42ab      	cmp	r3, r5
 800139e:	dc26      	bgt.n	80013ee <_printf_common+0x96>
 80013a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013a4:	1e13      	subs	r3, r2, #0
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	bf18      	it	ne
 80013aa:	2301      	movne	r3, #1
 80013ac:	0692      	lsls	r2, r2, #26
 80013ae:	d42b      	bmi.n	8001408 <_printf_common+0xb0>
 80013b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013b4:	4649      	mov	r1, r9
 80013b6:	4638      	mov	r0, r7
 80013b8:	47c0      	blx	r8
 80013ba:	3001      	adds	r0, #1
 80013bc:	d01e      	beq.n	80013fc <_printf_common+0xa4>
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	68e5      	ldr	r5, [r4, #12]
 80013c2:	6832      	ldr	r2, [r6, #0]
 80013c4:	f003 0306 	and.w	r3, r3, #6
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	bf08      	it	eq
 80013cc:	1aad      	subeq	r5, r5, r2
 80013ce:	68a3      	ldr	r3, [r4, #8]
 80013d0:	6922      	ldr	r2, [r4, #16]
 80013d2:	bf0c      	ite	eq
 80013d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013d8:	2500      	movne	r5, #0
 80013da:	4293      	cmp	r3, r2
 80013dc:	bfc4      	itt	gt
 80013de:	1a9b      	subgt	r3, r3, r2
 80013e0:	18ed      	addgt	r5, r5, r3
 80013e2:	2600      	movs	r6, #0
 80013e4:	341a      	adds	r4, #26
 80013e6:	42b5      	cmp	r5, r6
 80013e8:	d11a      	bne.n	8001420 <_printf_common+0xc8>
 80013ea:	2000      	movs	r0, #0
 80013ec:	e008      	b.n	8001400 <_printf_common+0xa8>
 80013ee:	2301      	movs	r3, #1
 80013f0:	4652      	mov	r2, sl
 80013f2:	4649      	mov	r1, r9
 80013f4:	4638      	mov	r0, r7
 80013f6:	47c0      	blx	r8
 80013f8:	3001      	adds	r0, #1
 80013fa:	d103      	bne.n	8001404 <_printf_common+0xac>
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001404:	3501      	adds	r5, #1
 8001406:	e7c6      	b.n	8001396 <_printf_common+0x3e>
 8001408:	18e1      	adds	r1, r4, r3
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	2030      	movs	r0, #48	; 0x30
 800140e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001412:	4422      	add	r2, r4
 8001414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800141c:	3302      	adds	r3, #2
 800141e:	e7c7      	b.n	80013b0 <_printf_common+0x58>
 8001420:	2301      	movs	r3, #1
 8001422:	4622      	mov	r2, r4
 8001424:	4649      	mov	r1, r9
 8001426:	4638      	mov	r0, r7
 8001428:	47c0      	blx	r8
 800142a:	3001      	adds	r0, #1
 800142c:	d0e6      	beq.n	80013fc <_printf_common+0xa4>
 800142e:	3601      	adds	r6, #1
 8001430:	e7d9      	b.n	80013e6 <_printf_common+0x8e>
	...

08001434 <_printf_i>:
 8001434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001438:	460c      	mov	r4, r1
 800143a:	4691      	mov	r9, r2
 800143c:	7e27      	ldrb	r7, [r4, #24]
 800143e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001440:	2f78      	cmp	r7, #120	; 0x78
 8001442:	4680      	mov	r8, r0
 8001444:	469a      	mov	sl, r3
 8001446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800144a:	d807      	bhi.n	800145c <_printf_i+0x28>
 800144c:	2f62      	cmp	r7, #98	; 0x62
 800144e:	d80a      	bhi.n	8001466 <_printf_i+0x32>
 8001450:	2f00      	cmp	r7, #0
 8001452:	f000 80d8 	beq.w	8001606 <_printf_i+0x1d2>
 8001456:	2f58      	cmp	r7, #88	; 0x58
 8001458:	f000 80a3 	beq.w	80015a2 <_printf_i+0x16e>
 800145c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001464:	e03a      	b.n	80014dc <_printf_i+0xa8>
 8001466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800146a:	2b15      	cmp	r3, #21
 800146c:	d8f6      	bhi.n	800145c <_printf_i+0x28>
 800146e:	a001      	add	r0, pc, #4	; (adr r0, 8001474 <_printf_i+0x40>)
 8001470:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001474:	080014cd 	.word	0x080014cd
 8001478:	080014e1 	.word	0x080014e1
 800147c:	0800145d 	.word	0x0800145d
 8001480:	0800145d 	.word	0x0800145d
 8001484:	0800145d 	.word	0x0800145d
 8001488:	0800145d 	.word	0x0800145d
 800148c:	080014e1 	.word	0x080014e1
 8001490:	0800145d 	.word	0x0800145d
 8001494:	0800145d 	.word	0x0800145d
 8001498:	0800145d 	.word	0x0800145d
 800149c:	0800145d 	.word	0x0800145d
 80014a0:	080015ed 	.word	0x080015ed
 80014a4:	08001511 	.word	0x08001511
 80014a8:	080015cf 	.word	0x080015cf
 80014ac:	0800145d 	.word	0x0800145d
 80014b0:	0800145d 	.word	0x0800145d
 80014b4:	0800160f 	.word	0x0800160f
 80014b8:	0800145d 	.word	0x0800145d
 80014bc:	08001511 	.word	0x08001511
 80014c0:	0800145d 	.word	0x0800145d
 80014c4:	0800145d 	.word	0x0800145d
 80014c8:	080015d7 	.word	0x080015d7
 80014cc:	680b      	ldr	r3, [r1, #0]
 80014ce:	1d1a      	adds	r2, r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	600a      	str	r2, [r1, #0]
 80014d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014dc:	2301      	movs	r3, #1
 80014de:	e0a3      	b.n	8001628 <_printf_i+0x1f4>
 80014e0:	6825      	ldr	r5, [r4, #0]
 80014e2:	6808      	ldr	r0, [r1, #0]
 80014e4:	062e      	lsls	r6, r5, #24
 80014e6:	f100 0304 	add.w	r3, r0, #4
 80014ea:	d50a      	bpl.n	8001502 <_printf_i+0xce>
 80014ec:	6805      	ldr	r5, [r0, #0]
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	da03      	bge.n	80014fc <_printf_i+0xc8>
 80014f4:	232d      	movs	r3, #45	; 0x2d
 80014f6:	426d      	negs	r5, r5
 80014f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014fc:	485e      	ldr	r0, [pc, #376]	; (8001678 <_printf_i+0x244>)
 80014fe:	230a      	movs	r3, #10
 8001500:	e019      	b.n	8001536 <_printf_i+0x102>
 8001502:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001506:	6805      	ldr	r5, [r0, #0]
 8001508:	600b      	str	r3, [r1, #0]
 800150a:	bf18      	it	ne
 800150c:	b22d      	sxthne	r5, r5
 800150e:	e7ef      	b.n	80014f0 <_printf_i+0xbc>
 8001510:	680b      	ldr	r3, [r1, #0]
 8001512:	6825      	ldr	r5, [r4, #0]
 8001514:	1d18      	adds	r0, r3, #4
 8001516:	6008      	str	r0, [r1, #0]
 8001518:	0628      	lsls	r0, r5, #24
 800151a:	d501      	bpl.n	8001520 <_printf_i+0xec>
 800151c:	681d      	ldr	r5, [r3, #0]
 800151e:	e002      	b.n	8001526 <_printf_i+0xf2>
 8001520:	0669      	lsls	r1, r5, #25
 8001522:	d5fb      	bpl.n	800151c <_printf_i+0xe8>
 8001524:	881d      	ldrh	r5, [r3, #0]
 8001526:	4854      	ldr	r0, [pc, #336]	; (8001678 <_printf_i+0x244>)
 8001528:	2f6f      	cmp	r7, #111	; 0x6f
 800152a:	bf0c      	ite	eq
 800152c:	2308      	moveq	r3, #8
 800152e:	230a      	movne	r3, #10
 8001530:	2100      	movs	r1, #0
 8001532:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001536:	6866      	ldr	r6, [r4, #4]
 8001538:	60a6      	str	r6, [r4, #8]
 800153a:	2e00      	cmp	r6, #0
 800153c:	bfa2      	ittt	ge
 800153e:	6821      	ldrge	r1, [r4, #0]
 8001540:	f021 0104 	bicge.w	r1, r1, #4
 8001544:	6021      	strge	r1, [r4, #0]
 8001546:	b90d      	cbnz	r5, 800154c <_printf_i+0x118>
 8001548:	2e00      	cmp	r6, #0
 800154a:	d04d      	beq.n	80015e8 <_printf_i+0x1b4>
 800154c:	4616      	mov	r6, r2
 800154e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001552:	fb03 5711 	mls	r7, r3, r1, r5
 8001556:	5dc7      	ldrb	r7, [r0, r7]
 8001558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800155c:	462f      	mov	r7, r5
 800155e:	42bb      	cmp	r3, r7
 8001560:	460d      	mov	r5, r1
 8001562:	d9f4      	bls.n	800154e <_printf_i+0x11a>
 8001564:	2b08      	cmp	r3, #8
 8001566:	d10b      	bne.n	8001580 <_printf_i+0x14c>
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	07df      	lsls	r7, r3, #31
 800156c:	d508      	bpl.n	8001580 <_printf_i+0x14c>
 800156e:	6923      	ldr	r3, [r4, #16]
 8001570:	6861      	ldr	r1, [r4, #4]
 8001572:	4299      	cmp	r1, r3
 8001574:	bfde      	ittt	le
 8001576:	2330      	movle	r3, #48	; 0x30
 8001578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800157c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001580:	1b92      	subs	r2, r2, r6
 8001582:	6122      	str	r2, [r4, #16]
 8001584:	f8cd a000 	str.w	sl, [sp]
 8001588:	464b      	mov	r3, r9
 800158a:	aa03      	add	r2, sp, #12
 800158c:	4621      	mov	r1, r4
 800158e:	4640      	mov	r0, r8
 8001590:	f7ff fee2 	bl	8001358 <_printf_common>
 8001594:	3001      	adds	r0, #1
 8001596:	d14c      	bne.n	8001632 <_printf_i+0x1fe>
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	b004      	add	sp, #16
 800159e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a2:	4835      	ldr	r0, [pc, #212]	; (8001678 <_printf_i+0x244>)
 80015a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	680e      	ldr	r6, [r1, #0]
 80015ac:	061f      	lsls	r7, r3, #24
 80015ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80015b2:	600e      	str	r6, [r1, #0]
 80015b4:	d514      	bpl.n	80015e0 <_printf_i+0x1ac>
 80015b6:	07d9      	lsls	r1, r3, #31
 80015b8:	bf44      	itt	mi
 80015ba:	f043 0320 	orrmi.w	r3, r3, #32
 80015be:	6023      	strmi	r3, [r4, #0]
 80015c0:	b91d      	cbnz	r5, 80015ca <_printf_i+0x196>
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	f023 0320 	bic.w	r3, r3, #32
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	2310      	movs	r3, #16
 80015cc:	e7b0      	b.n	8001530 <_printf_i+0xfc>
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	f043 0320 	orr.w	r3, r3, #32
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	2378      	movs	r3, #120	; 0x78
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <_printf_i+0x248>)
 80015da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80015de:	e7e3      	b.n	80015a8 <_printf_i+0x174>
 80015e0:	065e      	lsls	r6, r3, #25
 80015e2:	bf48      	it	mi
 80015e4:	b2ad      	uxthmi	r5, r5
 80015e6:	e7e6      	b.n	80015b6 <_printf_i+0x182>
 80015e8:	4616      	mov	r6, r2
 80015ea:	e7bb      	b.n	8001564 <_printf_i+0x130>
 80015ec:	680b      	ldr	r3, [r1, #0]
 80015ee:	6826      	ldr	r6, [r4, #0]
 80015f0:	6960      	ldr	r0, [r4, #20]
 80015f2:	1d1d      	adds	r5, r3, #4
 80015f4:	600d      	str	r5, [r1, #0]
 80015f6:	0635      	lsls	r5, r6, #24
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	d501      	bpl.n	8001600 <_printf_i+0x1cc>
 80015fc:	6018      	str	r0, [r3, #0]
 80015fe:	e002      	b.n	8001606 <_printf_i+0x1d2>
 8001600:	0671      	lsls	r1, r6, #25
 8001602:	d5fb      	bpl.n	80015fc <_printf_i+0x1c8>
 8001604:	8018      	strh	r0, [r3, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	6123      	str	r3, [r4, #16]
 800160a:	4616      	mov	r6, r2
 800160c:	e7ba      	b.n	8001584 <_printf_i+0x150>
 800160e:	680b      	ldr	r3, [r1, #0]
 8001610:	1d1a      	adds	r2, r3, #4
 8001612:	600a      	str	r2, [r1, #0]
 8001614:	681e      	ldr	r6, [r3, #0]
 8001616:	6862      	ldr	r2, [r4, #4]
 8001618:	2100      	movs	r1, #0
 800161a:	4630      	mov	r0, r6
 800161c:	f7fe fdf8 	bl	8000210 <memchr>
 8001620:	b108      	cbz	r0, 8001626 <_printf_i+0x1f2>
 8001622:	1b80      	subs	r0, r0, r6
 8001624:	6060      	str	r0, [r4, #4]
 8001626:	6863      	ldr	r3, [r4, #4]
 8001628:	6123      	str	r3, [r4, #16]
 800162a:	2300      	movs	r3, #0
 800162c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001630:	e7a8      	b.n	8001584 <_printf_i+0x150>
 8001632:	6923      	ldr	r3, [r4, #16]
 8001634:	4632      	mov	r2, r6
 8001636:	4649      	mov	r1, r9
 8001638:	4640      	mov	r0, r8
 800163a:	47d0      	blx	sl
 800163c:	3001      	adds	r0, #1
 800163e:	d0ab      	beq.n	8001598 <_printf_i+0x164>
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	079b      	lsls	r3, r3, #30
 8001644:	d413      	bmi.n	800166e <_printf_i+0x23a>
 8001646:	68e0      	ldr	r0, [r4, #12]
 8001648:	9b03      	ldr	r3, [sp, #12]
 800164a:	4298      	cmp	r0, r3
 800164c:	bfb8      	it	lt
 800164e:	4618      	movlt	r0, r3
 8001650:	e7a4      	b.n	800159c <_printf_i+0x168>
 8001652:	2301      	movs	r3, #1
 8001654:	4632      	mov	r2, r6
 8001656:	4649      	mov	r1, r9
 8001658:	4640      	mov	r0, r8
 800165a:	47d0      	blx	sl
 800165c:	3001      	adds	r0, #1
 800165e:	d09b      	beq.n	8001598 <_printf_i+0x164>
 8001660:	3501      	adds	r5, #1
 8001662:	68e3      	ldr	r3, [r4, #12]
 8001664:	9903      	ldr	r1, [sp, #12]
 8001666:	1a5b      	subs	r3, r3, r1
 8001668:	42ab      	cmp	r3, r5
 800166a:	dcf2      	bgt.n	8001652 <_printf_i+0x21e>
 800166c:	e7eb      	b.n	8001646 <_printf_i+0x212>
 800166e:	2500      	movs	r5, #0
 8001670:	f104 0619 	add.w	r6, r4, #25
 8001674:	e7f5      	b.n	8001662 <_printf_i+0x22e>
 8001676:	bf00      	nop
 8001678:	08001979 	.word	0x08001979
 800167c:	0800198a 	.word	0x0800198a

08001680 <_sbrk_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4d06      	ldr	r5, [pc, #24]	; (800169c <_sbrk_r+0x1c>)
 8001684:	2300      	movs	r3, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	602b      	str	r3, [r5, #0]
 800168c:	f7ff f860 	bl	8000750 <_sbrk>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_sbrk_r+0x1a>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b103      	cbz	r3, 800169a <_sbrk_r+0x1a>
 8001698:	6023      	str	r3, [r4, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	200000a4 	.word	0x200000a4

080016a0 <__sread>:
 80016a0:	b510      	push	{r4, lr}
 80016a2:	460c      	mov	r4, r1
 80016a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a8:	f000 f8a0 	bl	80017ec <_read_r>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	bfab      	itete	ge
 80016b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016b2:	89a3      	ldrhlt	r3, [r4, #12]
 80016b4:	181b      	addge	r3, r3, r0
 80016b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016ba:	bfac      	ite	ge
 80016bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80016be:	81a3      	strhlt	r3, [r4, #12]
 80016c0:	bd10      	pop	{r4, pc}

080016c2 <__swrite>:
 80016c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c6:	461f      	mov	r7, r3
 80016c8:	898b      	ldrh	r3, [r1, #12]
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	4605      	mov	r5, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	4616      	mov	r6, r2
 80016d2:	d505      	bpl.n	80016e0 <__swrite+0x1e>
 80016d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016d8:	2302      	movs	r3, #2
 80016da:	2200      	movs	r2, #0
 80016dc:	f000 f868 	bl	80017b0 <_lseek_r>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	4632      	mov	r2, r6
 80016ee:	463b      	mov	r3, r7
 80016f0:	4628      	mov	r0, r5
 80016f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016f6:	f000 b817 	b.w	8001728 <_write_r>

080016fa <__sseek>:
 80016fa:	b510      	push	{r4, lr}
 80016fc:	460c      	mov	r4, r1
 80016fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001702:	f000 f855 	bl	80017b0 <_lseek_r>
 8001706:	1c43      	adds	r3, r0, #1
 8001708:	89a3      	ldrh	r3, [r4, #12]
 800170a:	bf15      	itete	ne
 800170c:	6560      	strne	r0, [r4, #84]	; 0x54
 800170e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001716:	81a3      	strheq	r3, [r4, #12]
 8001718:	bf18      	it	ne
 800171a:	81a3      	strhne	r3, [r4, #12]
 800171c:	bd10      	pop	{r4, pc}

0800171e <__sclose>:
 800171e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001722:	f000 b813 	b.w	800174c <_close_r>
	...

08001728 <_write_r>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4d07      	ldr	r5, [pc, #28]	; (8001748 <_write_r+0x20>)
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	2200      	movs	r2, #0
 8001734:	602a      	str	r2, [r5, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	f7ff f85f 	bl	80007fa <_write>
 800173c:	1c43      	adds	r3, r0, #1
 800173e:	d102      	bne.n	8001746 <_write_r+0x1e>
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	b103      	cbz	r3, 8001746 <_write_r+0x1e>
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	bd38      	pop	{r3, r4, r5, pc}
 8001748:	200000a4 	.word	0x200000a4

0800174c <_close_r>:
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	4d06      	ldr	r5, [pc, #24]	; (8001768 <_close_r+0x1c>)
 8001750:	2300      	movs	r3, #0
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	602b      	str	r3, [r5, #0]
 8001758:	f7fe ffc6 	bl	80006e8 <_close>
 800175c:	1c43      	adds	r3, r0, #1
 800175e:	d102      	bne.n	8001766 <_close_r+0x1a>
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	b103      	cbz	r3, 8001766 <_close_r+0x1a>
 8001764:	6023      	str	r3, [r4, #0]
 8001766:	bd38      	pop	{r3, r4, r5, pc}
 8001768:	200000a4 	.word	0x200000a4

0800176c <_fstat_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4d07      	ldr	r5, [pc, #28]	; (800178c <_fstat_r+0x20>)
 8001770:	2300      	movs	r3, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	602b      	str	r3, [r5, #0]
 800177a:	f7fe ffc1 	bl	8000700 <_fstat>
 800177e:	1c43      	adds	r3, r0, #1
 8001780:	d102      	bne.n	8001788 <_fstat_r+0x1c>
 8001782:	682b      	ldr	r3, [r5, #0]
 8001784:	b103      	cbz	r3, 8001788 <_fstat_r+0x1c>
 8001786:	6023      	str	r3, [r4, #0]
 8001788:	bd38      	pop	{r3, r4, r5, pc}
 800178a:	bf00      	nop
 800178c:	200000a4 	.word	0x200000a4

08001790 <_isatty_r>:
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4d06      	ldr	r5, [pc, #24]	; (80017ac <_isatty_r+0x1c>)
 8001794:	2300      	movs	r3, #0
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	602b      	str	r3, [r5, #0]
 800179c:	f7fe ffc0 	bl	8000720 <_isatty>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d102      	bne.n	80017aa <_isatty_r+0x1a>
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	b103      	cbz	r3, 80017aa <_isatty_r+0x1a>
 80017a8:	6023      	str	r3, [r4, #0]
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	200000a4 	.word	0x200000a4

080017b0 <_lseek_r>:
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4d07      	ldr	r5, [pc, #28]	; (80017d0 <_lseek_r+0x20>)
 80017b4:	4604      	mov	r4, r0
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	2200      	movs	r2, #0
 80017bc:	602a      	str	r2, [r5, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	f7fe ffb9 	bl	8000736 <_lseek>
 80017c4:	1c43      	adds	r3, r0, #1
 80017c6:	d102      	bne.n	80017ce <_lseek_r+0x1e>
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	b103      	cbz	r3, 80017ce <_lseek_r+0x1e>
 80017cc:	6023      	str	r3, [r4, #0]
 80017ce:	bd38      	pop	{r3, r4, r5, pc}
 80017d0:	200000a4 	.word	0x200000a4

080017d4 <__malloc_lock>:
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <__malloc_lock+0x8>)
 80017d6:	f7ff bb55 	b.w	8000e84 <__retarget_lock_acquire_recursive>
 80017da:	bf00      	nop
 80017dc:	2000009c 	.word	0x2000009c

080017e0 <__malloc_unlock>:
 80017e0:	4801      	ldr	r0, [pc, #4]	; (80017e8 <__malloc_unlock+0x8>)
 80017e2:	f7ff bb50 	b.w	8000e86 <__retarget_lock_release_recursive>
 80017e6:	bf00      	nop
 80017e8:	2000009c 	.word	0x2000009c

080017ec <_read_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4d07      	ldr	r5, [pc, #28]	; (800180c <_read_r+0x20>)
 80017f0:	4604      	mov	r4, r0
 80017f2:	4608      	mov	r0, r1
 80017f4:	4611      	mov	r1, r2
 80017f6:	2200      	movs	r2, #0
 80017f8:	602a      	str	r2, [r5, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	f7fe ffd4 	bl	80007a8 <_read>
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	d102      	bne.n	800180a <_read_r+0x1e>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	b103      	cbz	r3, 800180a <_read_r+0x1e>
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	200000a4 	.word	0x200000a4

08001810 <_init>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr

0800181c <_fini>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr
