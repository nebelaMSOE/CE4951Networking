
FinalProjectNavin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800286c  0800286c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800286c  0800286c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800286c  0800286c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000006c  080028e0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080028e0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000269c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000092c  00000000  00000000  00022738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000218  00000000  00000000  00023068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00023280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cf9  00000000  00000000  00023410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002cbe  00000000  00000000  00026109  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009bc4  00000000  00000000  00028dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003298b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000908  00000000  00000000  00032a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800256c 	.word	0x0800256c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800256c 	.word	0x0800256c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <delay_1ms>:

/*
 * Delays for input number of milliseconds
 * n: input number of milliseconds to delay
 */
void delay_1ms(uint32_t n){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 16000;
 80002b8:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80002bc:	60bb      	str	r3, [r7, #8]
	uint32_t count = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]

	*STK_LOAD = ticks;
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <delay_1ms+0x54>)
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	6013      	str	r3, [r2, #0]

	*STK_VAL = 0;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <delay_1ms+0x58>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]

	*STK_CTRL |= ((1<<EN)|(1<<CLKSOURCE));
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <delay_1ms+0x5c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0e      	ldr	r2, [pc, #56]	; (800030c <delay_1ms+0x5c>)
 80002d4:	f043 0305 	orr.w	r3, r3, #5
 80002d8:	6013      	str	r3, [r2, #0]

	while (count < n){
 80002da:	e009      	b.n	80002f0 <delay_1ms+0x40>
		//Check count flag and if set, increment count by one
		if ((*STK_CTRL & (1<<COUNTFLAG)) == (1<<16)){
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <delay_1ms+0x5c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002e8:	d102      	bne.n	80002f0 <delay_1ms+0x40>
			count++;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
	while (count < n){
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d3f1      	bcc.n	80002dc <delay_1ms+0x2c>
		}
	}
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000e014 	.word	0xe000e014
 8000308:	e000e018 	.word	0xe000e018
 800030c:	e000e010 	.word	0xe000e010

08000310 <delay_1us>:

/*
 * Delays for input number of microseconds
 * n: input number of microseconds to delay
 */
void delay_1us(uint32_t n){
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 16;
 8000318:	2310      	movs	r3, #16
 800031a:	60bb      	str	r3, [r7, #8]
	uint32_t count = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]

	*STK_LOAD = ticks;
 8000320:	4a10      	ldr	r2, [pc, #64]	; (8000364 <delay_1us+0x54>)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	6013      	str	r3, [r2, #0]

	*STK_VAL = 0;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <delay_1us+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]

	*STK_CTRL |= ((1<<EN)|(1<<CLKSOURCE));
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <delay_1us+0x5c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <delay_1us+0x5c>)
 8000332:	f043 0305 	orr.w	r3, r3, #5
 8000336:	6013      	str	r3, [r2, #0]

	while (count < n){
 8000338:	e009      	b.n	800034e <delay_1us+0x3e>
		//Check count flag and if set, increment count by one
		if ((*STK_CTRL & (1<<COUNTFLAG)) == (1<<16)){
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <delay_1us+0x5c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000346:	d102      	bne.n	800034e <delay_1us+0x3e>
			count++;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3301      	adds	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
	while (count < n){
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	429a      	cmp	r2, r3
 8000354:	d3f1      	bcc.n	800033a <delay_1us+0x2a>
		}
	}
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e000e014 	.word	0xe000e014
 8000368:	e000e018 	.word	0xe000e018
 800036c:	e000e010 	.word	0xe000e010

08000370 <delay_1s>:

/*
 * Delays for input number of seconds
 * n: input number of seconds to delay
 */
void delay_1s(uint32_t n){
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 16000000;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <delay_1s+0x54>)
 800037a:	60bb      	str	r3, [r7, #8]
	uint32_t count = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]

	*STK_LOAD = ticks;
 8000380:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <delay_1s+0x58>)
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	6013      	str	r3, [r2, #0]

	*STK_VAL = 0;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <delay_1s+0x5c>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]

	*STK_CTRL |= ((1<<EN)|(1<<CLKSOURCE));
 800038c:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <delay_1s+0x60>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <delay_1s+0x60>)
 8000392:	f043 0305 	orr.w	r3, r3, #5
 8000396:	6013      	str	r3, [r2, #0]

	while (count < n){
 8000398:	e009      	b.n	80003ae <delay_1s+0x3e>
		//Check count flag and if set, increment count by one
		if ((*STK_CTRL & (1<<COUNTFLAG)) == (1<<16)){
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <delay_1s+0x60>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003a6:	d102      	bne.n	80003ae <delay_1s+0x3e>
			count++;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
	while (count < n){
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d3f1      	bcc.n	800039a <delay_1s+0x2a>
		}
	}
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	00f42400 	.word	0x00f42400
 80003c8:	e000e014 	.word	0xe000e014
 80003cc:	e000e018 	.word	0xe000e018
 80003d0:	e000e010 	.word	0xe000e010

080003d4 <keypad_init>:

#include "keypad.h"
#include "delay.h"


void keypad_init(){
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	//Enables the port
	*RCC_AHB1ENR |= (1<<GPIOCEN);
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <keypad_init+0x38>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0b      	ldr	r2, [pc, #44]	; (800040c <keypad_init+0x38>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6013      	str	r3, [r2, #0]

	//Sets KEY0 - KEY7 as Pull-Ups
	*GPIOC_PUPDR &= ~(0xFFFF);
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <keypad_init+0x3c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a09      	ldr	r2, [pc, #36]	; (8000410 <keypad_init+0x3c>)
 80003ea:	0c1b      	lsrs	r3, r3, #16
 80003ec:	041b      	lsls	r3, r3, #16
 80003ee:	6013      	str	r3, [r2, #0]
	*GPIOC_PUPDR |= 0x5555;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <keypad_init+0x3c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <keypad_init+0x3c>)
 80003f6:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80003fa:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40023830 	.word	0x40023830
 8000410:	4002080c 	.word	0x4002080c

08000414 <keypad_getKeyNoBlock>:

uint8_t keypad_getKeyNoBlock(){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

	uint8_t value = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	71bb      	strb	r3, [r7, #6]
	uint8_t keycode = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	71fb      	strb	r3, [r7, #7]

	//COLS to Inputs and ROWS to Outputs
	*GPIOC_MODER &= ~(0xFFFF);
 8000422:	4bba      	ldr	r3, [pc, #744]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4ab9      	ldr	r2, [pc, #740]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 8000428:	0c1b      	lsrs	r3, r3, #16
 800042a:	041b      	lsls	r3, r3, #16
 800042c:	6013      	str	r3, [r2, #0]
	*GPIOC_MODER |= 0x5500;
 800042e:	4bb7      	ldr	r3, [pc, #732]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4ab6      	ldr	r2, [pc, #728]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 8000434:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000438:	6013      	str	r3, [r2, #0]

	//Clears Rows in ODR
	*GPIOC_ODR &= ~0xFF;
 800043a:	4bb5      	ldr	r3, [pc, #724]	; (8000710 <keypad_getKeyNoBlock+0x2fc>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4ab4      	ldr	r2, [pc, #720]	; (8000710 <keypad_getKeyNoBlock+0x2fc>)
 8000440:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000444:	6013      	str	r3, [r2, #0]
	//Reads COLS in IDR
	value = (*GPIOC_IDR & 0xF);
 8000446:	4bb3      	ldr	r3, [pc, #716]	; (8000714 <keypad_getKeyNoBlock+0x300>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	f003 030f 	and.w	r3, r3, #15
 8000450:	71bb      	strb	r3, [r7, #6]

	//if a button is pressed decode the key
	if (value != 0xF){
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2b0f      	cmp	r3, #15
 8000456:	f000 8152 	beq.w	80006fe <keypad_getKeyNoBlock+0x2ea>
		//Copy COLS pattern from IDR to ODR
		*GPIOC_ODR &= ~0xFF;
 800045a:	4bad      	ldr	r3, [pc, #692]	; (8000710 <keypad_getKeyNoBlock+0x2fc>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4aac      	ldr	r2, [pc, #688]	; (8000710 <keypad_getKeyNoBlock+0x2fc>)
 8000460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000464:	6013      	str	r3, [r2, #0]
		*GPIOC_ODR |= (*GPIOC_IDR & 0xF);
 8000466:	4bab      	ldr	r3, [pc, #684]	; (8000714 <keypad_getKeyNoBlock+0x300>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 020f 	and.w	r2, r3, #15
 800046e:	4ba8      	ldr	r3, [pc, #672]	; (8000710 <keypad_getKeyNoBlock+0x2fc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	49a7      	ldr	r1, [pc, #668]	; (8000710 <keypad_getKeyNoBlock+0x2fc>)
 8000474:	4313      	orrs	r3, r2
 8000476:	600b      	str	r3, [r1, #0]

		//COLS to Output and ROWS to Inputs
		*GPIOC_MODER &= ~(0xFFFF);
 8000478:	4ba4      	ldr	r3, [pc, #656]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4aa3      	ldr	r2, [pc, #652]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	6013      	str	r3, [r2, #0]
		*GPIOC_MODER |= 0x0055;
 8000484:	4ba1      	ldr	r3, [pc, #644]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4aa0      	ldr	r2, [pc, #640]	; (800070c <keypad_getKeyNoBlock+0x2f8>)
 800048a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800048e:	6013      	str	r3, [r2, #0]

		//Small delay (ensure you have this function)
		delay_1us(5);
 8000490:	2005      	movs	r0, #5
 8000492:	f7ff ff3d 	bl	8000310 <delay_1us>

		//Read ROWS from IDR
		value |= *GPIOC_IDR & 0xF0;
 8000496:	4b9f      	ldr	r3, [pc, #636]	; (8000714 <keypad_getKeyNoBlock+0x300>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	71bb      	strb	r3, [r7, #6]

		//Decode Key
		switch (value){
 80004a6:	79bb      	ldrb	r3, [r7, #6]
 80004a8:	3b77      	subs	r3, #119	; 0x77
 80004aa:	2b77      	cmp	r3, #119	; 0x77
 80004ac:	f200 8124 	bhi.w	80006f8 <keypad_getKeyNoBlock+0x2e4>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <keypad_getKeyNoBlock+0xa4>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080006f3 	.word	0x080006f3
 80004bc:	080006f9 	.word	0x080006f9
 80004c0:	080006f9 	.word	0x080006f9
 80004c4:	080006f9 	.word	0x080006f9
 80004c8:	080006ed 	.word	0x080006ed
 80004cc:	080006f9 	.word	0x080006f9
 80004d0:	080006e7 	.word	0x080006e7
 80004d4:	080006e1 	.word	0x080006e1
 80004d8:	080006f9 	.word	0x080006f9
 80004dc:	080006f9 	.word	0x080006f9
 80004e0:	080006f9 	.word	0x080006f9
 80004e4:	080006f9 	.word	0x080006f9
 80004e8:	080006f9 	.word	0x080006f9
 80004ec:	080006f9 	.word	0x080006f9
 80004f0:	080006f9 	.word	0x080006f9
 80004f4:	080006f9 	.word	0x080006f9
 80004f8:	080006f9 	.word	0x080006f9
 80004fc:	080006f9 	.word	0x080006f9
 8000500:	080006f9 	.word	0x080006f9
 8000504:	080006f9 	.word	0x080006f9
 8000508:	080006f9 	.word	0x080006f9
 800050c:	080006f9 	.word	0x080006f9
 8000510:	080006f9 	.word	0x080006f9
 8000514:	080006f9 	.word	0x080006f9
 8000518:	080006f9 	.word	0x080006f9
 800051c:	080006f9 	.word	0x080006f9
 8000520:	080006f9 	.word	0x080006f9
 8000524:	080006f9 	.word	0x080006f9
 8000528:	080006f9 	.word	0x080006f9
 800052c:	080006f9 	.word	0x080006f9
 8000530:	080006f9 	.word	0x080006f9
 8000534:	080006f9 	.word	0x080006f9
 8000538:	080006f9 	.word	0x080006f9
 800053c:	080006f9 	.word	0x080006f9
 8000540:	080006f9 	.word	0x080006f9
 8000544:	080006f9 	.word	0x080006f9
 8000548:	080006f9 	.word	0x080006f9
 800054c:	080006f9 	.word	0x080006f9
 8000550:	080006f9 	.word	0x080006f9
 8000554:	080006f9 	.word	0x080006f9
 8000558:	080006f9 	.word	0x080006f9
 800055c:	080006f9 	.word	0x080006f9
 8000560:	080006f9 	.word	0x080006f9
 8000564:	080006f9 	.word	0x080006f9
 8000568:	080006f9 	.word	0x080006f9
 800056c:	080006f9 	.word	0x080006f9
 8000570:	080006f9 	.word	0x080006f9
 8000574:	080006f9 	.word	0x080006f9
 8000578:	080006f9 	.word	0x080006f9
 800057c:	080006f9 	.word	0x080006f9
 8000580:	080006f9 	.word	0x080006f9
 8000584:	080006f9 	.word	0x080006f9
 8000588:	080006f9 	.word	0x080006f9
 800058c:	080006f9 	.word	0x080006f9
 8000590:	080006f9 	.word	0x080006f9
 8000594:	080006f9 	.word	0x080006f9
 8000598:	080006f9 	.word	0x080006f9
 800059c:	080006f9 	.word	0x080006f9
 80005a0:	080006f9 	.word	0x080006f9
 80005a4:	080006f9 	.word	0x080006f9
 80005a8:	080006f9 	.word	0x080006f9
 80005ac:	080006f9 	.word	0x080006f9
 80005b0:	080006f9 	.word	0x080006f9
 80005b4:	080006f9 	.word	0x080006f9
 80005b8:	080006db 	.word	0x080006db
 80005bc:	080006f9 	.word	0x080006f9
 80005c0:	080006f9 	.word	0x080006f9
 80005c4:	080006f9 	.word	0x080006f9
 80005c8:	080006d5 	.word	0x080006d5
 80005cc:	080006f9 	.word	0x080006f9
 80005d0:	080006cf 	.word	0x080006cf
 80005d4:	080006c9 	.word	0x080006c9
 80005d8:	080006f9 	.word	0x080006f9
 80005dc:	080006f9 	.word	0x080006f9
 80005e0:	080006f9 	.word	0x080006f9
 80005e4:	080006f9 	.word	0x080006f9
 80005e8:	080006f9 	.word	0x080006f9
 80005ec:	080006f9 	.word	0x080006f9
 80005f0:	080006f9 	.word	0x080006f9
 80005f4:	080006f9 	.word	0x080006f9
 80005f8:	080006f9 	.word	0x080006f9
 80005fc:	080006f9 	.word	0x080006f9
 8000600:	080006f9 	.word	0x080006f9
 8000604:	080006f9 	.word	0x080006f9
 8000608:	080006f9 	.word	0x080006f9
 800060c:	080006f9 	.word	0x080006f9
 8000610:	080006f9 	.word	0x080006f9
 8000614:	080006f9 	.word	0x080006f9
 8000618:	080006f9 	.word	0x080006f9
 800061c:	080006f9 	.word	0x080006f9
 8000620:	080006f9 	.word	0x080006f9
 8000624:	080006f9 	.word	0x080006f9
 8000628:	080006f9 	.word	0x080006f9
 800062c:	080006f9 	.word	0x080006f9
 8000630:	080006f9 	.word	0x080006f9
 8000634:	080006f9 	.word	0x080006f9
 8000638:	080006c3 	.word	0x080006c3
 800063c:	080006f9 	.word	0x080006f9
 8000640:	080006f9 	.word	0x080006f9
 8000644:	080006f9 	.word	0x080006f9
 8000648:	080006bd 	.word	0x080006bd
 800064c:	080006f9 	.word	0x080006f9
 8000650:	080006b7 	.word	0x080006b7
 8000654:	080006b1 	.word	0x080006b1
 8000658:	080006f9 	.word	0x080006f9
 800065c:	080006f9 	.word	0x080006f9
 8000660:	080006f9 	.word	0x080006f9
 8000664:	080006f9 	.word	0x080006f9
 8000668:	080006f9 	.word	0x080006f9
 800066c:	080006f9 	.word	0x080006f9
 8000670:	080006f9 	.word	0x080006f9
 8000674:	080006f9 	.word	0x080006f9
 8000678:	080006ab 	.word	0x080006ab
 800067c:	080006f9 	.word	0x080006f9
 8000680:	080006f9 	.word	0x080006f9
 8000684:	080006f9 	.word	0x080006f9
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006f9 	.word	0x080006f9
 8000690:	0800069f 	.word	0x0800069f
 8000694:	08000699 	.word	0x08000699
		case 0b11101110 : keycode = 1; break;
 8000698:	2301      	movs	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	e030      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b11101101 : keycode = 2; break;
 800069e:	2302      	movs	r3, #2
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e02d      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b11101011 : keycode = 3; break;
 80006a4:	2303      	movs	r3, #3
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	e02a      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b11100111 : keycode = 4; break;
 80006aa:	2304      	movs	r3, #4
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e027      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>

		case 0b11011110 : keycode = 5; break;
 80006b0:	2305      	movs	r3, #5
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	e024      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b11011101 : keycode = 6; break;
 80006b6:	2306      	movs	r3, #6
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	e021      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b11011011 : keycode = 7; break;
 80006bc:	2307      	movs	r3, #7
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	e01e      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b11010111 : keycode = 8; break;
 80006c2:	2308      	movs	r3, #8
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e01b      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>

		case 0b10111110 : keycode = 9; break;
 80006c8:	2309      	movs	r3, #9
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	e018      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b10111101 : keycode = 10; break;
 80006ce:	230a      	movs	r3, #10
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	e015      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b10111011 : keycode = 11; break;
 80006d4:	230b      	movs	r3, #11
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	e012      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b10110111 : keycode = 12; break;
 80006da:	230c      	movs	r3, #12
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	e00f      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>

		case 0b01111110 : keycode = 13; break;
 80006e0:	230d      	movs	r3, #13
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	e00c      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b01111101 : keycode = 14; break;
 80006e6:	230e      	movs	r3, #14
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	e009      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b01111011 : keycode = 15; break;
 80006ec:	230f      	movs	r3, #15
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	e006      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		case 0b01110111 : keycode = 16; break;
 80006f2:	2310      	movs	r3, #16
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	e003      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>

		default: keycode = 255;
 80006f8:	23ff      	movs	r3, #255	; 0xff
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	e000      	b.n	8000700 <keypad_getKeyNoBlock+0x2ec>
		}
	}
 80006fe:	bf00      	nop

	return keycode;
 8000700:	79fb      	ldrb	r3, [r7, #7]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40020800 	.word	0x40020800
 8000710:	40020814 	.word	0x40020814
 8000714:	40020810 	.word	0x40020810

08000718 <keypad_getKey>:


uint8_t keypad_getKey(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	uint8_t key, keycode;

	keycode = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]

	while (keycode ==  0){
 8000722:	e010      	b.n	8000746 <keypad_getKey+0x2e>
		//Check status of keypad
		key = keypad_getKeyNoBlock();
 8000724:	f7ff fe76 	bl	8000414 <keypad_getKeyNoBlock>
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
		if (key != 0) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d009      	beq.n	8000746 <keypad_getKey+0x2e>
			//if key is pressed save which key
			keycode = key;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	71bb      	strb	r3, [r7, #6]
			//wait for the release of the key
			while (key != 0){
 8000736:	e003      	b.n	8000740 <keypad_getKey+0x28>
				key = keypad_getKeyNoBlock();
 8000738:	f7ff fe6c 	bl	8000414 <keypad_getKeyNoBlock>
 800073c:	4603      	mov	r3, r0
 800073e:	71fb      	strb	r3, [r7, #7]
			while (key != 0){
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f8      	bne.n	8000738 <keypad_getKey+0x20>
	while (keycode ==  0){
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0eb      	beq.n	8000724 <keypad_getKey+0xc>
			}
		}
	}
	return keycode;
 800074c:	79bb      	ldrb	r3, [r7, #6]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <keypad_getNum>:

uint8_t keypad_getNum(uint8_t num){
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	uint8_t out = 255;
 8000762:	23ff      	movs	r3, #255	; 0xff
 8000764:	73fb      	strb	r3, [r7, #15]
	switch (num){
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	3b01      	subs	r3, #1
 800076a:	2b0a      	cmp	r3, #10
 800076c:	d833      	bhi.n	80007d6 <keypad_getNum+0x7e>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <keypad_getNum+0x1c>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	080007a1 	.word	0x080007a1
 8000778:	080007a7 	.word	0x080007a7
 800077c:	080007ad 	.word	0x080007ad
 8000780:	080007d7 	.word	0x080007d7
 8000784:	080007b3 	.word	0x080007b3
 8000788:	080007b9 	.word	0x080007b9
 800078c:	080007bf 	.word	0x080007bf
 8000790:	080007d7 	.word	0x080007d7
 8000794:	080007c5 	.word	0x080007c5
 8000798:	080007cb 	.word	0x080007cb
 800079c:	080007d1 	.word	0x080007d1
	case 1 : out = 1; break;
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e01a      	b.n	80007dc <keypad_getNum+0x84>
	case 2 : out = 2; break;
 80007a6:	2302      	movs	r3, #2
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	e017      	b.n	80007dc <keypad_getNum+0x84>
	case 3 : out = 3; break;
 80007ac:	2303      	movs	r3, #3
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e014      	b.n	80007dc <keypad_getNum+0x84>
	case 5 : out = 4; break;
 80007b2:	2304      	movs	r3, #4
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e011      	b.n	80007dc <keypad_getNum+0x84>
	case 6 : out = 5; break;
 80007b8:	2305      	movs	r3, #5
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e00e      	b.n	80007dc <keypad_getNum+0x84>
	case 7 : out = 6; break;
 80007be:	2306      	movs	r3, #6
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e00b      	b.n	80007dc <keypad_getNum+0x84>
	case 9 : out = 7; break;
 80007c4:	2307      	movs	r3, #7
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e008      	b.n	80007dc <keypad_getNum+0x84>
	case 10 : out = 8; break;
 80007ca:	2308      	movs	r3, #8
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e005      	b.n	80007dc <keypad_getNum+0x84>
	case 11 : out = 9; break;
 80007d0:	2309      	movs	r3, #9
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	e002      	b.n	80007dc <keypad_getNum+0x84>
	default : out = 0; break;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	bf00      	nop
	}
	return out;
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <keypad_getChar>:

char keypad_getChar(uint8_t num){
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	char out;
	switch (num){
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d84f      	bhi.n	800089e <keypad_getChar+0xb2>
 80007fe:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <keypad_getChar+0x18>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	08000845 	.word	0x08000845
 8000808:	0800084b 	.word	0x0800084b
 800080c:	08000851 	.word	0x08000851
 8000810:	08000857 	.word	0x08000857
 8000814:	0800085d 	.word	0x0800085d
 8000818:	08000863 	.word	0x08000863
 800081c:	08000869 	.word	0x08000869
 8000820:	0800086f 	.word	0x0800086f
 8000824:	08000875 	.word	0x08000875
 8000828:	0800087b 	.word	0x0800087b
 800082c:	08000881 	.word	0x08000881
 8000830:	08000887 	.word	0x08000887
 8000834:	0800088d 	.word	0x0800088d
 8000838:	0800089f 	.word	0x0800089f
 800083c:	08000893 	.word	0x08000893
 8000840:	08000899 	.word	0x08000899
	case 1 : out = '1'; break;
 8000844:	2331      	movs	r3, #49	; 0x31
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e02c      	b.n	80008a4 <keypad_getChar+0xb8>
	case 2 : out = '2'; break;
 800084a:	2332      	movs	r3, #50	; 0x32
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e029      	b.n	80008a4 <keypad_getChar+0xb8>
	case 3 : out = '3'; break;
 8000850:	2333      	movs	r3, #51	; 0x33
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e026      	b.n	80008a4 <keypad_getChar+0xb8>
	case 4 : out = 'A'; break;
 8000856:	2341      	movs	r3, #65	; 0x41
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e023      	b.n	80008a4 <keypad_getChar+0xb8>
	case 5 : out = '4'; break;
 800085c:	2334      	movs	r3, #52	; 0x34
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e020      	b.n	80008a4 <keypad_getChar+0xb8>
	case 6 : out = '5'; break;
 8000862:	2335      	movs	r3, #53	; 0x35
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e01d      	b.n	80008a4 <keypad_getChar+0xb8>
	case 7 : out = '6'; break;
 8000868:	2336      	movs	r3, #54	; 0x36
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	e01a      	b.n	80008a4 <keypad_getChar+0xb8>
	case 8 : out = 'B'; break;
 800086e:	2342      	movs	r3, #66	; 0x42
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e017      	b.n	80008a4 <keypad_getChar+0xb8>
	case 9 : out = '7'; break;
 8000874:	2337      	movs	r3, #55	; 0x37
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e014      	b.n	80008a4 <keypad_getChar+0xb8>
	case 10 : out = '8'; break;
 800087a:	2338      	movs	r3, #56	; 0x38
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	e011      	b.n	80008a4 <keypad_getChar+0xb8>
	case 11 : out = '9'; break;
 8000880:	2339      	movs	r3, #57	; 0x39
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e00e      	b.n	80008a4 <keypad_getChar+0xb8>
	case 12 : out = 'C'; break;
 8000886:	2343      	movs	r3, #67	; 0x43
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e00b      	b.n	80008a4 <keypad_getChar+0xb8>
	case 13 : out = '*'; break;
 800088c:	232a      	movs	r3, #42	; 0x2a
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e008      	b.n	80008a4 <keypad_getChar+0xb8>
	case 15 : out = '#'; break;
 8000892:	2323      	movs	r3, #35	; 0x23
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e005      	b.n	80008a4 <keypad_getChar+0xb8>
	case 16 : out = 'D'; break;
 8000898:	2344      	movs	r3, #68	; 0x44
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e002      	b.n	80008a4 <keypad_getChar+0xb8>
	default : out = '0'; break;
 800089e:	2330      	movs	r3, #48	; 0x30
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	bf00      	nop
	}
	return out;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <port_setup>:
#include "delay.h"

/*
 * Helper function that sets up ports in GPIO
 */
static void port_setup(){
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	*RCC_AHB1ENR |= ((1<<GPIOAEN)|(1<<GPIOCEN));
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <port_setup+0x54>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <port_setup+0x54>)
 80008be:	f043 0305 	orr.w	r3, r3, #5
 80008c2:	6013      	str	r3, [r2, #0]

	*GPIOA_MODER &= ~(0xFFFF<<8);
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <port_setup+0x58>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a10      	ldr	r2, [pc, #64]	; (800090c <port_setup+0x58>)
 80008ca:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80008ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008d2:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |= (0x5555<<8);
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <port_setup+0x58>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <port_setup+0x58>)
 80008da:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 80008de:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80008e2:	6013      	str	r3, [r2, #0]

	*GPIOC_MODER &= ~(0x3F<<16);
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <port_setup+0x5c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <port_setup+0x5c>)
 80008ea:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80008ee:	6013      	str	r3, [r2, #0]
	*GPIOC_MODER |= (0x15<<16);
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <port_setup+0x5c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <port_setup+0x5c>)
 80008f6:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023830 	.word	0x40023830
 800090c:	40020000 	.word	0x40020000
 8000910:	40020800 	.word	0x40020800

08000914 <write_instr>:
 * Helper function that writes an input
 * instruction to the LCD
 *
 * instr: instruction to write to LCD
 */
static void write_instr(uint8_t instr){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	*GPIOC_BSRR |= ((RS_CLR)|(RW_CLR)|(E_CLR));
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <write_instr+0x74>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a19      	ldr	r2, [pc, #100]	; (8000988 <write_instr+0x74>)
 8000924:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000928:	6013      	str	r3, [r2, #0]

	*GPIOC_BSRR |= (E_SET);
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <write_instr+0x74>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <write_instr+0x74>)
 8000930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000934:	6013      	str	r3, [r2, #0]

	*GPIOA_ODR &= ~(0x0FF0);
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <write_instr+0x78>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <write_instr+0x78>)
 800093c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000940:	6013      	str	r3, [r2, #0]
	*GPIOA_ODR |= (instr<<4);
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <write_instr+0x78>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	4611      	mov	r1, r2
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <write_instr+0x78>)
 800094e:	430b      	orrs	r3, r1
 8000950:	6013      	str	r3, [r2, #0]

	*GPIOC_BSRR |= (E_CLR);
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <write_instr+0x74>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <write_instr+0x74>)
 8000958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800095c:	6013      	str	r3, [r2, #0]

	if ((instr == 1)||(instr == 2)||(instr == 3)){
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d005      	beq.n	8000970 <write_instr+0x5c>
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d002      	beq.n	8000970 <write_instr+0x5c>
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d103      	bne.n	8000978 <write_instr+0x64>
		delay_1ms(2);
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fc9d 	bl	80002b0 <delay_1ms>
 8000976:	e002      	b.n	800097e <write_instr+0x6a>
	} else {
		delay_1us(37);
 8000978:	2025      	movs	r0, #37	; 0x25
 800097a:	f7ff fcc9 	bl	8000310 <delay_1us>
	}
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020818 	.word	0x40020818
 800098c:	40020014 	.word	0x40020014

08000990 <write_data>:
 * Helper function to write input
 * data to LCD
 *
 * data: input data to write to LCD
 */
static void write_data(uint8_t data){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	*GPIOC_BSRR |= ((RS_SET)|(RW_CLR)|(E_CLR));
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <write_data+0x5c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <write_data+0x5c>)
 80009a0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	6013      	str	r3, [r2, #0]

	*GPIOC_BSRR |= (E_SET);
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <write_data+0x5c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <write_data+0x5c>)
 80009b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b4:	6013      	str	r3, [r2, #0]

	*GPIOA_ODR &= ~(0x0FF0);
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <write_data+0x60>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <write_data+0x60>)
 80009bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80009c0:	6013      	str	r3, [r2, #0]
	*GPIOA_ODR |= (data<<4);
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <write_data+0x60>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <write_data+0x60>)
 80009ce:	430b      	orrs	r3, r1
 80009d0:	6013      	str	r3, [r2, #0]

	*GPIOC_BSRR |= (E_CLR);
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <write_data+0x5c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <write_data+0x5c>)
 80009d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009dc:	6013      	str	r3, [r2, #0]

	delay_1us(37);
 80009de:	2025      	movs	r0, #37	; 0x25
 80009e0:	f7ff fc96 	bl	8000310 <delay_1us>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020818 	.word	0x40020818
 80009f0:	40020014 	.word	0x40020014

080009f4 <lcd_init>:
/*
 * Initializes the LCD:
 * Sets up ports and writes startup
 * instruction sequence
 */
void lcd_init(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	port_setup();
 80009f8:	f7ff ff5c 	bl	80008b4 <port_setup>

	delay_1ms(40);
 80009fc:	2028      	movs	r0, #40	; 0x28
 80009fe:	f7ff fc57 	bl	80002b0 <delay_1ms>

	//Write startup sequence
	write_instr(0x38);
 8000a02:	2038      	movs	r0, #56	; 0x38
 8000a04:	f7ff ff86 	bl	8000914 <write_instr>
	write_instr(0x38);
 8000a08:	2038      	movs	r0, #56	; 0x38
 8000a0a:	f7ff ff83 	bl	8000914 <write_instr>
	write_instr(0x0F);
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f7ff ff80 	bl	8000914 <write_instr>
	write_instr(0x01);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff ff7d 	bl	8000914 <write_instr>
	write_instr(0x06);
 8000a1a:	2006      	movs	r0, #6
 8000a1c:	f7ff ff7a 	bl	8000914 <write_instr>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <lcd_clear>:

/*
 * Writes clear command to LCD
 */
void lcd_clear(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	write_instr(0x01);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ff73 	bl	8000914 <write_instr>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <lcd_setPosition>:
 * using zero based row and column inputs
 *
 * row: zero based row input
 * column: zero based column input
 */
void lcd_setPosition(uint8_t row, uint8_t column){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71bb      	strb	r3, [r7, #6]
	uint8_t pos = 0x80;
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	73fb      	strb	r3, [r7, #15]
	if (row == 0){
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <lcd_setPosition+0x20>
		pos += 0x40;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	3340      	adds	r3, #64	; 0x40
 8000a50:	73fb      	strb	r3, [r7, #15]
	}
	pos += column;
 8000a52:	7bfa      	ldrb	r2, [r7, #15]
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	4413      	add	r3, r2
 8000a58:	73fb      	strb	r3, [r7, #15]
	write_instr(pos);
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff59 	bl	8000914 <write_instr>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <lcd_printString>:
 * Prints all characters in array "string" to LCD
 * Returns number of characters written
 *
 * string: input string as a char array
 */
uint8_t lcd_printString(char string[]){
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	uint8_t charprinted = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
	uint8_t arraypointer = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73bb      	strb	r3, [r7, #14]
	char printchar = string[arraypointer];
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	737b      	strb	r3, [r7, #13]
	while (printchar != 0){
 8000a84:	e00e      	b.n	8000aa4 <lcd_printString+0x3a>
		write_data(printchar);
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff81 	bl	8000990 <write_data>
		arraypointer++;
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	3301      	adds	r3, #1
 8000a92:	73bb      	strb	r3, [r7, #14]
		printchar = string[arraypointer];
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	737b      	strb	r3, [r7, #13]
		charprinted++;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
	while (printchar != 0){
 8000aa4:	7b7b      	ldrb	r3, [r7, #13]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1ed      	bne.n	8000a86 <lcd_printString+0x1c>
	}
	return charprinted;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <lcd_printChar>:
/*
 * Prints input char, "character" to the LCD
 *
 * character: char to write to LCD
 */
void lcd_printChar(char character){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	write_data(character);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff65 	bl	8000990 <write_data>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <lcd_printNum>:
 * Converts input integer "num" to ascii and
 * prints it to the LCD
 *
 * num: number to write to LCD
 */
void lcd_printNum(uint32_t num){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b090      	sub	sp, #64	; 0x40
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "%d", (int)num);
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4906      	ldr	r1, [pc, #24]	; (8000af8 <lcd_printNum+0x28>)
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 f93d 	bl	8001d60 <siprintf>
	lcd_printString(buffer);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ffbd 	bl	8000a6a <lcd_printString>
}
 8000af0:	bf00      	nop
 8000af2:	3740      	adds	r7, #64	; 0x40
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	08002584 	.word	0x08002584

08000afc <main>:
*/

#include "tuner.h"

int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	tuner_sequence();
 8000b00:	f000 f964 	bl	8000dcc <tuner_sequence>
	for(;;);
 8000b04:	e7fe      	b.n	8000b04 <main+0x8>
	...

08000b08 <rotary_init>:

/*
 * Initializes the rotary encoder to read input with interrupts
 * including setting input and pull-up, as well as enabling the external interrupts
 */
void rotary_init(){
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	*RCC_AHB1ENR |= (1<<GPIOAEN);
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <rotary_init+0x98>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <rotary_init+0x98>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6013      	str	r3, [r2, #0]
	*RCC_APB2ENR |= (SYSCFGEN);
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <rotary_init+0x9c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <rotary_init+0x9c>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6013      	str	r3, [r2, #0]

	*GPIOA_MODER &= ~(0x300000F);
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <rotary_init+0xa0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <rotary_init+0xa0>)
 8000b2a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000b2e:	f023 030f 	bic.w	r3, r3, #15
 8000b32:	6013      	str	r3, [r2, #0]

	*GPIOA_PUPDR &= ~(0x300000F);
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <rotary_init+0xa4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <rotary_init+0xa4>)
 8000b3a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000b3e:	f023 030f 	bic.w	r3, r3, #15
 8000b42:	6013      	str	r3, [r2, #0]
	*GPIOA_PUPDR |= (0x1000005);
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <rotary_init+0xa4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <rotary_init+0xa4>)
 8000b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b4e:	f043 0305 	orr.w	r3, r3, #5
 8000b52:	6013      	str	r3, [r2, #0]

	*SYSCFG_EXTICR1 &= ~(0xF);
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <rotary_init+0xa8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <rotary_init+0xa8>)
 8000b5a:	f023 030f 	bic.w	r3, r3, #15
 8000b5e:	6013      	str	r3, [r2, #0]
	*SYSCFG_EXTICR4 &= ~(0xF);
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <rotary_init+0xac>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <rotary_init+0xac>)
 8000b66:	f023 030f 	bic.w	r3, r3, #15
 8000b6a:	6013      	str	r3, [r2, #0]

	*EXTI_FTSR |= (0b1000000000001);
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <rotary_init+0xb0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <rotary_init+0xb0>)
 8000b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]

	*NVIC_ISER0 |= (1<<6);
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <rotary_init+0xb4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <rotary_init+0xb4>)
 8000b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b86:	6013      	str	r3, [r2, #0]
	*NVIC_ISER1 |= (1<<8);
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <rotary_init+0xb8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <rotary_init+0xb8>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023830 	.word	0x40023830
 8000ba4:	40023844 	.word	0x40023844
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	4002000c 	.word	0x4002000c
 8000bb0:	40013808 	.word	0x40013808
 8000bb4:	40013814 	.word	0x40013814
 8000bb8:	40013c0c 	.word	0x40013c0c
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000e104 	.word	0xe000e104

08000bc4 <rotary_enable>:

/*
 * Enables the external interrupts in NVIC
 * Allowing the ISR to run
 */
void rotary_enable(){
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	*EXTI_IMR |= (0b1000000000001);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <rotary_enable+0x20>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <rotary_enable+0x20>)
 8000bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40013c00 	.word	0x40013c00

08000be8 <rotary_disable>:

/*
 * Disables the external interupts in NVIC
 * The ISR's will not run
 */
void rotary_disable(){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	*EXTI_IMR &= ~(0b1000000000001);
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <rotary_disable+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <rotary_disable+0x20>)
 8000bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40013c00 	.word	0x40013c00

08000c0c <EXTI0_IRQHandler>:

/*
 * Interrupt handler to read rotary encoder rotation
 * reads 2 if clockwise, 0 if counterclockwise
 */
void EXTI0_IRQHandler(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	*EXTI_PR |= (1);
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <EXTI0_IRQHandler+0x44>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <EXTI0_IRQHandler+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
	delay_1us(15);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f7ff fb76 	bl	8000310 <delay_1us>
	uint8_t rotary = (*GPIOA_IDR & 0b11);
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <EXTI0_IRQHandler+0x48>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	71fb      	strb	r3, [r7, #7]
	if (rotary == 2){
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d102      	bne.n	8000c3c <EXTI0_IRQHandler+0x30>
		//Clockwise
		tuner_stepUp();
 8000c36:	f000 fa6d 	bl	8001114 <tuner_stepUp>
	} else if (rotary == 0){
		//Counter-Clockwise
		tuner_stepDown();
	}
}
 8000c3a:	e004      	b.n	8000c46 <EXTI0_IRQHandler+0x3a>
	} else if (rotary == 0){
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <EXTI0_IRQHandler+0x3a>
		tuner_stepDown();
 8000c42:	f000 fa7d 	bl	8001140 <tuner_stepDown>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40013c14 	.word	0x40013c14
 8000c54:	40020010 	.word	0x40020010

08000c58 <EXTI15_10_IRQHandler>:

/*
 * Interrupt handler to read push of encoder
 */
void EXTI15_10_IRQHandler(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	*EXTI_PR |= (1<<12);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <EXTI15_10_IRQHandler+0x1c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <EXTI15_10_IRQHandler+0x1c>)
 8000c62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c66:	6013      	str	r3, [r2, #0]
	delay_1us(15);
 8000c68:	200f      	movs	r0, #15
 8000c6a:	f7ff fb51 	bl	8000310 <delay_1us>
	//Button Press
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013c14 	.word	0x40013c14

08000c78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x50>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x16>
		heap_end = &end;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <_sbrk+0x50>)
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <_sbrk+0x54>)
 8000c8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <_sbrk+0x50>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <_sbrk+0x50>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	466a      	mov	r2, sp
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d907      	bls.n	8000cb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ca2:	f001 f833 	bl	8001d0c <__errno>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	230c      	movs	r3, #12
 8000caa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	e006      	b.n	8000cc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <_sbrk+0x50>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <_sbrk+0x50>)
 8000cbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000088 	.word	0x20000088
 8000ccc:	20000098 	.word	0x20000098

08000cd0 <timer_init>:
 * returns the ticks needed to output a square wave at the input frequency
 * when the timer is set to a prescale of 8
 */
static uint32_t frequencytoTicks(uint32_t frequency);

void timer_init(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

	*RCC_AHB1ENR |= (1<<1);
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <timer_init+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <timer_init+0x64>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6013      	str	r3, [r2, #0]

	*RCC_APB1ENR |= (1<<1);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <timer_init+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <timer_init+0x68>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	6013      	str	r3, [r2, #0]

	*GPIOB_MODER &= ~(0x300);
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <timer_init+0x6c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <timer_init+0x6c>)
 8000cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf6:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x200);
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <timer_init+0x6c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <timer_init+0x6c>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]

	*GPIOB_AFRL |= (0x20000);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <timer_init+0x70>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <timer_init+0x70>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0e:	6013      	str	r3, [r2, #0]

	tim->PSC = 7;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <timer_init+0x74>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2207      	movs	r2, #7
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28

	tim->CCMR1 = (0b011<<4);
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <timer_init+0x74>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2230      	movs	r2, #48	; 0x30
 8000d1e:	619a      	str	r2, [r3, #24]

	tim->CCER = 1;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <timer_init+0x74>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2201      	movs	r2, #1
 8000d26:	621a      	str	r2, [r3, #32]

}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023830 	.word	0x40023830
 8000d38:	40023840 	.word	0x40023840
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40020420 	.word	0x40020420
 8000d44:	20000000 	.word	0x20000000

08000d48 <timer_setSound>:
/*
 * Sets a sound to play on the speaker when timer is enabled
 *
 * frequency: input frequency of sound to play
 */
void timer_setSound(uint32_t frequency){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]


	uint32_t ticks = frequencytoTicks(frequency);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f82b 	bl	8000dac <frequencytoTicks>
 8000d56:	60f8      	str	r0, [r7, #12]

	tim->ARR = ticks;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <timer_setSound+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->CCR1 = ticks;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <timer_setSound+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30

}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000

08000d74 <timer_play>:

/*
 * Enables the timer to play a continuous sound
 */
void timer_play(){
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	tim->CR1 = 1;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <timer_play+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000

08000d90 <timer_stop>:

/*
 * Disables the timer to stop sound
 */
void timer_stop(){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	tim->CR1 = 0;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <timer_stop+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000000 	.word	0x20000000

08000dac <frequencytoTicks>:

static uint32_t frequencytoTicks(uint32_t frequency){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	return (1000000/frequency);
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <frequencytoTicks+0x1c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	000f4240 	.word	0x000f4240

08000dcc <tuner_sequence>:
static void startup();

/*
 * Tuner sequence including all function calls to run tuner
 */
void tuner_sequence(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0

	timer_init();
 8000dd2:	f7ff ff7d 	bl	8000cd0 <timer_init>
	keypad_init();
 8000dd6:	f7ff fafd 	bl	80003d4 <keypad_init>
	lcd_init();
 8000dda:	f7ff fe0b 	bl	80009f4 <lcd_init>
	rotary_init();
 8000dde:	f7ff fe93 	bl	8000b08 <rotary_init>

	currentNote = C4;
 8000de2:	4bbf      	ldr	r3, [pc, #764]	; (80010e0 <tuner_sequence+0x314>)
 8000de4:	2230      	movs	r2, #48	; 0x30
 8000de6:	701a      	strb	r2, [r3, #0]

	uint8_t speakerState = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
	uint8_t rotaryState = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]
	timer_setSound(getFreq(currentNote));
 8000df0:	4bbb      	ldr	r3, [pc, #748]	; (80010e0 <tuner_sequence+0x314>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fa4d 	bl	8001294 <getFreq>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ffa3 	bl	8000d48 <timer_setSound>

	startup();
 8000e02:	f000 f9b3 	bl	800116c <startup>

	while (1){
		uint8_t key = keypad_getKey();
 8000e06:	f7ff fc87 	bl	8000718 <keypad_getKey>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	72fb      	strb	r3, [r7, #11]
		if (key == 4){
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d115      	bne.n	8000e40 <tuner_sequence+0x74>
			if (speakerState == 0){
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d109      	bne.n	8000e2e <tuner_sequence+0x62>
				timer_play();
 8000e1a:	f7ff ffab 	bl	8000d74 <timer_play>
				speakerState = 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
				lcd_clear();
 8000e22:	f7ff fdff 	bl	8000a24 <lcd_clear>
				lcd_printString("Speaker On");
 8000e26:	48af      	ldr	r0, [pc, #700]	; (80010e4 <tuner_sequence+0x318>)
 8000e28:	f7ff fe1f 	bl	8000a6a <lcd_printString>
 8000e2c:	e008      	b.n	8000e40 <tuner_sequence+0x74>
			} else {
				timer_stop();
 8000e2e:	f7ff ffaf 	bl	8000d90 <timer_stop>
				speakerState = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
				lcd_clear();
 8000e36:	f7ff fdf5 	bl	8000a24 <lcd_clear>
				lcd_printString("Speaker Off");
 8000e3a:	48ab      	ldr	r0, [pc, #684]	; (80010e8 <tuner_sequence+0x31c>)
 8000e3c:	f7ff fe15 	bl	8000a6a <lcd_printString>
			}
		}
		if (key == 8){
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d115      	bne.n	8000e72 <tuner_sequence+0xa6>
			if (rotaryState == 0){
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d109      	bne.n	8000e60 <tuner_sequence+0x94>
				rotary_enable();
 8000e4c:	f7ff feba 	bl	8000bc4 <rotary_enable>
				rotaryState = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73bb      	strb	r3, [r7, #14]
				lcd_clear();
 8000e54:	f7ff fde6 	bl	8000a24 <lcd_clear>
				lcd_printString("Dial On");
 8000e58:	48a4      	ldr	r0, [pc, #656]	; (80010ec <tuner_sequence+0x320>)
 8000e5a:	f7ff fe06 	bl	8000a6a <lcd_printString>
 8000e5e:	e008      	b.n	8000e72 <tuner_sequence+0xa6>
			} else {
				rotary_disable();
 8000e60:	f7ff fec2 	bl	8000be8 <rotary_disable>
				rotaryState = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73bb      	strb	r3, [r7, #14]
				lcd_clear();
 8000e68:	f7ff fddc 	bl	8000a24 <lcd_clear>
				lcd_printString("Dial Off");
 8000e6c:	48a0      	ldr	r0, [pc, #640]	; (80010f0 <tuner_sequence+0x324>)
 8000e6e:	f7ff fdfc 	bl	8000a6a <lcd_printString>
			}
		}
		if(key == 12){
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	2b0c      	cmp	r3, #12
 8000e76:	f040 8098 	bne.w	8000faa <tuner_sequence+0x1de>
			lcd_clear();
 8000e7a:	f7ff fdd3 	bl	8000a24 <lcd_clear>
			rotary_disable();
 8000e7e:	f7ff feb3 	bl	8000be8 <rotary_disable>
			rotaryState = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73bb      	strb	r3, [r7, #14]
			lcd_clear();
 8000e86:	f7ff fdcd 	bl	8000a24 <lcd_clear>
			lcd_printString("Note Index");
 8000e8a:	489a      	ldr	r0, [pc, #616]	; (80010f4 <tuner_sequence+0x328>)
 8000e8c:	f7ff fded 	bl	8000a6a <lcd_printString>
			lcd_setPosition(0, 1);
 8000e90:	2101      	movs	r1, #1
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fdcd 	bl	8000a32 <lcd_setPosition>
			lcd_printString("Adjustment Mode");
 8000e98:	4897      	ldr	r0, [pc, #604]	; (80010f8 <tuner_sequence+0x32c>)
 8000e9a:	f7ff fde6 	bl	8000a6a <lcd_printString>
			delay_1s(2);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff fa66 	bl	8000370 <delay_1s>
			lcd_clear();
 8000ea4:	f7ff fdbe 	bl	8000a24 <lcd_clear>
			NOTE newNote = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	737b      	strb	r3, [r7, #13]
			lcd_printString("Enter Octave: ");
 8000eac:	4893      	ldr	r0, [pc, #588]	; (80010fc <tuner_sequence+0x330>)
 8000eae:	f7ff fddc 	bl	8000a6a <lcd_printString>
			lcd_setPosition(0, 0);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fdbc 	bl	8000a32 <lcd_setPosition>

			uint8_t octKey = keypad_getKey();
 8000eba:	f7ff fc2d 	bl	8000718 <keypad_getKey>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	72bb      	strb	r3, [r7, #10]
			lcd_printChar(keypad_getChar(octKey));
 8000ec2:	7abb      	ldrb	r3, [r7, #10]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc91 	bl	80007ec <keypad_getChar>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fdf1 	bl	8000ab4 <lcd_printChar>
			delay_1ms(500);
 8000ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed6:	f7ff f9eb 	bl	80002b0 <delay_1ms>
			if (keypad_getNum(octKey) > 8){
 8000eda:	7abb      	ldrb	r3, [r7, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc3b 	bl	8000758 <keypad_getNum>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d903      	bls.n	8000ef0 <tuner_sequence+0x124>
				newNote += (12*8);
 8000ee8:	7b7b      	ldrb	r3, [r7, #13]
 8000eea:	3360      	adds	r3, #96	; 0x60
 8000eec:	737b      	strb	r3, [r7, #13]
 8000eee:	e00d      	b.n	8000f0c <tuner_sequence+0x140>
			} else {
				newNote += (12*keypad_getNum(octKey));
 8000ef0:	7abb      	ldrb	r3, [r7, #10]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc30 	bl	8000758 <keypad_getNum>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	4413      	add	r3, r2
 8000f0a:	737b      	strb	r3, [r7, #13]
			}

			lcd_clear();
 8000f0c:	f7ff fd8a 	bl	8000a24 <lcd_clear>
			lcd_printString("Enter Index:");
 8000f10:	487b      	ldr	r0, [pc, #492]	; (8001100 <tuner_sequence+0x334>)
 8000f12:	f7ff fdaa 	bl	8000a6a <lcd_printString>
			lcd_setPosition(0, 0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fd8a 	bl	8000a32 <lcd_setPosition>

			uint8_t noteIndex = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	733b      	strb	r3, [r7, #12]
			uint8_t ind1 = keypad_getKey();
 8000f22:	f7ff fbf9 	bl	8000718 <keypad_getKey>
 8000f26:	4603      	mov	r3, r0
 8000f28:	727b      	strb	r3, [r7, #9]
			lcd_printChar(keypad_getChar(ind1));
 8000f2a:	7a7b      	ldrb	r3, [r7, #9]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fc5d 	bl	80007ec <keypad_getChar>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fdbd 	bl	8000ab4 <lcd_printChar>
			noteIndex += (keypad_getNum(ind1)*10);
 8000f3a:	7a7b      	ldrb	r3, [r7, #9]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fc0b 	bl	8000758 <keypad_getNum>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	733b      	strb	r3, [r7, #12]

			uint8_t ind2 = keypad_getKey();
 8000f56:	f7ff fbdf 	bl	8000718 <keypad_getKey>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	723b      	strb	r3, [r7, #8]
			lcd_printChar(keypad_getChar(ind2));
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fc43 	bl	80007ec <keypad_getChar>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fda3 	bl	8000ab4 <lcd_printChar>
			noteIndex += (keypad_getNum(ind2));
 8000f6e:	7a3b      	ldrb	r3, [r7, #8]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fbf1 	bl	8000758 <keypad_getNum>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	733b      	strb	r3, [r7, #12]
			if (noteIndex > 11){
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	2b0b      	cmp	r3, #11
 8000f84:	d901      	bls.n	8000f8a <tuner_sequence+0x1be>
				noteIndex = 11;
 8000f86:	230b      	movs	r3, #11
 8000f88:	733b      	strb	r3, [r7, #12]
			}

			newNote += noteIndex;
 8000f8a:	7b7a      	ldrb	r2, [r7, #13]
 8000f8c:	7b3b      	ldrb	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	737b      	strb	r3, [r7, #13]
			delay_1ms(500);
 8000f92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f96:	f7ff f98b 	bl	80002b0 <delay_1ms>
			currentNote = newNote;
 8000f9a:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <tuner_sequence+0x314>)
 8000f9c:	7b7b      	ldrb	r3, [r7, #13]
 8000f9e:	7013      	strb	r3, [r2, #0]
			setNote(currentNote);
 8000fa0:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <tuner_sequence+0x314>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f951 	bl	800124c <setNote>
		}
		if (key == 16){
 8000faa:	7afb      	ldrb	r3, [r7, #11]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	f47f af2a 	bne.w	8000e06 <tuner_sequence+0x3a>
			rotary_disable();
 8000fb2:	f7ff fe19 	bl	8000be8 <rotary_disable>
			rotaryState = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73bb      	strb	r3, [r7, #14]
			lcd_clear();
 8000fba:	f7ff fd33 	bl	8000a24 <lcd_clear>
			lcd_printString("Frequency");
 8000fbe:	4851      	ldr	r0, [pc, #324]	; (8001104 <tuner_sequence+0x338>)
 8000fc0:	f7ff fd53 	bl	8000a6a <lcd_printString>
			lcd_setPosition(0, 1);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fd33 	bl	8000a32 <lcd_setPosition>
			lcd_printString("Adjustment Mode");
 8000fcc:	484a      	ldr	r0, [pc, #296]	; (80010f8 <tuner_sequence+0x32c>)
 8000fce:	f7ff fd4c 	bl	8000a6a <lcd_printString>
			delay_1s(2);
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f7ff f9cc 	bl	8000370 <delay_1s>
			uint32_t freq = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
			lcd_clear();
 8000fdc:	f7ff fd22 	bl	8000a24 <lcd_clear>
			lcd_printString("Enter Freq:");
 8000fe0:	4849      	ldr	r0, [pc, #292]	; (8001108 <tuner_sequence+0x33c>)
 8000fe2:	f7ff fd42 	bl	8000a6a <lcd_printString>
			lcd_setPosition(0, 0);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fd22 	bl	8000a32 <lcd_setPosition>

			uint8_t in1 = keypad_getKey();
 8000fee:	f7ff fb93 	bl	8000718 <keypad_getKey>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	70fb      	strb	r3, [r7, #3]
			lcd_printChar(keypad_getChar(in1));
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fbf7 	bl	80007ec <keypad_getChar>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fd57 	bl	8000ab4 <lcd_printChar>
			freq += (keypad_getNum(in1)*1000);
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fba5 	bl	8000758 <keypad_getNum>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fb03 f302 	mul.w	r3, r3, r2
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	607b      	str	r3, [r7, #4]

			uint8_t in2 = keypad_getKey();
 8001022:	f7ff fb79 	bl	8000718 <keypad_getKey>
 8001026:	4603      	mov	r3, r0
 8001028:	70bb      	strb	r3, [r7, #2]
			lcd_printChar(keypad_getChar(in2));
 800102a:	78bb      	ldrb	r3, [r7, #2]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fbdd 	bl	80007ec <keypad_getChar>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fd3d 	bl	8000ab4 <lcd_printChar>
			freq += (keypad_getNum(in2)*100);
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fb8b 	bl	8000758 <keypad_getNum>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	fb03 f302 	mul.w	r3, r3, r2
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	607b      	str	r3, [r7, #4]

			uint8_t in3 = keypad_getKey();
 8001054:	f7ff fb60 	bl	8000718 <keypad_getKey>
 8001058:	4603      	mov	r3, r0
 800105a:	707b      	strb	r3, [r7, #1]
			lcd_printChar(keypad_getChar(in3));
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fbc4 	bl	80007ec <keypad_getChar>
 8001064:	4603      	mov	r3, r0
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fd24 	bl	8000ab4 <lcd_printChar>
			freq += (keypad_getNum(in3)*10);
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fb72 	bl	8000758 <keypad_getNum>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	607b      	str	r3, [r7, #4]

			uint8_t in4 = keypad_getKey();
 8001088:	f7ff fb46 	bl	8000718 <keypad_getKey>
 800108c:	4603      	mov	r3, r0
 800108e:	703b      	strb	r3, [r7, #0]
			lcd_printChar(keypad_getChar(in4));
 8001090:	783b      	ldrb	r3, [r7, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fbaa 	bl	80007ec <keypad_getChar>
 8001098:	4603      	mov	r3, r0
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd0a 	bl	8000ab4 <lcd_printChar>
			freq += (keypad_getNum(in4));
 80010a0:	783b      	ldrb	r3, [r7, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb58 	bl	8000758 <keypad_getNum>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	607b      	str	r3, [r7, #4]

			delay_1ms(500);
 80010b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b6:	f7ff f8fb 	bl	80002b0 <delay_1ms>
			timer_setSound(freq);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fe44 	bl	8000d48 <timer_setSound>
			lcd_clear();
 80010c0:	f7ff fcb0 	bl	8000a24 <lcd_clear>
			lcd_printString("Current Freq:");
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <tuner_sequence+0x340>)
 80010c6:	f7ff fcd0 	bl	8000a6a <lcd_printString>
			lcd_setPosition(0, 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fcb0 	bl	8000a32 <lcd_setPosition>
			lcd_printNum(freq);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fcfc 	bl	8000ad0 <lcd_printNum>
			lcd_printString("Hz");
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <tuner_sequence+0x344>)
 80010da:	f7ff fcc6 	bl	8000a6a <lcd_printString>
	while (1){
 80010de:	e692      	b.n	8000e06 <tuner_sequence+0x3a>
 80010e0:	20000004 	.word	0x20000004
 80010e4:	08002588 	.word	0x08002588
 80010e8:	08002594 	.word	0x08002594
 80010ec:	080025a0 	.word	0x080025a0
 80010f0:	080025a8 	.word	0x080025a8
 80010f4:	080025b4 	.word	0x080025b4
 80010f8:	080025c0 	.word	0x080025c0
 80010fc:	080025d0 	.word	0x080025d0
 8001100:	080025e0 	.word	0x080025e0
 8001104:	080025f0 	.word	0x080025f0
 8001108:	080025fc 	.word	0x080025fc
 800110c:	08002608 	.word	0x08002608
 8001110:	08002618 	.word	0x08002618

08001114 <tuner_stepUp>:
		}
	}
}

void tuner_stepUp(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	if (currentNote != Eb8){
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <tuner_stepUp+0x28>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b63      	cmp	r3, #99	; 0x63
 800111e:	d005      	beq.n	800112c <tuner_stepUp+0x18>
		currentNote++;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <tuner_stepUp+0x28>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <tuner_stepUp+0x28>)
 800112a:	701a      	strb	r2, [r3, #0]
	}
	setNote(currentNote);
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <tuner_stepUp+0x28>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f88b 	bl	800124c <setNote>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000004 	.word	0x20000004

08001140 <tuner_stepDown>:

void tuner_stepDown(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	if (currentNote != C0){
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <tuner_stepDown+0x28>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <tuner_stepDown+0x18>
		currentNote--;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <tuner_stepDown+0x28>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <tuner_stepDown+0x28>)
 8001156:	701a      	strb	r2, [r3, #0]
	}
	setNote(currentNote);
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <tuner_stepDown+0x28>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f875 	bl	800124c <setNote>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000004 	.word	0x20000004

0800116c <startup>:

static void startup(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	lcd_clear();
 8001170:	f7ff fc58 	bl	8000a24 <lcd_clear>
	lcd_printString("Reference Tuner");
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <startup+0xb4>)
 8001176:	f7ff fc78 	bl	8000a6a <lcd_printString>
	lcd_setPosition(0, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fc58 	bl	8000a32 <lcd_setPosition>
	lcd_printString("Ver 1.0");
 8001182:	4828      	ldr	r0, [pc, #160]	; (8001224 <startup+0xb8>)
 8001184:	f7ff fc71 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff f8f1 	bl	8000370 <delay_1s>

	lcd_clear();
 800118e:	f7ff fc49 	bl	8000a24 <lcd_clear>
	lcd_printString("Created by:");
 8001192:	4825      	ldr	r0, [pc, #148]	; (8001228 <startup+0xbc>)
 8001194:	f7ff fc69 	bl	8000a6a <lcd_printString>
	lcd_setPosition(0, 4);
 8001198:	2104      	movs	r1, #4
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fc49 	bl	8000a32 <lcd_setPosition>
	lcd_printString("Josh Navin");
 80011a0:	4822      	ldr	r0, [pc, #136]	; (800122c <startup+0xc0>)
 80011a2:	f7ff fc62 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff f8e2 	bl	8000370 <delay_1s>

	lcd_clear();
 80011ac:	f7ff fc3a 	bl	8000a24 <lcd_clear>
	lcd_printString("Instructions:");
 80011b0:	481f      	ldr	r0, [pc, #124]	; (8001230 <startup+0xc4>)
 80011b2:	f7ff fc5a 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff f8da 	bl	8000370 <delay_1s>

	lcd_clear();
 80011bc:	f7ff fc32 	bl	8000a24 <lcd_clear>
	lcd_printString("A-Toggle Sound");
 80011c0:	481c      	ldr	r0, [pc, #112]	; (8001234 <startup+0xc8>)
 80011c2:	f7ff fc52 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f7ff f8d2 	bl	8000370 <delay_1s>

	lcd_clear();
 80011cc:	f7ff fc2a 	bl	8000a24 <lcd_clear>
	lcd_printString("B-Dial Toggle");
 80011d0:	4819      	ldr	r0, [pc, #100]	; (8001238 <startup+0xcc>)
 80011d2:	f7ff fc4a 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff f8ca 	bl	8000370 <delay_1s>

	lcd_clear();
 80011dc:	f7ff fc22 	bl	8000a24 <lcd_clear>
	lcd_printString("C-Set Using");
 80011e0:	4816      	ldr	r0, [pc, #88]	; (800123c <startup+0xd0>)
 80011e2:	f7ff fc42 	bl	8000a6a <lcd_printString>
	lcd_setPosition(0, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fc22 	bl	8000a32 <lcd_setPosition>
	lcd_printString("Note Index");
 80011ee:	4814      	ldr	r0, [pc, #80]	; (8001240 <startup+0xd4>)
 80011f0:	f7ff fc3b 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff f8bb 	bl	8000370 <delay_1s>

	lcd_clear();
 80011fa:	f7ff fc13 	bl	8000a24 <lcd_clear>
	lcd_printString("D-Set Using");
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <startup+0xd8>)
 8001200:	f7ff fc33 	bl	8000a6a <lcd_printString>
	lcd_setPosition(0, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fc13 	bl	8000a32 <lcd_setPosition>
	lcd_printString("Frequency");
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <startup+0xdc>)
 800120e:	f7ff fc2c 	bl	8000a6a <lcd_printString>
	delay_1s(2);
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff f8ac 	bl	8000370 <delay_1s>

	lcd_clear();
 8001218:	f7ff fc04 	bl	8000a24 <lcd_clear>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800261c 	.word	0x0800261c
 8001224:	0800262c 	.word	0x0800262c
 8001228:	08002634 	.word	0x08002634
 800122c:	08002640 	.word	0x08002640
 8001230:	0800264c 	.word	0x0800264c
 8001234:	0800265c 	.word	0x0800265c
 8001238:	0800266c 	.word	0x0800266c
 800123c:	0800267c 	.word	0x0800267c
 8001240:	080025b4 	.word	0x080025b4
 8001244:	08002688 	.word	0x08002688
 8001248:	080025f0 	.word	0x080025f0

0800124c <setNote>:

static void setNote(NOTE note){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	lcd_clear();
 8001256:	f7ff fbe5 	bl	8000a24 <lcd_clear>
	lcd_printString("Current Note: ");
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <setNote+0x44>)
 800125c:	f7ff fc05 	bl	8000a6a <lcd_printString>
	lcd_setPosition(0, 0);
 8001260:	2100      	movs	r1, #0
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fbe5 	bl	8000a32 <lcd_setPosition>
	lcd_printString(getNoteName(note));
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fa52 	bl	8001714 <getNoteName>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fbf9 	bl	8000a6a <lcd_printString>
	timer_setSound(getFreq(note));
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f80a 	bl	8001294 <getFreq>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd60 	bl	8000d48 <timer_setSound>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	08002694 	.word	0x08002694

08001294 <getFreq>:

static uint32_t getFreq(NOTE note){
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	uint32_t frequency = 1000;
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	60fb      	str	r3, [r7, #12]

	switch(note)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b63      	cmp	r3, #99	; 0x63
 80012a8:	f200 822c 	bhi.w	8001704 <getFreq+0x470>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <getFreq+0x20>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	08001445 	.word	0x08001445
 80012b8:	0800144b 	.word	0x0800144b
 80012bc:	08001451 	.word	0x08001451
 80012c0:	08001457 	.word	0x08001457
 80012c4:	0800145d 	.word	0x0800145d
 80012c8:	08001463 	.word	0x08001463
 80012cc:	08001469 	.word	0x08001469
 80012d0:	0800146f 	.word	0x0800146f
 80012d4:	08001475 	.word	0x08001475
 80012d8:	0800147b 	.word	0x0800147b
 80012dc:	08001481 	.word	0x08001481
 80012e0:	08001487 	.word	0x08001487
 80012e4:	0800148d 	.word	0x0800148d
 80012e8:	08001493 	.word	0x08001493
 80012ec:	08001499 	.word	0x08001499
 80012f0:	0800149f 	.word	0x0800149f
 80012f4:	080014a5 	.word	0x080014a5
 80012f8:	080014ab 	.word	0x080014ab
 80012fc:	080014b1 	.word	0x080014b1
 8001300:	080014b7 	.word	0x080014b7
 8001304:	080014bd 	.word	0x080014bd
 8001308:	080014c3 	.word	0x080014c3
 800130c:	080014c9 	.word	0x080014c9
 8001310:	080014cf 	.word	0x080014cf
 8001314:	080014d5 	.word	0x080014d5
 8001318:	080014db 	.word	0x080014db
 800131c:	080014e1 	.word	0x080014e1
 8001320:	080014e7 	.word	0x080014e7
 8001324:	080014ed 	.word	0x080014ed
 8001328:	080014f3 	.word	0x080014f3
 800132c:	080014f9 	.word	0x080014f9
 8001330:	080014ff 	.word	0x080014ff
 8001334:	08001505 	.word	0x08001505
 8001338:	0800150b 	.word	0x0800150b
 800133c:	08001511 	.word	0x08001511
 8001340:	08001517 	.word	0x08001517
 8001344:	0800151d 	.word	0x0800151d
 8001348:	08001523 	.word	0x08001523
 800134c:	08001529 	.word	0x08001529
 8001350:	0800152f 	.word	0x0800152f
 8001354:	08001535 	.word	0x08001535
 8001358:	0800153b 	.word	0x0800153b
 800135c:	08001541 	.word	0x08001541
 8001360:	08001547 	.word	0x08001547
 8001364:	0800154d 	.word	0x0800154d
 8001368:	08001553 	.word	0x08001553
 800136c:	08001559 	.word	0x08001559
 8001370:	0800155f 	.word	0x0800155f
 8001374:	08001565 	.word	0x08001565
 8001378:	0800156d 	.word	0x0800156d
 800137c:	08001575 	.word	0x08001575
 8001380:	0800157d 	.word	0x0800157d
 8001384:	08001585 	.word	0x08001585
 8001388:	0800158d 	.word	0x0800158d
 800138c:	08001595 	.word	0x08001595
 8001390:	0800159d 	.word	0x0800159d
 8001394:	080015a5 	.word	0x080015a5
 8001398:	080015ad 	.word	0x080015ad
 800139c:	080015b5 	.word	0x080015b5
 80013a0:	080015bd 	.word	0x080015bd
 80013a4:	080015c5 	.word	0x080015c5
 80013a8:	080015cd 	.word	0x080015cd
 80013ac:	080015d5 	.word	0x080015d5
 80013b0:	080015dd 	.word	0x080015dd
 80013b4:	080015e5 	.word	0x080015e5
 80013b8:	080015ed 	.word	0x080015ed
 80013bc:	080015f5 	.word	0x080015f5
 80013c0:	080015fd 	.word	0x080015fd
 80013c4:	08001605 	.word	0x08001605
 80013c8:	0800160d 	.word	0x0800160d
 80013cc:	08001615 	.word	0x08001615
 80013d0:	0800161d 	.word	0x0800161d
 80013d4:	08001625 	.word	0x08001625
 80013d8:	0800162d 	.word	0x0800162d
 80013dc:	08001635 	.word	0x08001635
 80013e0:	0800163d 	.word	0x0800163d
 80013e4:	08001645 	.word	0x08001645
 80013e8:	0800164d 	.word	0x0800164d
 80013ec:	08001655 	.word	0x08001655
 80013f0:	0800165d 	.word	0x0800165d
 80013f4:	08001665 	.word	0x08001665
 80013f8:	0800166d 	.word	0x0800166d
 80013fc:	08001675 	.word	0x08001675
 8001400:	0800167d 	.word	0x0800167d
 8001404:	08001685 	.word	0x08001685
 8001408:	0800168d 	.word	0x0800168d
 800140c:	08001695 	.word	0x08001695
 8001410:	0800169d 	.word	0x0800169d
 8001414:	080016a5 	.word	0x080016a5
 8001418:	080016ad 	.word	0x080016ad
 800141c:	080016b5 	.word	0x080016b5
 8001420:	080016bd 	.word	0x080016bd
 8001424:	080016c5 	.word	0x080016c5
 8001428:	080016cd 	.word	0x080016cd
 800142c:	080016d5 	.word	0x080016d5
 8001430:	080016dd 	.word	0x080016dd
 8001434:	080016e5 	.word	0x080016e5
 8001438:	080016ed 	.word	0x080016ed
 800143c:	080016f5 	.word	0x080016f5
 8001440:	080016fd 	.word	0x080016fd
	{
	case C0: frequency = 16; break;
 8001444:	2310      	movs	r3, #16
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e15c      	b.n	8001704 <getFreq+0x470>
	case Db0: frequency = 17; break;
 800144a:	2311      	movs	r3, #17
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e159      	b.n	8001704 <getFreq+0x470>
	case D0: frequency = 18; break;
 8001450:	2312      	movs	r3, #18
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e156      	b.n	8001704 <getFreq+0x470>
	case Eb0: frequency = 19; break;
 8001456:	2313      	movs	r3, #19
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e153      	b.n	8001704 <getFreq+0x470>
	case E0: frequency = 21; break;
 800145c:	2315      	movs	r3, #21
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e150      	b.n	8001704 <getFreq+0x470>
	case F0: frequency = 22; break;
 8001462:	2316      	movs	r3, #22
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e14d      	b.n	8001704 <getFreq+0x470>
	case Gb0: frequency = 23; break;
 8001468:	2317      	movs	r3, #23
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e14a      	b.n	8001704 <getFreq+0x470>
	case G0: frequency = 25; break;
 800146e:	2319      	movs	r3, #25
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e147      	b.n	8001704 <getFreq+0x470>
	case Ab0: frequency = 26; break;
 8001474:	231a      	movs	r3, #26
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e144      	b.n	8001704 <getFreq+0x470>
	case LA0: frequency = 28; break;
 800147a:	231c      	movs	r3, #28
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	e141      	b.n	8001704 <getFreq+0x470>
	case Bb0: frequency = 29; break;
 8001480:	231d      	movs	r3, #29
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e13e      	b.n	8001704 <getFreq+0x470>
	case B0: frequency = 31; break;
 8001486:	231f      	movs	r3, #31
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e13b      	b.n	8001704 <getFreq+0x470>
	case C1: frequency = 33; break;
 800148c:	2321      	movs	r3, #33	; 0x21
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e138      	b.n	8001704 <getFreq+0x470>
	case Db1: frequency = 35; break;
 8001492:	2323      	movs	r3, #35	; 0x23
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e135      	b.n	8001704 <getFreq+0x470>
	case D1: frequency = 37; break;
 8001498:	2325      	movs	r3, #37	; 0x25
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e132      	b.n	8001704 <getFreq+0x470>
	case Eb1: frequency = 39; break;
 800149e:	2327      	movs	r3, #39	; 0x27
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e12f      	b.n	8001704 <getFreq+0x470>
	case E1: frequency = 41; break;
 80014a4:	2329      	movs	r3, #41	; 0x29
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e12c      	b.n	8001704 <getFreq+0x470>
	case F1: frequency = 44; break;
 80014aa:	232c      	movs	r3, #44	; 0x2c
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e129      	b.n	8001704 <getFreq+0x470>
	case Gb1: frequency = 46; break;
 80014b0:	232e      	movs	r3, #46	; 0x2e
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e126      	b.n	8001704 <getFreq+0x470>
	case G1: frequency = 49; break;
 80014b6:	2331      	movs	r3, #49	; 0x31
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e123      	b.n	8001704 <getFreq+0x470>
	case Ab1: frequency = 52; break;
 80014bc:	2334      	movs	r3, #52	; 0x34
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e120      	b.n	8001704 <getFreq+0x470>
	case LA1: frequency = 55; break;
 80014c2:	2337      	movs	r3, #55	; 0x37
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e11d      	b.n	8001704 <getFreq+0x470>
	case Bb1: frequency = 58; break;
 80014c8:	233a      	movs	r3, #58	; 0x3a
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e11a      	b.n	8001704 <getFreq+0x470>
	case B1: frequency = 62; break;
 80014ce:	233e      	movs	r3, #62	; 0x3e
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e117      	b.n	8001704 <getFreq+0x470>
	case C2: frequency = 65; break;
 80014d4:	2341      	movs	r3, #65	; 0x41
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e114      	b.n	8001704 <getFreq+0x470>
	case Db2: frequency = 69; break;
 80014da:	2345      	movs	r3, #69	; 0x45
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e111      	b.n	8001704 <getFreq+0x470>
	case D2: frequency = 73; break;
 80014e0:	2349      	movs	r3, #73	; 0x49
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e10e      	b.n	8001704 <getFreq+0x470>
	case Eb2: frequency = 78; break;
 80014e6:	234e      	movs	r3, #78	; 0x4e
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e10b      	b.n	8001704 <getFreq+0x470>
	case E2: frequency = 82; break;
 80014ec:	2352      	movs	r3, #82	; 0x52
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	e108      	b.n	8001704 <getFreq+0x470>
	case F2: frequency = 87; break;
 80014f2:	2357      	movs	r3, #87	; 0x57
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	e105      	b.n	8001704 <getFreq+0x470>
	case Gb2: frequency = 93; break;
 80014f8:	235d      	movs	r3, #93	; 0x5d
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e102      	b.n	8001704 <getFreq+0x470>
	case G2: frequency = 98; break;
 80014fe:	2362      	movs	r3, #98	; 0x62
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e0ff      	b.n	8001704 <getFreq+0x470>
	case Ab2: frequency = 104; break;
 8001504:	2368      	movs	r3, #104	; 0x68
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e0fc      	b.n	8001704 <getFreq+0x470>
	case LA2: frequency = 110; break;
 800150a:	236e      	movs	r3, #110	; 0x6e
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e0f9      	b.n	8001704 <getFreq+0x470>
	case Bb2: frequency = 117; break;
 8001510:	2375      	movs	r3, #117	; 0x75
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e0f6      	b.n	8001704 <getFreq+0x470>
	case B2: frequency = 123; break;
 8001516:	237b      	movs	r3, #123	; 0x7b
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e0f3      	b.n	8001704 <getFreq+0x470>
	case C3: frequency = 131; break;
 800151c:	2383      	movs	r3, #131	; 0x83
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e0f0      	b.n	8001704 <getFreq+0x470>
	case Db3: frequency = 139; break;
 8001522:	238b      	movs	r3, #139	; 0x8b
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e0ed      	b.n	8001704 <getFreq+0x470>
	case D3: frequency = 147; break;
 8001528:	2393      	movs	r3, #147	; 0x93
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e0ea      	b.n	8001704 <getFreq+0x470>
	case Eb3: frequency = 156; break;
 800152e:	239c      	movs	r3, #156	; 0x9c
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e0e7      	b.n	8001704 <getFreq+0x470>
	case E3: frequency = 165; break;
 8001534:	23a5      	movs	r3, #165	; 0xa5
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e0e4      	b.n	8001704 <getFreq+0x470>
	case F3: frequency = 175; break;
 800153a:	23af      	movs	r3, #175	; 0xaf
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e0e1      	b.n	8001704 <getFreq+0x470>
	case Gb3: frequency = 185; break;
 8001540:	23b9      	movs	r3, #185	; 0xb9
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e0de      	b.n	8001704 <getFreq+0x470>
	case G3: frequency = 196; break;
 8001546:	23c4      	movs	r3, #196	; 0xc4
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e0db      	b.n	8001704 <getFreq+0x470>
	case Ab3: frequency = 208; break;
 800154c:	23d0      	movs	r3, #208	; 0xd0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e0d8      	b.n	8001704 <getFreq+0x470>
	case LA3: frequency = 220; break;
 8001552:	23dc      	movs	r3, #220	; 0xdc
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e0d5      	b.n	8001704 <getFreq+0x470>
	case Bb3: frequency = 233; break;
 8001558:	23e9      	movs	r3, #233	; 0xe9
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e0d2      	b.n	8001704 <getFreq+0x470>
	case B3: frequency = 247; break;
 800155e:	23f7      	movs	r3, #247	; 0xf7
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e0cf      	b.n	8001704 <getFreq+0x470>
	case C4: frequency = 262; break;
 8001564:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e0cb      	b.n	8001704 <getFreq+0x470>
	case Db4: frequency = 277; break;
 800156c:	f240 1315 	movw	r3, #277	; 0x115
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e0c7      	b.n	8001704 <getFreq+0x470>
	case D4: frequency = 294; break;
 8001574:	f44f 7393 	mov.w	r3, #294	; 0x126
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e0c3      	b.n	8001704 <getFreq+0x470>
	case Eb4: frequency = 311; break;
 800157c:	f240 1337 	movw	r3, #311	; 0x137
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e0bf      	b.n	8001704 <getFreq+0x470>
	case E4: frequency = 330; break;
 8001584:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e0bb      	b.n	8001704 <getFreq+0x470>
	case F4: frequency = 349; break;
 800158c:	f240 135d 	movw	r3, #349	; 0x15d
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e0b7      	b.n	8001704 <getFreq+0x470>
	case Gb4: frequency = 370; break;
 8001594:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e0b3      	b.n	8001704 <getFreq+0x470>
	case G4: frequency = 392; break;
 800159c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e0af      	b.n	8001704 <getFreq+0x470>
	case Ab4: frequency = 415; break;
 80015a4:	f240 139f 	movw	r3, #415	; 0x19f
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e0ab      	b.n	8001704 <getFreq+0x470>
	case LA4: frequency = 440; break;
 80015ac:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e0a7      	b.n	8001704 <getFreq+0x470>
	case Bb4: frequency = 466; break;
 80015b4:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e0a3      	b.n	8001704 <getFreq+0x470>
	case B4: frequency = 494; break;
 80015bc:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e09f      	b.n	8001704 <getFreq+0x470>
	case C5: frequency = 523; break;
 80015c4:	f240 230b 	movw	r3, #523	; 0x20b
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e09b      	b.n	8001704 <getFreq+0x470>
	case Db5: frequency = 554; break;
 80015cc:	f240 232a 	movw	r3, #554	; 0x22a
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	e097      	b.n	8001704 <getFreq+0x470>
	case D5: frequency = 587; break;
 80015d4:	f240 234b 	movw	r3, #587	; 0x24b
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e093      	b.n	8001704 <getFreq+0x470>
	case Eb5: frequency = 622; break;
 80015dc:	f240 236e 	movw	r3, #622	; 0x26e
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e08f      	b.n	8001704 <getFreq+0x470>
	case E5: frequency = 659; break;
 80015e4:	f240 2393 	movw	r3, #659	; 0x293
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e08b      	b.n	8001704 <getFreq+0x470>
	case F5: frequency = 698; break;
 80015ec:	f240 23ba 	movw	r3, #698	; 0x2ba
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e087      	b.n	8001704 <getFreq+0x470>
	case Gb5: frequency = 740; break;
 80015f4:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e083      	b.n	8001704 <getFreq+0x470>
	case G5: frequency = 784; break;
 80015fc:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e07f      	b.n	8001704 <getFreq+0x470>
	case Ab5: frequency = 831; break;
 8001604:	f240 333f 	movw	r3, #831	; 0x33f
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	e07b      	b.n	8001704 <getFreq+0x470>
	case LA5: frequency = 880; break;
 800160c:	f44f 735c 	mov.w	r3, #880	; 0x370
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	e077      	b.n	8001704 <getFreq+0x470>
	case Bb5: frequency = 932; break;
 8001614:	f44f 7369 	mov.w	r3, #932	; 0x3a4
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e073      	b.n	8001704 <getFreq+0x470>
	case B5: frequency = 988; break;
 800161c:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e06f      	b.n	8001704 <getFreq+0x470>
	case C6: frequency = 1047; break;
 8001624:	f240 4317 	movw	r3, #1047	; 0x417
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e06b      	b.n	8001704 <getFreq+0x470>
	case Db6: frequency = 1109; break;
 800162c:	f240 4355 	movw	r3, #1109	; 0x455
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e067      	b.n	8001704 <getFreq+0x470>
	case D6: frequency = 1175; break;
 8001634:	f240 4397 	movw	r3, #1175	; 0x497
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e063      	b.n	8001704 <getFreq+0x470>
	case Eb6: frequency = 1245; break;
 800163c:	f240 43dd 	movw	r3, #1245	; 0x4dd
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	e05f      	b.n	8001704 <getFreq+0x470>
	case E6: frequency = 1319; break;
 8001644:	f240 5327 	movw	r3, #1319	; 0x527
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e05b      	b.n	8001704 <getFreq+0x470>
	case F6: frequency = 1397; break;
 800164c:	f240 5375 	movw	r3, #1397	; 0x575
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e057      	b.n	8001704 <getFreq+0x470>
	case Gb6: frequency = 1480; break;
 8001654:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e053      	b.n	8001704 <getFreq+0x470>
	case G6: frequency = 1568; break;
 800165c:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e04f      	b.n	8001704 <getFreq+0x470>
	case Ab6: frequency = 1661; break;
 8001664:	f240 637d 	movw	r3, #1661	; 0x67d
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e04b      	b.n	8001704 <getFreq+0x470>
	case LA6: frequency = 1760; break;
 800166c:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e047      	b.n	8001704 <getFreq+0x470>
	case Bb6: frequency = 1865; break;
 8001674:	f240 7349 	movw	r3, #1865	; 0x749
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e043      	b.n	8001704 <getFreq+0x470>
	case B6: frequency = 1976; break;
 800167c:	f44f 63f7 	mov.w	r3, #1976	; 0x7b8
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e03f      	b.n	8001704 <getFreq+0x470>
	case C7: frequency = 2093; break;
 8001684:	f640 032d 	movw	r3, #2093	; 0x82d
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e03b      	b.n	8001704 <getFreq+0x470>
	case Db7: frequency = 2217; break;
 800168c:	f640 03a9 	movw	r3, #2217	; 0x8a9
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e037      	b.n	8001704 <getFreq+0x470>
	case D7: frequency = 2349; break;
 8001694:	f640 132d 	movw	r3, #2349	; 0x92d
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e033      	b.n	8001704 <getFreq+0x470>
	case Eb7: frequency = 2489; break;
 800169c:	f640 13b9 	movw	r3, #2489	; 0x9b9
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e02f      	b.n	8001704 <getFreq+0x470>
	case E7: frequency = 2637; break;
 80016a4:	f640 234d 	movw	r3, #2637	; 0xa4d
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e02b      	b.n	8001704 <getFreq+0x470>
	case F7: frequency = 2794; break;
 80016ac:	f640 23ea 	movw	r3, #2794	; 0xaea
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e027      	b.n	8001704 <getFreq+0x470>
	case Gb7: frequency = 2960; break;
 80016b4:	f44f 6339 	mov.w	r3, #2960	; 0xb90
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e023      	b.n	8001704 <getFreq+0x470>
	case G7: frequency = 3136; break;
 80016bc:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e01f      	b.n	8001704 <getFreq+0x470>
	case Ab7: frequency = 3322; break;
 80016c4:	f640 43fa 	movw	r3, #3322	; 0xcfa
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e01b      	b.n	8001704 <getFreq+0x470>
	case LA7: frequency = 3520; break;
 80016cc:	f44f 635c 	mov.w	r3, #3520	; 0xdc0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e017      	b.n	8001704 <getFreq+0x470>
	case Bb7: frequency = 3729; break;
 80016d4:	f640 6391 	movw	r3, #3729	; 0xe91
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	e013      	b.n	8001704 <getFreq+0x470>
	case B7: frequency = 3951; break;
 80016dc:	f640 736f 	movw	r3, #3951	; 0xf6f
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e00f      	b.n	8001704 <getFreq+0x470>
	case C8: frequency = 4186; break;
 80016e4:	f241 035a 	movw	r3, #4186	; 0x105a
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e00b      	b.n	8001704 <getFreq+0x470>
	case Db8: frequency = 4435; break;
 80016ec:	f241 1353 	movw	r3, #4435	; 0x1153
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e007      	b.n	8001704 <getFreq+0x470>
	case D8: frequency = 4699; break;
 80016f4:	f241 235b 	movw	r3, #4699	; 0x125b
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e003      	b.n	8001704 <getFreq+0x470>
	case Eb8: frequency = 4978; break;
 80016fc:	f241 3372 	movw	r3, #4978	; 0x1372
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	bf00      	nop
	}

	return frequency;
 8001704:	68fb      	ldr	r3, [r7, #12]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <getNoteName>:

static char* getNoteName(NOTE note){
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	char* notename = "null";
 800171e:	4bb0      	ldr	r3, [pc, #704]	; (80019e0 <getNoteName+0x2cc>)
 8001720:	60fb      	str	r3, [r7, #12]

	switch(note)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b63      	cmp	r3, #99	; 0x63
 8001726:	f200 8259 	bhi.w	8001bdc <getNoteName+0x4c8>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <getNoteName+0x1c>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	080018c1 	.word	0x080018c1
 8001734:	080018c7 	.word	0x080018c7
 8001738:	080018cd 	.word	0x080018cd
 800173c:	080018d3 	.word	0x080018d3
 8001740:	080018d9 	.word	0x080018d9
 8001744:	080018df 	.word	0x080018df
 8001748:	080018e5 	.word	0x080018e5
 800174c:	080018eb 	.word	0x080018eb
 8001750:	080018f1 	.word	0x080018f1
 8001754:	080018f7 	.word	0x080018f7
 8001758:	080018fd 	.word	0x080018fd
 800175c:	08001903 	.word	0x08001903
 8001760:	08001909 	.word	0x08001909
 8001764:	0800190f 	.word	0x0800190f
 8001768:	08001915 	.word	0x08001915
 800176c:	0800191b 	.word	0x0800191b
 8001770:	08001921 	.word	0x08001921
 8001774:	08001927 	.word	0x08001927
 8001778:	0800192d 	.word	0x0800192d
 800177c:	08001933 	.word	0x08001933
 8001780:	08001939 	.word	0x08001939
 8001784:	0800193f 	.word	0x0800193f
 8001788:	08001945 	.word	0x08001945
 800178c:	0800194b 	.word	0x0800194b
 8001790:	08001951 	.word	0x08001951
 8001794:	08001957 	.word	0x08001957
 8001798:	0800195d 	.word	0x0800195d
 800179c:	08001963 	.word	0x08001963
 80017a0:	08001969 	.word	0x08001969
 80017a4:	0800196f 	.word	0x0800196f
 80017a8:	08001975 	.word	0x08001975
 80017ac:	0800197b 	.word	0x0800197b
 80017b0:	08001981 	.word	0x08001981
 80017b4:	08001987 	.word	0x08001987
 80017b8:	0800198d 	.word	0x0800198d
 80017bc:	08001993 	.word	0x08001993
 80017c0:	08001999 	.word	0x08001999
 80017c4:	0800199f 	.word	0x0800199f
 80017c8:	080019a5 	.word	0x080019a5
 80017cc:	080019ab 	.word	0x080019ab
 80017d0:	080019b1 	.word	0x080019b1
 80017d4:	080019b7 	.word	0x080019b7
 80017d8:	080019bd 	.word	0x080019bd
 80017dc:	080019c3 	.word	0x080019c3
 80017e0:	080019c9 	.word	0x080019c9
 80017e4:	080019cf 	.word	0x080019cf
 80017e8:	080019d5 	.word	0x080019d5
 80017ec:	080019db 	.word	0x080019db
 80017f0:	08001aa5 	.word	0x08001aa5
 80017f4:	08001aab 	.word	0x08001aab
 80017f8:	08001ab1 	.word	0x08001ab1
 80017fc:	08001ab7 	.word	0x08001ab7
 8001800:	08001abd 	.word	0x08001abd
 8001804:	08001ac3 	.word	0x08001ac3
 8001808:	08001ac9 	.word	0x08001ac9
 800180c:	08001acf 	.word	0x08001acf
 8001810:	08001ad5 	.word	0x08001ad5
 8001814:	08001adb 	.word	0x08001adb
 8001818:	08001ae1 	.word	0x08001ae1
 800181c:	08001ae7 	.word	0x08001ae7
 8001820:	08001aed 	.word	0x08001aed
 8001824:	08001af3 	.word	0x08001af3
 8001828:	08001af9 	.word	0x08001af9
 800182c:	08001aff 	.word	0x08001aff
 8001830:	08001b05 	.word	0x08001b05
 8001834:	08001b0b 	.word	0x08001b0b
 8001838:	08001b11 	.word	0x08001b11
 800183c:	08001b17 	.word	0x08001b17
 8001840:	08001b1d 	.word	0x08001b1d
 8001844:	08001b23 	.word	0x08001b23
 8001848:	08001b29 	.word	0x08001b29
 800184c:	08001b2f 	.word	0x08001b2f
 8001850:	08001b35 	.word	0x08001b35
 8001854:	08001b3b 	.word	0x08001b3b
 8001858:	08001b41 	.word	0x08001b41
 800185c:	08001b47 	.word	0x08001b47
 8001860:	08001b4d 	.word	0x08001b4d
 8001864:	08001b53 	.word	0x08001b53
 8001868:	08001b59 	.word	0x08001b59
 800186c:	08001b5f 	.word	0x08001b5f
 8001870:	08001b65 	.word	0x08001b65
 8001874:	08001b6b 	.word	0x08001b6b
 8001878:	08001b71 	.word	0x08001b71
 800187c:	08001b77 	.word	0x08001b77
 8001880:	08001b7d 	.word	0x08001b7d
 8001884:	08001b83 	.word	0x08001b83
 8001888:	08001b89 	.word	0x08001b89
 800188c:	08001b8f 	.word	0x08001b8f
 8001890:	08001b95 	.word	0x08001b95
 8001894:	08001b9b 	.word	0x08001b9b
 8001898:	08001ba1 	.word	0x08001ba1
 800189c:	08001ba7 	.word	0x08001ba7
 80018a0:	08001bad 	.word	0x08001bad
 80018a4:	08001bb3 	.word	0x08001bb3
 80018a8:	08001bb9 	.word	0x08001bb9
 80018ac:	08001bbf 	.word	0x08001bbf
 80018b0:	08001bc5 	.word	0x08001bc5
 80018b4:	08001bcb 	.word	0x08001bcb
 80018b8:	08001bd1 	.word	0x08001bd1
 80018bc:	08001bd7 	.word	0x08001bd7
	{
	case C0: notename = "C0"; break;
 80018c0:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <getNoteName+0x2d0>)
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e18a      	b.n	8001bdc <getNoteName+0x4c8>
	case Db0: notename = "Db0"; break;
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <getNoteName+0x2d4>)
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e187      	b.n	8001bdc <getNoteName+0x4c8>
	case D0: notename = "D0"; break;
 80018cc:	4b47      	ldr	r3, [pc, #284]	; (80019ec <getNoteName+0x2d8>)
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e184      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb0: notename = "Eb0"; break;
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <getNoteName+0x2dc>)
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e181      	b.n	8001bdc <getNoteName+0x4c8>
	case E0: notename = "E0"; break;
 80018d8:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <getNoteName+0x2e0>)
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e17e      	b.n	8001bdc <getNoteName+0x4c8>
	case F0: notename = "F0"; break;
 80018de:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <getNoteName+0x2e4>)
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e17b      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb0: notename = "Gb0"; break;
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <getNoteName+0x2e8>)
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e178      	b.n	8001bdc <getNoteName+0x4c8>
	case G0: notename = "G0"; break;
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <getNoteName+0x2ec>)
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e175      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab0: notename = "Ab0"; break;
 80018f0:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <getNoteName+0x2f0>)
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e172      	b.n	8001bdc <getNoteName+0x4c8>
	case LA0: notename = "LA0"; break;
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <getNoteName+0x2f4>)
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e16f      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb0: notename = "Bb0"; break;
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <getNoteName+0x2f8>)
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e16c      	b.n	8001bdc <getNoteName+0x4c8>
	case B0: notename = "B0"; break;
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <getNoteName+0x2fc>)
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e169      	b.n	8001bdc <getNoteName+0x4c8>
	case C1: notename = "C1"; break;
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <getNoteName+0x300>)
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e166      	b.n	8001bdc <getNoteName+0x4c8>
	case Db1: notename = "Db1"; break;
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <getNoteName+0x304>)
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e163      	b.n	8001bdc <getNoteName+0x4c8>
	case D1: notename = "D1"; break;
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <getNoteName+0x308>)
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e160      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb1: notename = "Eb1"; break;
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <getNoteName+0x30c>)
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	e15d      	b.n	8001bdc <getNoteName+0x4c8>
	case E1: notename = "E1"; break;
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <getNoteName+0x310>)
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e15a      	b.n	8001bdc <getNoteName+0x4c8>
	case F1: notename = "F1"; break;
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <getNoteName+0x314>)
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e157      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb1: notename = "Gb1"; break;
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <getNoteName+0x318>)
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e154      	b.n	8001bdc <getNoteName+0x4c8>
	case G1: notename = "G1"; break;
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <getNoteName+0x31c>)
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e151      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab1: notename = "Ab1"; break;
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <getNoteName+0x320>)
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e14e      	b.n	8001bdc <getNoteName+0x4c8>
	case LA1: notename = "LA1"; break;
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <getNoteName+0x324>)
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e14b      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb1: notename = "Bb1"; break;
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <getNoteName+0x328>)
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e148      	b.n	8001bdc <getNoteName+0x4c8>
	case B1: notename = "B1"; break;
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <getNoteName+0x32c>)
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e145      	b.n	8001bdc <getNoteName+0x4c8>
	case C2: notename = "C2"; break;
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <getNoteName+0x330>)
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e142      	b.n	8001bdc <getNoteName+0x4c8>
	case Db2: notename = "Db2"; break;
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <getNoteName+0x334>)
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e13f      	b.n	8001bdc <getNoteName+0x4c8>
	case D2: notename = "D2"; break;
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <getNoteName+0x338>)
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e13c      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb2: notename = "Eb2"; break;
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <getNoteName+0x33c>)
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e139      	b.n	8001bdc <getNoteName+0x4c8>
	case E2: notename = "E2"; break;
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <getNoteName+0x340>)
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e136      	b.n	8001bdc <getNoteName+0x4c8>
	case F2: notename = "F2"; break;
 800196e:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <getNoteName+0x344>)
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e133      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb2: notename = "Gb2"; break;
 8001974:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <getNoteName+0x348>)
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e130      	b.n	8001bdc <getNoteName+0x4c8>
	case G2: notename = "G2"; break;
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <getNoteName+0x34c>)
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e12d      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab2: notename = "Ab2"; break;
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <getNoteName+0x350>)
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e12a      	b.n	8001bdc <getNoteName+0x4c8>
	case LA2: notename = "LA2"; break;
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <getNoteName+0x354>)
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e127      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb2: notename = "Bb2"; break;
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <getNoteName+0x358>)
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e124      	b.n	8001bdc <getNoteName+0x4c8>
	case B2: notename = "B2"; break;
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <getNoteName+0x35c>)
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e121      	b.n	8001bdc <getNoteName+0x4c8>
	case C3: notename = "C3"; break;
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <getNoteName+0x360>)
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e11e      	b.n	8001bdc <getNoteName+0x4c8>
	case Db3: notename = "Db3"; break;
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <getNoteName+0x364>)
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e11b      	b.n	8001bdc <getNoteName+0x4c8>
	case D3: notename = "D3"; break;
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <getNoteName+0x368>)
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e118      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb3: notename = "Eb3"; break;
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <getNoteName+0x36c>)
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e115      	b.n	8001bdc <getNoteName+0x4c8>
	case E3: notename = "E3"; break;
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <getNoteName+0x370>)
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e112      	b.n	8001bdc <getNoteName+0x4c8>
	case F3: notename = "F3"; break;
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <getNoteName+0x374>)
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e10f      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb3: notename = "Gb3"; break;
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <getNoteName+0x378>)
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e10c      	b.n	8001bdc <getNoteName+0x4c8>
	case G3: notename = "G3"; break;
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <getNoteName+0x37c>)
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e109      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab3: notename = "Ab3"; break;
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <getNoteName+0x380>)
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e106      	b.n	8001bdc <getNoteName+0x4c8>
	case LA3: notename = "LA3"; break;
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <getNoteName+0x384>)
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e103      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb3: notename = "Bb3"; break;
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <getNoteName+0x388>)
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e100      	b.n	8001bdc <getNoteName+0x4c8>
	case B3: notename = "B3"; break;
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <getNoteName+0x38c>)
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e0fd      	b.n	8001bdc <getNoteName+0x4c8>
 80019e0:	080026a4 	.word	0x080026a4
 80019e4:	080026ac 	.word	0x080026ac
 80019e8:	080026b0 	.word	0x080026b0
 80019ec:	080026b4 	.word	0x080026b4
 80019f0:	080026b8 	.word	0x080026b8
 80019f4:	080026bc 	.word	0x080026bc
 80019f8:	080026c0 	.word	0x080026c0
 80019fc:	080026c4 	.word	0x080026c4
 8001a00:	080026c8 	.word	0x080026c8
 8001a04:	080026cc 	.word	0x080026cc
 8001a08:	080026d0 	.word	0x080026d0
 8001a0c:	080026d4 	.word	0x080026d4
 8001a10:	080026d8 	.word	0x080026d8
 8001a14:	080026dc 	.word	0x080026dc
 8001a18:	080026e0 	.word	0x080026e0
 8001a1c:	080026e4 	.word	0x080026e4
 8001a20:	080026e8 	.word	0x080026e8
 8001a24:	080026ec 	.word	0x080026ec
 8001a28:	080026f0 	.word	0x080026f0
 8001a2c:	080026f4 	.word	0x080026f4
 8001a30:	080026f8 	.word	0x080026f8
 8001a34:	080026fc 	.word	0x080026fc
 8001a38:	08002700 	.word	0x08002700
 8001a3c:	08002704 	.word	0x08002704
 8001a40:	08002708 	.word	0x08002708
 8001a44:	0800270c 	.word	0x0800270c
 8001a48:	08002710 	.word	0x08002710
 8001a4c:	08002714 	.word	0x08002714
 8001a50:	08002718 	.word	0x08002718
 8001a54:	0800271c 	.word	0x0800271c
 8001a58:	08002720 	.word	0x08002720
 8001a5c:	08002724 	.word	0x08002724
 8001a60:	08002728 	.word	0x08002728
 8001a64:	0800272c 	.word	0x0800272c
 8001a68:	08002730 	.word	0x08002730
 8001a6c:	08002734 	.word	0x08002734
 8001a70:	08002738 	.word	0x08002738
 8001a74:	0800273c 	.word	0x0800273c
 8001a78:	08002740 	.word	0x08002740
 8001a7c:	08002744 	.word	0x08002744
 8001a80:	08002748 	.word	0x08002748
 8001a84:	0800274c 	.word	0x0800274c
 8001a88:	08002750 	.word	0x08002750
 8001a8c:	08002754 	.word	0x08002754
 8001a90:	08002758 	.word	0x08002758
 8001a94:	0800275c 	.word	0x0800275c
 8001a98:	08002760 	.word	0x08002760
 8001a9c:	08002764 	.word	0x08002764
 8001aa0:	08002768 	.word	0x08002768
	case C4: notename = "C4"; break;
 8001aa4:	4b51      	ldr	r3, [pc, #324]	; (8001bec <getNoteName+0x4d8>)
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e098      	b.n	8001bdc <getNoteName+0x4c8>
	case Db4: notename = "Db4"; break;
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <getNoteName+0x4dc>)
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e095      	b.n	8001bdc <getNoteName+0x4c8>
	case D4: notename = "D4"; break;
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <getNoteName+0x4e0>)
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e092      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb4: notename = "Eb4"; break;
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <getNoteName+0x4e4>)
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e08f      	b.n	8001bdc <getNoteName+0x4c8>
	case E4: notename = "E4"; break;
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <getNoteName+0x4e8>)
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e08c      	b.n	8001bdc <getNoteName+0x4c8>
	case F4: notename = "F4"; break;
 8001ac2:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <getNoteName+0x4ec>)
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e089      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb4: notename = "Gb4"; break;
 8001ac8:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <getNoteName+0x4f0>)
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e086      	b.n	8001bdc <getNoteName+0x4c8>
	case G4: notename = "G4"; break;
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <getNoteName+0x4f4>)
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e083      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab4: notename = "Ab4"; break;
 8001ad4:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <getNoteName+0x4f8>)
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e080      	b.n	8001bdc <getNoteName+0x4c8>
	case LA4: notename = "LA4"; break;
 8001ada:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <getNoteName+0x4fc>)
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e07d      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb4: notename = "Bb4"; break;
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <getNoteName+0x500>)
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e07a      	b.n	8001bdc <getNoteName+0x4c8>
	case B4: notename = "B4"; break;
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <getNoteName+0x504>)
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e077      	b.n	8001bdc <getNoteName+0x4c8>
	case C5: notename = "C5"; break;
 8001aec:	4b4b      	ldr	r3, [pc, #300]	; (8001c1c <getNoteName+0x508>)
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e074      	b.n	8001bdc <getNoteName+0x4c8>
	case Db5: notename = "Db5"; break;
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <getNoteName+0x50c>)
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e071      	b.n	8001bdc <getNoteName+0x4c8>
	case D5: notename = "D5"; break;
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <getNoteName+0x510>)
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e06e      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb5: notename = "Eb5"; break;
 8001afe:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <getNoteName+0x514>)
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e06b      	b.n	8001bdc <getNoteName+0x4c8>
	case E5: notename = "E5"; break;
 8001b04:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <getNoteName+0x518>)
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e068      	b.n	8001bdc <getNoteName+0x4c8>
	case F5: notename = "F5"; break;
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <getNoteName+0x51c>)
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e065      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb5: notename = "Gb5"; break;
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <getNoteName+0x520>)
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e062      	b.n	8001bdc <getNoteName+0x4c8>
	case G5: notename = "G5"; break;
 8001b16:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <getNoteName+0x524>)
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e05f      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab5: notename = "Ab5"; break;
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <getNoteName+0x528>)
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e05c      	b.n	8001bdc <getNoteName+0x4c8>
	case LA5: notename = "LA5"; break;
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <getNoteName+0x52c>)
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e059      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb5: notename = "Bb5"; break;
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <getNoteName+0x530>)
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e056      	b.n	8001bdc <getNoteName+0x4c8>
	case B5: notename = "B5"; break;
 8001b2e:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <getNoteName+0x534>)
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e053      	b.n	8001bdc <getNoteName+0x4c8>
	case C6: notename = "C6"; break;
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <getNoteName+0x538>)
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e050      	b.n	8001bdc <getNoteName+0x4c8>
	case Db6: notename = "Db6"; break;
 8001b3a:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <getNoteName+0x53c>)
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e04d      	b.n	8001bdc <getNoteName+0x4c8>
	case D6: notename = "D6"; break;
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <getNoteName+0x540>)
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e04a      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb6: notename = "Eb5"; break;
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <getNoteName+0x514>)
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e047      	b.n	8001bdc <getNoteName+0x4c8>
	case E6: notename = "E6"; break;
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <getNoteName+0x544>)
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e044      	b.n	8001bdc <getNoteName+0x4c8>
	case F6: notename = "F6"; break;
 8001b52:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <getNoteName+0x548>)
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e041      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb6: notename = "Gb6"; break;
 8001b58:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <getNoteName+0x54c>)
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e03e      	b.n	8001bdc <getNoteName+0x4c8>
	case G6: notename = "G6"; break;
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <getNoteName+0x550>)
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e03b      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab6: notename = "Ab6"; break;
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <getNoteName+0x554>)
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e038      	b.n	8001bdc <getNoteName+0x4c8>
	case LA6: notename = "LA6"; break;
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <getNoteName+0x558>)
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e035      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb6: notename = "Bb6"; break;
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <getNoteName+0x55c>)
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e032      	b.n	8001bdc <getNoteName+0x4c8>
	case B6: notename = "B6"; break;
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <getNoteName+0x560>)
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e02f      	b.n	8001bdc <getNoteName+0x4c8>
	case C7: notename = "C7"; break;
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <getNoteName+0x564>)
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e02c      	b.n	8001bdc <getNoteName+0x4c8>
	case Db7: notename = "Db7"; break;
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <getNoteName+0x568>)
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e029      	b.n	8001bdc <getNoteName+0x4c8>
	case D7: notename = "D7"; break;
 8001b88:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <getNoteName+0x56c>)
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e026      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb7: notename = "Eb7"; break;
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <getNoteName+0x570>)
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e023      	b.n	8001bdc <getNoteName+0x4c8>
	case E7: notename = "E7"; break;
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <getNoteName+0x574>)
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e020      	b.n	8001bdc <getNoteName+0x4c8>
	case F7: notename = "F7"; break;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <getNoteName+0x578>)
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e01d      	b.n	8001bdc <getNoteName+0x4c8>
	case Gb7: notename = "Gb7"; break;
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <getNoteName+0x57c>)
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e01a      	b.n	8001bdc <getNoteName+0x4c8>
	case G7: notename = "G7"; break;
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <getNoteName+0x580>)
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e017      	b.n	8001bdc <getNoteName+0x4c8>
	case Ab7: notename = "Ab7"; break;
 8001bac:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <getNoteName+0x584>)
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e014      	b.n	8001bdc <getNoteName+0x4c8>
	case LA7: notename = "LA7"; break;
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <getNoteName+0x588>)
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e011      	b.n	8001bdc <getNoteName+0x4c8>
	case Bb7: notename = "Bb7"; break;
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <getNoteName+0x58c>)
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e00e      	b.n	8001bdc <getNoteName+0x4c8>
	case B7: notename = "B7"; break;
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <getNoteName+0x590>)
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e00b      	b.n	8001bdc <getNoteName+0x4c8>
	case C8: notename = "C8"; break;
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <getNoteName+0x594>)
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e008      	b.n	8001bdc <getNoteName+0x4c8>
	case Db8: notename = "Db8"; break;
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <getNoteName+0x598>)
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e005      	b.n	8001bdc <getNoteName+0x4c8>
	case D8: notename = "D8"; break;
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <getNoteName+0x59c>)
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e002      	b.n	8001bdc <getNoteName+0x4c8>
	case Eb8: notename = "Eb8"; break;
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <getNoteName+0x5a0>)
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	bf00      	nop
	}

	return notename;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	0800276c 	.word	0x0800276c
 8001bf0:	08002770 	.word	0x08002770
 8001bf4:	08002774 	.word	0x08002774
 8001bf8:	08002778 	.word	0x08002778
 8001bfc:	0800277c 	.word	0x0800277c
 8001c00:	08002780 	.word	0x08002780
 8001c04:	08002784 	.word	0x08002784
 8001c08:	08002788 	.word	0x08002788
 8001c0c:	0800278c 	.word	0x0800278c
 8001c10:	08002790 	.word	0x08002790
 8001c14:	08002794 	.word	0x08002794
 8001c18:	08002798 	.word	0x08002798
 8001c1c:	0800279c 	.word	0x0800279c
 8001c20:	080027a0 	.word	0x080027a0
 8001c24:	080027a4 	.word	0x080027a4
 8001c28:	080027a8 	.word	0x080027a8
 8001c2c:	080027ac 	.word	0x080027ac
 8001c30:	080027b0 	.word	0x080027b0
 8001c34:	080027b4 	.word	0x080027b4
 8001c38:	080027b8 	.word	0x080027b8
 8001c3c:	080027bc 	.word	0x080027bc
 8001c40:	080027c0 	.word	0x080027c0
 8001c44:	080027c4 	.word	0x080027c4
 8001c48:	080027c8 	.word	0x080027c8
 8001c4c:	080027cc 	.word	0x080027cc
 8001c50:	080027d0 	.word	0x080027d0
 8001c54:	080027d4 	.word	0x080027d4
 8001c58:	080027d8 	.word	0x080027d8
 8001c5c:	080027dc 	.word	0x080027dc
 8001c60:	080027e0 	.word	0x080027e0
 8001c64:	080027e4 	.word	0x080027e4
 8001c68:	080027e8 	.word	0x080027e8
 8001c6c:	080027ec 	.word	0x080027ec
 8001c70:	080027f0 	.word	0x080027f0
 8001c74:	080027f4 	.word	0x080027f4
 8001c78:	080027f8 	.word	0x080027f8
 8001c7c:	080027fc 	.word	0x080027fc
 8001c80:	08002800 	.word	0x08002800
 8001c84:	08002804 	.word	0x08002804
 8001c88:	08002808 	.word	0x08002808
 8001c8c:	0800280c 	.word	0x0800280c
 8001c90:	08002810 	.word	0x08002810
 8001c94:	08002814 	.word	0x08002814
 8001c98:	08002818 	.word	0x08002818
 8001c9c:	0800281c 	.word	0x0800281c
 8001ca0:	08002820 	.word	0x08002820
 8001ca4:	08002824 	.word	0x08002824
 8001ca8:	08002828 	.word	0x08002828
 8001cac:	0800282c 	.word	0x0800282c
 8001cb0:	08002830 	.word	0x08002830
 8001cb4:	08002834 	.word	0x08002834

08001cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopForever+0xe>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopForever+0x16>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ce2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001ce6:	f000 f817 	bl	8001d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cea:	f7fe ff07 	bl	8000afc <main>

08001cee <LoopForever>:

LoopForever:
    b LoopForever
 8001cee:	e7fe      	b.n	8001cee <LoopForever>
  ldr   r0, =_estack
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001cfc:	08002874 	.word	0x08002874
  ldr r2, =_sbss
 8001d00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d04:	20000098 	.word	0x20000098

08001d08 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <__errno>:
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <__errno+0x8>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <__libc_init_array>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	4e0d      	ldr	r6, [pc, #52]	; (8001d50 <__libc_init_array+0x38>)
 8001d1c:	4c0d      	ldr	r4, [pc, #52]	; (8001d54 <__libc_init_array+0x3c>)
 8001d1e:	1ba4      	subs	r4, r4, r6
 8001d20:	10a4      	asrs	r4, r4, #2
 8001d22:	2500      	movs	r5, #0
 8001d24:	42a5      	cmp	r5, r4
 8001d26:	d109      	bne.n	8001d3c <__libc_init_array+0x24>
 8001d28:	4e0b      	ldr	r6, [pc, #44]	; (8001d58 <__libc_init_array+0x40>)
 8001d2a:	4c0c      	ldr	r4, [pc, #48]	; (8001d5c <__libc_init_array+0x44>)
 8001d2c:	f000 fc1e 	bl	800256c <_init>
 8001d30:	1ba4      	subs	r4, r4, r6
 8001d32:	10a4      	asrs	r4, r4, #2
 8001d34:	2500      	movs	r5, #0
 8001d36:	42a5      	cmp	r5, r4
 8001d38:	d105      	bne.n	8001d46 <__libc_init_array+0x2e>
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d40:	4798      	blx	r3
 8001d42:	3501      	adds	r5, #1
 8001d44:	e7ee      	b.n	8001d24 <__libc_init_array+0xc>
 8001d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d4a:	4798      	blx	r3
 8001d4c:	3501      	adds	r5, #1
 8001d4e:	e7f2      	b.n	8001d36 <__libc_init_array+0x1e>
 8001d50:	0800286c 	.word	0x0800286c
 8001d54:	0800286c 	.word	0x0800286c
 8001d58:	0800286c 	.word	0x0800286c
 8001d5c:	08002870 	.word	0x08002870

08001d60 <siprintf>:
 8001d60:	b40e      	push	{r1, r2, r3}
 8001d62:	b500      	push	{lr}
 8001d64:	b09c      	sub	sp, #112	; 0x70
 8001d66:	ab1d      	add	r3, sp, #116	; 0x74
 8001d68:	9002      	str	r0, [sp, #8]
 8001d6a:	9006      	str	r0, [sp, #24]
 8001d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <siprintf+0x38>)
 8001d72:	9107      	str	r1, [sp, #28]
 8001d74:	9104      	str	r1, [sp, #16]
 8001d76:	4909      	ldr	r1, [pc, #36]	; (8001d9c <siprintf+0x3c>)
 8001d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d7c:	9105      	str	r1, [sp, #20]
 8001d7e:	6800      	ldr	r0, [r0, #0]
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	a902      	add	r1, sp, #8
 8001d84:	f000 f866 	bl	8001e54 <_svfiprintf_r>
 8001d88:	9b02      	ldr	r3, [sp, #8]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	b01c      	add	sp, #112	; 0x70
 8001d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d94:	b003      	add	sp, #12
 8001d96:	4770      	bx	lr
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	ffff0208 	.word	0xffff0208

08001da0 <__ssputs_r>:
 8001da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001da4:	688e      	ldr	r6, [r1, #8]
 8001da6:	429e      	cmp	r6, r3
 8001da8:	4682      	mov	sl, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	4690      	mov	r8, r2
 8001dae:	4699      	mov	r9, r3
 8001db0:	d837      	bhi.n	8001e22 <__ssputs_r+0x82>
 8001db2:	898a      	ldrh	r2, [r1, #12]
 8001db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001db8:	d031      	beq.n	8001e1e <__ssputs_r+0x7e>
 8001dba:	6825      	ldr	r5, [r4, #0]
 8001dbc:	6909      	ldr	r1, [r1, #16]
 8001dbe:	1a6f      	subs	r7, r5, r1
 8001dc0:	6965      	ldr	r5, [r4, #20]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001dcc:	f109 0301 	add.w	r3, r9, #1
 8001dd0:	443b      	add	r3, r7
 8001dd2:	429d      	cmp	r5, r3
 8001dd4:	bf38      	it	cc
 8001dd6:	461d      	movcc	r5, r3
 8001dd8:	0553      	lsls	r3, r2, #21
 8001dda:	d530      	bpl.n	8001e3e <__ssputs_r+0x9e>
 8001ddc:	4629      	mov	r1, r5
 8001dde:	f000 fb2b 	bl	8002438 <_malloc_r>
 8001de2:	4606      	mov	r6, r0
 8001de4:	b950      	cbnz	r0, 8001dfc <__ssputs_r+0x5c>
 8001de6:	230c      	movs	r3, #12
 8001de8:	f8ca 3000 	str.w	r3, [sl]
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dfc:	463a      	mov	r2, r7
 8001dfe:	6921      	ldr	r1, [r4, #16]
 8001e00:	f000 faa8 	bl	8002354 <memcpy>
 8001e04:	89a3      	ldrh	r3, [r4, #12]
 8001e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0e:	81a3      	strh	r3, [r4, #12]
 8001e10:	6126      	str	r6, [r4, #16]
 8001e12:	6165      	str	r5, [r4, #20]
 8001e14:	443e      	add	r6, r7
 8001e16:	1bed      	subs	r5, r5, r7
 8001e18:	6026      	str	r6, [r4, #0]
 8001e1a:	60a5      	str	r5, [r4, #8]
 8001e1c:	464e      	mov	r6, r9
 8001e1e:	454e      	cmp	r6, r9
 8001e20:	d900      	bls.n	8001e24 <__ssputs_r+0x84>
 8001e22:	464e      	mov	r6, r9
 8001e24:	4632      	mov	r2, r6
 8001e26:	4641      	mov	r1, r8
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	f000 fa9e 	bl	800236a <memmove>
 8001e2e:	68a3      	ldr	r3, [r4, #8]
 8001e30:	1b9b      	subs	r3, r3, r6
 8001e32:	60a3      	str	r3, [r4, #8]
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	441e      	add	r6, r3
 8001e38:	6026      	str	r6, [r4, #0]
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e7dc      	b.n	8001df8 <__ssputs_r+0x58>
 8001e3e:	462a      	mov	r2, r5
 8001e40:	f000 fb54 	bl	80024ec <_realloc_r>
 8001e44:	4606      	mov	r6, r0
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d1e2      	bne.n	8001e10 <__ssputs_r+0x70>
 8001e4a:	6921      	ldr	r1, [r4, #16]
 8001e4c:	4650      	mov	r0, sl
 8001e4e:	f000 faa5 	bl	800239c <_free_r>
 8001e52:	e7c8      	b.n	8001de6 <__ssputs_r+0x46>

08001e54 <_svfiprintf_r>:
 8001e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e58:	461d      	mov	r5, r3
 8001e5a:	898b      	ldrh	r3, [r1, #12]
 8001e5c:	061f      	lsls	r7, r3, #24
 8001e5e:	b09d      	sub	sp, #116	; 0x74
 8001e60:	4680      	mov	r8, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	4616      	mov	r6, r2
 8001e66:	d50f      	bpl.n	8001e88 <_svfiprintf_r+0x34>
 8001e68:	690b      	ldr	r3, [r1, #16]
 8001e6a:	b96b      	cbnz	r3, 8001e88 <_svfiprintf_r+0x34>
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	f000 fae3 	bl	8002438 <_malloc_r>
 8001e72:	6020      	str	r0, [r4, #0]
 8001e74:	6120      	str	r0, [r4, #16]
 8001e76:	b928      	cbnz	r0, 8001e84 <_svfiprintf_r+0x30>
 8001e78:	230c      	movs	r3, #12
 8001e7a:	f8c8 3000 	str.w	r3, [r8]
 8001e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e82:	e0c8      	b.n	8002016 <_svfiprintf_r+0x1c2>
 8001e84:	2340      	movs	r3, #64	; 0x40
 8001e86:	6163      	str	r3, [r4, #20]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e92:	2330      	movs	r3, #48	; 0x30
 8001e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e98:	9503      	str	r5, [sp, #12]
 8001e9a:	f04f 0b01 	mov.w	fp, #1
 8001e9e:	4637      	mov	r7, r6
 8001ea0:	463d      	mov	r5, r7
 8001ea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001ea6:	b10b      	cbz	r3, 8001eac <_svfiprintf_r+0x58>
 8001ea8:	2b25      	cmp	r3, #37	; 0x25
 8001eaa:	d13e      	bne.n	8001f2a <_svfiprintf_r+0xd6>
 8001eac:	ebb7 0a06 	subs.w	sl, r7, r6
 8001eb0:	d00b      	beq.n	8001eca <_svfiprintf_r+0x76>
 8001eb2:	4653      	mov	r3, sl
 8001eb4:	4632      	mov	r2, r6
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	4640      	mov	r0, r8
 8001eba:	f7ff ff71 	bl	8001da0 <__ssputs_r>
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	f000 80a4 	beq.w	800200c <_svfiprintf_r+0x1b8>
 8001ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ec6:	4453      	add	r3, sl
 8001ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8001eca:	783b      	ldrb	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 809d 	beq.w	800200c <_svfiprintf_r+0x1b8>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001edc:	9304      	str	r3, [sp, #16]
 8001ede:	9307      	str	r3, [sp, #28]
 8001ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8001ee6:	462f      	mov	r7, r5
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001eee:	4850      	ldr	r0, [pc, #320]	; (8002030 <_svfiprintf_r+0x1dc>)
 8001ef0:	f7fe f98e 	bl	8000210 <memchr>
 8001ef4:	9b04      	ldr	r3, [sp, #16]
 8001ef6:	b9d0      	cbnz	r0, 8001f2e <_svfiprintf_r+0xda>
 8001ef8:	06d9      	lsls	r1, r3, #27
 8001efa:	bf44      	itt	mi
 8001efc:	2220      	movmi	r2, #32
 8001efe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f02:	071a      	lsls	r2, r3, #28
 8001f04:	bf44      	itt	mi
 8001f06:	222b      	movmi	r2, #43	; 0x2b
 8001f08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f0c:	782a      	ldrb	r2, [r5, #0]
 8001f0e:	2a2a      	cmp	r2, #42	; 0x2a
 8001f10:	d015      	beq.n	8001f3e <_svfiprintf_r+0xea>
 8001f12:	9a07      	ldr	r2, [sp, #28]
 8001f14:	462f      	mov	r7, r5
 8001f16:	2000      	movs	r0, #0
 8001f18:	250a      	movs	r5, #10
 8001f1a:	4639      	mov	r1, r7
 8001f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f20:	3b30      	subs	r3, #48	; 0x30
 8001f22:	2b09      	cmp	r3, #9
 8001f24:	d94d      	bls.n	8001fc2 <_svfiprintf_r+0x16e>
 8001f26:	b1b8      	cbz	r0, 8001f58 <_svfiprintf_r+0x104>
 8001f28:	e00f      	b.n	8001f4a <_svfiprintf_r+0xf6>
 8001f2a:	462f      	mov	r7, r5
 8001f2c:	e7b8      	b.n	8001ea0 <_svfiprintf_r+0x4c>
 8001f2e:	4a40      	ldr	r2, [pc, #256]	; (8002030 <_svfiprintf_r+0x1dc>)
 8001f30:	1a80      	subs	r0, r0, r2
 8001f32:	fa0b f000 	lsl.w	r0, fp, r0
 8001f36:	4318      	orrs	r0, r3
 8001f38:	9004      	str	r0, [sp, #16]
 8001f3a:	463d      	mov	r5, r7
 8001f3c:	e7d3      	b.n	8001ee6 <_svfiprintf_r+0x92>
 8001f3e:	9a03      	ldr	r2, [sp, #12]
 8001f40:	1d11      	adds	r1, r2, #4
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	9103      	str	r1, [sp, #12]
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	db01      	blt.n	8001f4e <_svfiprintf_r+0xfa>
 8001f4a:	9207      	str	r2, [sp, #28]
 8001f4c:	e004      	b.n	8001f58 <_svfiprintf_r+0x104>
 8001f4e:	4252      	negs	r2, r2
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	9207      	str	r2, [sp, #28]
 8001f56:	9304      	str	r3, [sp, #16]
 8001f58:	783b      	ldrb	r3, [r7, #0]
 8001f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f5c:	d10c      	bne.n	8001f78 <_svfiprintf_r+0x124>
 8001f5e:	787b      	ldrb	r3, [r7, #1]
 8001f60:	2b2a      	cmp	r3, #42	; 0x2a
 8001f62:	d133      	bne.n	8001fcc <_svfiprintf_r+0x178>
 8001f64:	9b03      	ldr	r3, [sp, #12]
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	9203      	str	r2, [sp, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bfb8      	it	lt
 8001f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f74:	3702      	adds	r7, #2
 8001f76:	9305      	str	r3, [sp, #20]
 8001f78:	4d2e      	ldr	r5, [pc, #184]	; (8002034 <_svfiprintf_r+0x1e0>)
 8001f7a:	7839      	ldrb	r1, [r7, #0]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f7fe f946 	bl	8000210 <memchr>
 8001f84:	b138      	cbz	r0, 8001f96 <_svfiprintf_r+0x142>
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	1b40      	subs	r0, r0, r5
 8001f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8001f8e:	9b04      	ldr	r3, [sp, #16]
 8001f90:	4303      	orrs	r3, r0
 8001f92:	3701      	adds	r7, #1
 8001f94:	9304      	str	r3, [sp, #16]
 8001f96:	7839      	ldrb	r1, [r7, #0]
 8001f98:	4827      	ldr	r0, [pc, #156]	; (8002038 <_svfiprintf_r+0x1e4>)
 8001f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	1c7e      	adds	r6, r7, #1
 8001fa2:	f7fe f935 	bl	8000210 <memchr>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d038      	beq.n	800201c <_svfiprintf_r+0x1c8>
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <_svfiprintf_r+0x1e8>)
 8001fac:	bb13      	cbnz	r3, 8001ff4 <_svfiprintf_r+0x1a0>
 8001fae:	9b03      	ldr	r3, [sp, #12]
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	f023 0307 	bic.w	r3, r3, #7
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	9303      	str	r3, [sp, #12]
 8001fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fbc:	444b      	add	r3, r9
 8001fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8001fc0:	e76d      	b.n	8001e9e <_svfiprintf_r+0x4a>
 8001fc2:	fb05 3202 	mla	r2, r5, r2, r3
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	460f      	mov	r7, r1
 8001fca:	e7a6      	b.n	8001f1a <_svfiprintf_r+0xc6>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	3701      	adds	r7, #1
 8001fd0:	9305      	str	r3, [sp, #20]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	250a      	movs	r5, #10
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fdc:	3a30      	subs	r2, #48	; 0x30
 8001fde:	2a09      	cmp	r2, #9
 8001fe0:	d903      	bls.n	8001fea <_svfiprintf_r+0x196>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0c8      	beq.n	8001f78 <_svfiprintf_r+0x124>
 8001fe6:	9105      	str	r1, [sp, #20]
 8001fe8:	e7c6      	b.n	8001f78 <_svfiprintf_r+0x124>
 8001fea:	fb05 2101 	mla	r1, r5, r1, r2
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4607      	mov	r7, r0
 8001ff2:	e7f0      	b.n	8001fd6 <_svfiprintf_r+0x182>
 8001ff4:	ab03      	add	r3, sp, #12
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4622      	mov	r2, r4
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_svfiprintf_r+0x1ec>)
 8001ffc:	a904      	add	r1, sp, #16
 8001ffe:	4640      	mov	r0, r8
 8002000:	f3af 8000 	nop.w
 8002004:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002008:	4681      	mov	r9, r0
 800200a:	d1d6      	bne.n	8001fba <_svfiprintf_r+0x166>
 800200c:	89a3      	ldrh	r3, [r4, #12]
 800200e:	065b      	lsls	r3, r3, #25
 8002010:	f53f af35 	bmi.w	8001e7e <_svfiprintf_r+0x2a>
 8002014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002016:	b01d      	add	sp, #116	; 0x74
 8002018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800201c:	ab03      	add	r3, sp, #12
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4622      	mov	r2, r4
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_svfiprintf_r+0x1ec>)
 8002024:	a904      	add	r1, sp, #16
 8002026:	4640      	mov	r0, r8
 8002028:	f000 f882 	bl	8002130 <_printf_i>
 800202c:	e7ea      	b.n	8002004 <_svfiprintf_r+0x1b0>
 800202e:	bf00      	nop
 8002030:	08002838 	.word	0x08002838
 8002034:	0800283e 	.word	0x0800283e
 8002038:	08002842 	.word	0x08002842
 800203c:	00000000 	.word	0x00000000
 8002040:	08001da1 	.word	0x08001da1

08002044 <_printf_common>:
 8002044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002048:	4691      	mov	r9, r2
 800204a:	461f      	mov	r7, r3
 800204c:	688a      	ldr	r2, [r1, #8]
 800204e:	690b      	ldr	r3, [r1, #16]
 8002050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002054:	4293      	cmp	r3, r2
 8002056:	bfb8      	it	lt
 8002058:	4613      	movlt	r3, r2
 800205a:	f8c9 3000 	str.w	r3, [r9]
 800205e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002062:	4606      	mov	r6, r0
 8002064:	460c      	mov	r4, r1
 8002066:	b112      	cbz	r2, 800206e <_printf_common+0x2a>
 8002068:	3301      	adds	r3, #1
 800206a:	f8c9 3000 	str.w	r3, [r9]
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	0699      	lsls	r1, r3, #26
 8002072:	bf42      	ittt	mi
 8002074:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002078:	3302      	addmi	r3, #2
 800207a:	f8c9 3000 	strmi.w	r3, [r9]
 800207e:	6825      	ldr	r5, [r4, #0]
 8002080:	f015 0506 	ands.w	r5, r5, #6
 8002084:	d107      	bne.n	8002096 <_printf_common+0x52>
 8002086:	f104 0a19 	add.w	sl, r4, #25
 800208a:	68e3      	ldr	r3, [r4, #12]
 800208c:	f8d9 2000 	ldr.w	r2, [r9]
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	42ab      	cmp	r3, r5
 8002094:	dc28      	bgt.n	80020e8 <_printf_common+0xa4>
 8002096:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	3300      	adds	r3, #0
 800209e:	bf18      	it	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	0692      	lsls	r2, r2, #26
 80020a4:	d42d      	bmi.n	8002102 <_printf_common+0xbe>
 80020a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020aa:	4639      	mov	r1, r7
 80020ac:	4630      	mov	r0, r6
 80020ae:	47c0      	blx	r8
 80020b0:	3001      	adds	r0, #1
 80020b2:	d020      	beq.n	80020f6 <_printf_common+0xb2>
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	68e5      	ldr	r5, [r4, #12]
 80020b8:	f8d9 2000 	ldr.w	r2, [r9]
 80020bc:	f003 0306 	and.w	r3, r3, #6
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	bf08      	it	eq
 80020c4:	1aad      	subeq	r5, r5, r2
 80020c6:	68a3      	ldr	r3, [r4, #8]
 80020c8:	6922      	ldr	r2, [r4, #16]
 80020ca:	bf0c      	ite	eq
 80020cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020d0:	2500      	movne	r5, #0
 80020d2:	4293      	cmp	r3, r2
 80020d4:	bfc4      	itt	gt
 80020d6:	1a9b      	subgt	r3, r3, r2
 80020d8:	18ed      	addgt	r5, r5, r3
 80020da:	f04f 0900 	mov.w	r9, #0
 80020de:	341a      	adds	r4, #26
 80020e0:	454d      	cmp	r5, r9
 80020e2:	d11a      	bne.n	800211a <_printf_common+0xd6>
 80020e4:	2000      	movs	r0, #0
 80020e6:	e008      	b.n	80020fa <_printf_common+0xb6>
 80020e8:	2301      	movs	r3, #1
 80020ea:	4652      	mov	r2, sl
 80020ec:	4639      	mov	r1, r7
 80020ee:	4630      	mov	r0, r6
 80020f0:	47c0      	blx	r8
 80020f2:	3001      	adds	r0, #1
 80020f4:	d103      	bne.n	80020fe <_printf_common+0xba>
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295
 80020fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fe:	3501      	adds	r5, #1
 8002100:	e7c3      	b.n	800208a <_printf_common+0x46>
 8002102:	18e1      	adds	r1, r4, r3
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	2030      	movs	r0, #48	; 0x30
 8002108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800210c:	4422      	add	r2, r4
 800210e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002112:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002116:	3302      	adds	r3, #2
 8002118:	e7c5      	b.n	80020a6 <_printf_common+0x62>
 800211a:	2301      	movs	r3, #1
 800211c:	4622      	mov	r2, r4
 800211e:	4639      	mov	r1, r7
 8002120:	4630      	mov	r0, r6
 8002122:	47c0      	blx	r8
 8002124:	3001      	adds	r0, #1
 8002126:	d0e6      	beq.n	80020f6 <_printf_common+0xb2>
 8002128:	f109 0901 	add.w	r9, r9, #1
 800212c:	e7d8      	b.n	80020e0 <_printf_common+0x9c>
	...

08002130 <_printf_i>:
 8002130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002134:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002138:	460c      	mov	r4, r1
 800213a:	7e09      	ldrb	r1, [r1, #24]
 800213c:	b085      	sub	sp, #20
 800213e:	296e      	cmp	r1, #110	; 0x6e
 8002140:	4617      	mov	r7, r2
 8002142:	4606      	mov	r6, r0
 8002144:	4698      	mov	r8, r3
 8002146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002148:	f000 80b3 	beq.w	80022b2 <_printf_i+0x182>
 800214c:	d822      	bhi.n	8002194 <_printf_i+0x64>
 800214e:	2963      	cmp	r1, #99	; 0x63
 8002150:	d036      	beq.n	80021c0 <_printf_i+0x90>
 8002152:	d80a      	bhi.n	800216a <_printf_i+0x3a>
 8002154:	2900      	cmp	r1, #0
 8002156:	f000 80b9 	beq.w	80022cc <_printf_i+0x19c>
 800215a:	2958      	cmp	r1, #88	; 0x58
 800215c:	f000 8083 	beq.w	8002266 <_printf_i+0x136>
 8002160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002164:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002168:	e032      	b.n	80021d0 <_printf_i+0xa0>
 800216a:	2964      	cmp	r1, #100	; 0x64
 800216c:	d001      	beq.n	8002172 <_printf_i+0x42>
 800216e:	2969      	cmp	r1, #105	; 0x69
 8002170:	d1f6      	bne.n	8002160 <_printf_i+0x30>
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	0605      	lsls	r5, r0, #24
 8002178:	f103 0104 	add.w	r1, r3, #4
 800217c:	d52a      	bpl.n	80021d4 <_printf_i+0xa4>
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6011      	str	r1, [r2, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da03      	bge.n	800218e <_printf_i+0x5e>
 8002186:	222d      	movs	r2, #45	; 0x2d
 8002188:	425b      	negs	r3, r3
 800218a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800218e:	486f      	ldr	r0, [pc, #444]	; (800234c <_printf_i+0x21c>)
 8002190:	220a      	movs	r2, #10
 8002192:	e039      	b.n	8002208 <_printf_i+0xd8>
 8002194:	2973      	cmp	r1, #115	; 0x73
 8002196:	f000 809d 	beq.w	80022d4 <_printf_i+0x1a4>
 800219a:	d808      	bhi.n	80021ae <_printf_i+0x7e>
 800219c:	296f      	cmp	r1, #111	; 0x6f
 800219e:	d020      	beq.n	80021e2 <_printf_i+0xb2>
 80021a0:	2970      	cmp	r1, #112	; 0x70
 80021a2:	d1dd      	bne.n	8002160 <_printf_i+0x30>
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	f043 0320 	orr.w	r3, r3, #32
 80021aa:	6023      	str	r3, [r4, #0]
 80021ac:	e003      	b.n	80021b6 <_printf_i+0x86>
 80021ae:	2975      	cmp	r1, #117	; 0x75
 80021b0:	d017      	beq.n	80021e2 <_printf_i+0xb2>
 80021b2:	2978      	cmp	r1, #120	; 0x78
 80021b4:	d1d4      	bne.n	8002160 <_printf_i+0x30>
 80021b6:	2378      	movs	r3, #120	; 0x78
 80021b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021bc:	4864      	ldr	r0, [pc, #400]	; (8002350 <_printf_i+0x220>)
 80021be:	e055      	b.n	800226c <_printf_i+0x13c>
 80021c0:	6813      	ldr	r3, [r2, #0]
 80021c2:	1d19      	adds	r1, r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6011      	str	r1, [r2, #0]
 80021c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021d0:	2301      	movs	r3, #1
 80021d2:	e08c      	b.n	80022ee <_printf_i+0x1be>
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6011      	str	r1, [r2, #0]
 80021d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021dc:	bf18      	it	ne
 80021de:	b21b      	sxthne	r3, r3
 80021e0:	e7cf      	b.n	8002182 <_printf_i+0x52>
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	6825      	ldr	r5, [r4, #0]
 80021e6:	1d18      	adds	r0, r3, #4
 80021e8:	6010      	str	r0, [r2, #0]
 80021ea:	0628      	lsls	r0, r5, #24
 80021ec:	d501      	bpl.n	80021f2 <_printf_i+0xc2>
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e002      	b.n	80021f8 <_printf_i+0xc8>
 80021f2:	0668      	lsls	r0, r5, #25
 80021f4:	d5fb      	bpl.n	80021ee <_printf_i+0xbe>
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	4854      	ldr	r0, [pc, #336]	; (800234c <_printf_i+0x21c>)
 80021fa:	296f      	cmp	r1, #111	; 0x6f
 80021fc:	bf14      	ite	ne
 80021fe:	220a      	movne	r2, #10
 8002200:	2208      	moveq	r2, #8
 8002202:	2100      	movs	r1, #0
 8002204:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002208:	6865      	ldr	r5, [r4, #4]
 800220a:	60a5      	str	r5, [r4, #8]
 800220c:	2d00      	cmp	r5, #0
 800220e:	f2c0 8095 	blt.w	800233c <_printf_i+0x20c>
 8002212:	6821      	ldr	r1, [r4, #0]
 8002214:	f021 0104 	bic.w	r1, r1, #4
 8002218:	6021      	str	r1, [r4, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d13d      	bne.n	800229a <_printf_i+0x16a>
 800221e:	2d00      	cmp	r5, #0
 8002220:	f040 808e 	bne.w	8002340 <_printf_i+0x210>
 8002224:	4665      	mov	r5, ip
 8002226:	2a08      	cmp	r2, #8
 8002228:	d10b      	bne.n	8002242 <_printf_i+0x112>
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	07db      	lsls	r3, r3, #31
 800222e:	d508      	bpl.n	8002242 <_printf_i+0x112>
 8002230:	6923      	ldr	r3, [r4, #16]
 8002232:	6862      	ldr	r2, [r4, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	bfde      	ittt	le
 8002238:	2330      	movle	r3, #48	; 0x30
 800223a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800223e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002242:	ebac 0305 	sub.w	r3, ip, r5
 8002246:	6123      	str	r3, [r4, #16]
 8002248:	f8cd 8000 	str.w	r8, [sp]
 800224c:	463b      	mov	r3, r7
 800224e:	aa03      	add	r2, sp, #12
 8002250:	4621      	mov	r1, r4
 8002252:	4630      	mov	r0, r6
 8002254:	f7ff fef6 	bl	8002044 <_printf_common>
 8002258:	3001      	adds	r0, #1
 800225a:	d14d      	bne.n	80022f8 <_printf_i+0x1c8>
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	b005      	add	sp, #20
 8002262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002266:	4839      	ldr	r0, [pc, #228]	; (800234c <_printf_i+0x21c>)
 8002268:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	6821      	ldr	r1, [r4, #0]
 8002270:	1d1d      	adds	r5, r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6015      	str	r5, [r2, #0]
 8002276:	060a      	lsls	r2, r1, #24
 8002278:	d50b      	bpl.n	8002292 <_printf_i+0x162>
 800227a:	07ca      	lsls	r2, r1, #31
 800227c:	bf44      	itt	mi
 800227e:	f041 0120 	orrmi.w	r1, r1, #32
 8002282:	6021      	strmi	r1, [r4, #0]
 8002284:	b91b      	cbnz	r3, 800228e <_printf_i+0x15e>
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	f022 0220 	bic.w	r2, r2, #32
 800228c:	6022      	str	r2, [r4, #0]
 800228e:	2210      	movs	r2, #16
 8002290:	e7b7      	b.n	8002202 <_printf_i+0xd2>
 8002292:	064d      	lsls	r5, r1, #25
 8002294:	bf48      	it	mi
 8002296:	b29b      	uxthmi	r3, r3
 8002298:	e7ef      	b.n	800227a <_printf_i+0x14a>
 800229a:	4665      	mov	r5, ip
 800229c:	fbb3 f1f2 	udiv	r1, r3, r2
 80022a0:	fb02 3311 	mls	r3, r2, r1, r3
 80022a4:	5cc3      	ldrb	r3, [r0, r3]
 80022a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80022aa:	460b      	mov	r3, r1
 80022ac:	2900      	cmp	r1, #0
 80022ae:	d1f5      	bne.n	800229c <_printf_i+0x16c>
 80022b0:	e7b9      	b.n	8002226 <_printf_i+0xf6>
 80022b2:	6813      	ldr	r3, [r2, #0]
 80022b4:	6825      	ldr	r5, [r4, #0]
 80022b6:	6961      	ldr	r1, [r4, #20]
 80022b8:	1d18      	adds	r0, r3, #4
 80022ba:	6010      	str	r0, [r2, #0]
 80022bc:	0628      	lsls	r0, r5, #24
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	d501      	bpl.n	80022c6 <_printf_i+0x196>
 80022c2:	6019      	str	r1, [r3, #0]
 80022c4:	e002      	b.n	80022cc <_printf_i+0x19c>
 80022c6:	066a      	lsls	r2, r5, #25
 80022c8:	d5fb      	bpl.n	80022c2 <_printf_i+0x192>
 80022ca:	8019      	strh	r1, [r3, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	6123      	str	r3, [r4, #16]
 80022d0:	4665      	mov	r5, ip
 80022d2:	e7b9      	b.n	8002248 <_printf_i+0x118>
 80022d4:	6813      	ldr	r3, [r2, #0]
 80022d6:	1d19      	adds	r1, r3, #4
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	681d      	ldr	r5, [r3, #0]
 80022dc:	6862      	ldr	r2, [r4, #4]
 80022de:	2100      	movs	r1, #0
 80022e0:	4628      	mov	r0, r5
 80022e2:	f7fd ff95 	bl	8000210 <memchr>
 80022e6:	b108      	cbz	r0, 80022ec <_printf_i+0x1bc>
 80022e8:	1b40      	subs	r0, r0, r5
 80022ea:	6060      	str	r0, [r4, #4]
 80022ec:	6863      	ldr	r3, [r4, #4]
 80022ee:	6123      	str	r3, [r4, #16]
 80022f0:	2300      	movs	r3, #0
 80022f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022f6:	e7a7      	b.n	8002248 <_printf_i+0x118>
 80022f8:	6923      	ldr	r3, [r4, #16]
 80022fa:	462a      	mov	r2, r5
 80022fc:	4639      	mov	r1, r7
 80022fe:	4630      	mov	r0, r6
 8002300:	47c0      	blx	r8
 8002302:	3001      	adds	r0, #1
 8002304:	d0aa      	beq.n	800225c <_printf_i+0x12c>
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	079b      	lsls	r3, r3, #30
 800230a:	d413      	bmi.n	8002334 <_printf_i+0x204>
 800230c:	68e0      	ldr	r0, [r4, #12]
 800230e:	9b03      	ldr	r3, [sp, #12]
 8002310:	4298      	cmp	r0, r3
 8002312:	bfb8      	it	lt
 8002314:	4618      	movlt	r0, r3
 8002316:	e7a3      	b.n	8002260 <_printf_i+0x130>
 8002318:	2301      	movs	r3, #1
 800231a:	464a      	mov	r2, r9
 800231c:	4639      	mov	r1, r7
 800231e:	4630      	mov	r0, r6
 8002320:	47c0      	blx	r8
 8002322:	3001      	adds	r0, #1
 8002324:	d09a      	beq.n	800225c <_printf_i+0x12c>
 8002326:	3501      	adds	r5, #1
 8002328:	68e3      	ldr	r3, [r4, #12]
 800232a:	9a03      	ldr	r2, [sp, #12]
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	42ab      	cmp	r3, r5
 8002330:	dcf2      	bgt.n	8002318 <_printf_i+0x1e8>
 8002332:	e7eb      	b.n	800230c <_printf_i+0x1dc>
 8002334:	2500      	movs	r5, #0
 8002336:	f104 0919 	add.w	r9, r4, #25
 800233a:	e7f5      	b.n	8002328 <_printf_i+0x1f8>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ac      	bne.n	800229a <_printf_i+0x16a>
 8002340:	7803      	ldrb	r3, [r0, #0]
 8002342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002346:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800234a:	e76c      	b.n	8002226 <_printf_i+0xf6>
 800234c:	08002849 	.word	0x08002849
 8002350:	0800285a 	.word	0x0800285a

08002354 <memcpy>:
 8002354:	b510      	push	{r4, lr}
 8002356:	1e43      	subs	r3, r0, #1
 8002358:	440a      	add	r2, r1
 800235a:	4291      	cmp	r1, r2
 800235c:	d100      	bne.n	8002360 <memcpy+0xc>
 800235e:	bd10      	pop	{r4, pc}
 8002360:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002368:	e7f7      	b.n	800235a <memcpy+0x6>

0800236a <memmove>:
 800236a:	4288      	cmp	r0, r1
 800236c:	b510      	push	{r4, lr}
 800236e:	eb01 0302 	add.w	r3, r1, r2
 8002372:	d807      	bhi.n	8002384 <memmove+0x1a>
 8002374:	1e42      	subs	r2, r0, #1
 8002376:	4299      	cmp	r1, r3
 8002378:	d00a      	beq.n	8002390 <memmove+0x26>
 800237a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800237e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002382:	e7f8      	b.n	8002376 <memmove+0xc>
 8002384:	4283      	cmp	r3, r0
 8002386:	d9f5      	bls.n	8002374 <memmove+0xa>
 8002388:	1881      	adds	r1, r0, r2
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	42d3      	cmn	r3, r2
 800238e:	d100      	bne.n	8002392 <memmove+0x28>
 8002390:	bd10      	pop	{r4, pc}
 8002392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002396:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800239a:	e7f7      	b.n	800238c <memmove+0x22>

0800239c <_free_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4605      	mov	r5, r0
 80023a0:	2900      	cmp	r1, #0
 80023a2:	d045      	beq.n	8002430 <_free_r+0x94>
 80023a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a8:	1f0c      	subs	r4, r1, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	18e4      	addlt	r4, r4, r3
 80023b0:	f000 f8d2 	bl	8002558 <__malloc_lock>
 80023b4:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <_free_r+0x98>)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	4610      	mov	r0, r2
 80023ba:	b933      	cbnz	r3, 80023ca <_free_r+0x2e>
 80023bc:	6063      	str	r3, [r4, #4]
 80023be:	6014      	str	r4, [r2, #0]
 80023c0:	4628      	mov	r0, r5
 80023c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023c6:	f000 b8c8 	b.w	800255a <__malloc_unlock>
 80023ca:	42a3      	cmp	r3, r4
 80023cc:	d90c      	bls.n	80023e8 <_free_r+0x4c>
 80023ce:	6821      	ldr	r1, [r4, #0]
 80023d0:	1862      	adds	r2, r4, r1
 80023d2:	4293      	cmp	r3, r2
 80023d4:	bf04      	itt	eq
 80023d6:	681a      	ldreq	r2, [r3, #0]
 80023d8:	685b      	ldreq	r3, [r3, #4]
 80023da:	6063      	str	r3, [r4, #4]
 80023dc:	bf04      	itt	eq
 80023de:	1852      	addeq	r2, r2, r1
 80023e0:	6022      	streq	r2, [r4, #0]
 80023e2:	6004      	str	r4, [r0, #0]
 80023e4:	e7ec      	b.n	80023c0 <_free_r+0x24>
 80023e6:	4613      	mov	r3, r2
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	b10a      	cbz	r2, 80023f0 <_free_r+0x54>
 80023ec:	42a2      	cmp	r2, r4
 80023ee:	d9fa      	bls.n	80023e6 <_free_r+0x4a>
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	1858      	adds	r0, r3, r1
 80023f4:	42a0      	cmp	r0, r4
 80023f6:	d10b      	bne.n	8002410 <_free_r+0x74>
 80023f8:	6820      	ldr	r0, [r4, #0]
 80023fa:	4401      	add	r1, r0
 80023fc:	1858      	adds	r0, r3, r1
 80023fe:	4282      	cmp	r2, r0
 8002400:	6019      	str	r1, [r3, #0]
 8002402:	d1dd      	bne.n	80023c0 <_free_r+0x24>
 8002404:	6810      	ldr	r0, [r2, #0]
 8002406:	6852      	ldr	r2, [r2, #4]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	4401      	add	r1, r0
 800240c:	6019      	str	r1, [r3, #0]
 800240e:	e7d7      	b.n	80023c0 <_free_r+0x24>
 8002410:	d902      	bls.n	8002418 <_free_r+0x7c>
 8002412:	230c      	movs	r3, #12
 8002414:	602b      	str	r3, [r5, #0]
 8002416:	e7d3      	b.n	80023c0 <_free_r+0x24>
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	1821      	adds	r1, r4, r0
 800241c:	428a      	cmp	r2, r1
 800241e:	bf04      	itt	eq
 8002420:	6811      	ldreq	r1, [r2, #0]
 8002422:	6852      	ldreq	r2, [r2, #4]
 8002424:	6062      	str	r2, [r4, #4]
 8002426:	bf04      	itt	eq
 8002428:	1809      	addeq	r1, r1, r0
 800242a:	6021      	streq	r1, [r4, #0]
 800242c:	605c      	str	r4, [r3, #4]
 800242e:	e7c7      	b.n	80023c0 <_free_r+0x24>
 8002430:	bd38      	pop	{r3, r4, r5, pc}
 8002432:	bf00      	nop
 8002434:	2000008c 	.word	0x2000008c

08002438 <_malloc_r>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	1ccd      	adds	r5, r1, #3
 800243c:	f025 0503 	bic.w	r5, r5, #3
 8002440:	3508      	adds	r5, #8
 8002442:	2d0c      	cmp	r5, #12
 8002444:	bf38      	it	cc
 8002446:	250c      	movcc	r5, #12
 8002448:	2d00      	cmp	r5, #0
 800244a:	4606      	mov	r6, r0
 800244c:	db01      	blt.n	8002452 <_malloc_r+0x1a>
 800244e:	42a9      	cmp	r1, r5
 8002450:	d903      	bls.n	800245a <_malloc_r+0x22>
 8002452:	230c      	movs	r3, #12
 8002454:	6033      	str	r3, [r6, #0]
 8002456:	2000      	movs	r0, #0
 8002458:	bd70      	pop	{r4, r5, r6, pc}
 800245a:	f000 f87d 	bl	8002558 <__malloc_lock>
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <_malloc_r+0xac>)
 8002460:	6814      	ldr	r4, [r2, #0]
 8002462:	4621      	mov	r1, r4
 8002464:	b991      	cbnz	r1, 800248c <_malloc_r+0x54>
 8002466:	4c20      	ldr	r4, [pc, #128]	; (80024e8 <_malloc_r+0xb0>)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	b91b      	cbnz	r3, 8002474 <_malloc_r+0x3c>
 800246c:	4630      	mov	r0, r6
 800246e:	f000 f863 	bl	8002538 <_sbrk_r>
 8002472:	6020      	str	r0, [r4, #0]
 8002474:	4629      	mov	r1, r5
 8002476:	4630      	mov	r0, r6
 8002478:	f000 f85e 	bl	8002538 <_sbrk_r>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d124      	bne.n	80024ca <_malloc_r+0x92>
 8002480:	230c      	movs	r3, #12
 8002482:	6033      	str	r3, [r6, #0]
 8002484:	4630      	mov	r0, r6
 8002486:	f000 f868 	bl	800255a <__malloc_unlock>
 800248a:	e7e4      	b.n	8002456 <_malloc_r+0x1e>
 800248c:	680b      	ldr	r3, [r1, #0]
 800248e:	1b5b      	subs	r3, r3, r5
 8002490:	d418      	bmi.n	80024c4 <_malloc_r+0x8c>
 8002492:	2b0b      	cmp	r3, #11
 8002494:	d90f      	bls.n	80024b6 <_malloc_r+0x7e>
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	50cd      	str	r5, [r1, r3]
 800249a:	18cc      	adds	r4, r1, r3
 800249c:	4630      	mov	r0, r6
 800249e:	f000 f85c 	bl	800255a <__malloc_unlock>
 80024a2:	f104 000b 	add.w	r0, r4, #11
 80024a6:	1d23      	adds	r3, r4, #4
 80024a8:	f020 0007 	bic.w	r0, r0, #7
 80024ac:	1ac3      	subs	r3, r0, r3
 80024ae:	d0d3      	beq.n	8002458 <_malloc_r+0x20>
 80024b0:	425a      	negs	r2, r3
 80024b2:	50e2      	str	r2, [r4, r3]
 80024b4:	e7d0      	b.n	8002458 <_malloc_r+0x20>
 80024b6:	428c      	cmp	r4, r1
 80024b8:	684b      	ldr	r3, [r1, #4]
 80024ba:	bf16      	itet	ne
 80024bc:	6063      	strne	r3, [r4, #4]
 80024be:	6013      	streq	r3, [r2, #0]
 80024c0:	460c      	movne	r4, r1
 80024c2:	e7eb      	b.n	800249c <_malloc_r+0x64>
 80024c4:	460c      	mov	r4, r1
 80024c6:	6849      	ldr	r1, [r1, #4]
 80024c8:	e7cc      	b.n	8002464 <_malloc_r+0x2c>
 80024ca:	1cc4      	adds	r4, r0, #3
 80024cc:	f024 0403 	bic.w	r4, r4, #3
 80024d0:	42a0      	cmp	r0, r4
 80024d2:	d005      	beq.n	80024e0 <_malloc_r+0xa8>
 80024d4:	1a21      	subs	r1, r4, r0
 80024d6:	4630      	mov	r0, r6
 80024d8:	f000 f82e 	bl	8002538 <_sbrk_r>
 80024dc:	3001      	adds	r0, #1
 80024de:	d0cf      	beq.n	8002480 <_malloc_r+0x48>
 80024e0:	6025      	str	r5, [r4, #0]
 80024e2:	e7db      	b.n	800249c <_malloc_r+0x64>
 80024e4:	2000008c 	.word	0x2000008c
 80024e8:	20000090 	.word	0x20000090

080024ec <_realloc_r>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	4607      	mov	r7, r0
 80024f0:	4614      	mov	r4, r2
 80024f2:	460e      	mov	r6, r1
 80024f4:	b921      	cbnz	r1, 8002500 <_realloc_r+0x14>
 80024f6:	4611      	mov	r1, r2
 80024f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80024fc:	f7ff bf9c 	b.w	8002438 <_malloc_r>
 8002500:	b922      	cbnz	r2, 800250c <_realloc_r+0x20>
 8002502:	f7ff ff4b 	bl	800239c <_free_r>
 8002506:	4625      	mov	r5, r4
 8002508:	4628      	mov	r0, r5
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250c:	f000 f826 	bl	800255c <_malloc_usable_size_r>
 8002510:	42a0      	cmp	r0, r4
 8002512:	d20f      	bcs.n	8002534 <_realloc_r+0x48>
 8002514:	4621      	mov	r1, r4
 8002516:	4638      	mov	r0, r7
 8002518:	f7ff ff8e 	bl	8002438 <_malloc_r>
 800251c:	4605      	mov	r5, r0
 800251e:	2800      	cmp	r0, #0
 8002520:	d0f2      	beq.n	8002508 <_realloc_r+0x1c>
 8002522:	4631      	mov	r1, r6
 8002524:	4622      	mov	r2, r4
 8002526:	f7ff ff15 	bl	8002354 <memcpy>
 800252a:	4631      	mov	r1, r6
 800252c:	4638      	mov	r0, r7
 800252e:	f7ff ff35 	bl	800239c <_free_r>
 8002532:	e7e9      	b.n	8002508 <_realloc_r+0x1c>
 8002534:	4635      	mov	r5, r6
 8002536:	e7e7      	b.n	8002508 <_realloc_r+0x1c>

08002538 <_sbrk_r>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	4c06      	ldr	r4, [pc, #24]	; (8002554 <_sbrk_r+0x1c>)
 800253c:	2300      	movs	r3, #0
 800253e:	4605      	mov	r5, r0
 8002540:	4608      	mov	r0, r1
 8002542:	6023      	str	r3, [r4, #0]
 8002544:	f7fe fb98 	bl	8000c78 <_sbrk>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d102      	bne.n	8002552 <_sbrk_r+0x1a>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	b103      	cbz	r3, 8002552 <_sbrk_r+0x1a>
 8002550:	602b      	str	r3, [r5, #0]
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000094 	.word	0x20000094

08002558 <__malloc_lock>:
 8002558:	4770      	bx	lr

0800255a <__malloc_unlock>:
 800255a:	4770      	bx	lr

0800255c <_malloc_usable_size_r>:
 800255c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002560:	1f18      	subs	r0, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	bfbc      	itt	lt
 8002566:	580b      	ldrlt	r3, [r1, r0]
 8002568:	18c0      	addlt	r0, r0, r3
 800256a:	4770      	bx	lr

0800256c <_init>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr

08002578 <_fini>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr
