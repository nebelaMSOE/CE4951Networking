
FinalProjectNavin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001670  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019b4  080019b4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080019b4  080019b4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019b4  080019b4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019b4  080019b4  000119b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080019bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000006c  08001a28  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001a28  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a97  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bb4  00000000  00000000  00023b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000246e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00024908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036fe  00000000  00000000  00024ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002887  00000000  00000000  000281be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aedb  00000000  00000000  0002aa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00035920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea4  00000000  00000000  00035974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001828 	.word	0x08001828

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08001828 	.word	0x08001828

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <counter_init>:

/*
 * Initializes the counter to use interrupts and
 * keep track of time
 */
void counter_init(){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

	//Unmask interrupt
	*NVIC_ISER0 |= (1<<28);
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <counter_init+0x44>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <counter_init+0x44>)
 80002ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002be:	6013      	str	r3, [r2, #0]

	*RCC_APB1ENR |= 1;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <counter_init+0x48>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <counter_init+0x48>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]

	//Set timeout for 1.1ms
	tim->ARR = 17600;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <counter_init+0x4c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f244 42c0 	movw	r2, #17600	; 0x44c0
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->CCR1 = 17600;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <counter_init+0x4c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f244 42c0 	movw	r2, #17600	; 0x44c0
 80002de:	631a      	str	r2, [r3, #48]	; 0x30

	//Enable interrupt
	tim->DIER = 1;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <counter_init+0x4c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2201      	movs	r2, #1
 80002e6:	60da      	str	r2, [r3, #12]

	// tim->CCMR1 = (0b011<<4);

	// tim->CCER = 1;
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	40023840 	.word	0x40023840
 80002fc:	20000000 	.word	0x20000000

08000300 <detect_init>:
/*
 * Init function to enable external interrupt
 * on pin PA15, triggering on any edge
 *
 */
void detect_init(){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	//Enable components
	*RCC_AHB1ENR |= (1<<GPIOAEN);
 8000304:	4b20      	ldr	r3, [pc, #128]	; (8000388 <detect_init+0x88>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1f      	ldr	r2, [pc, #124]	; (8000388 <detect_init+0x88>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6013      	str	r3, [r2, #0]
	*RCC_APB2ENR |= (SYSCFGEN);
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <detect_init+0x8c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1d      	ldr	r2, [pc, #116]	; (800038c <detect_init+0x8c>)
 8000316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800031a:	6013      	str	r3, [r2, #0]

	//Set A15 to input (Clear that part of the register)
	*GPIOA_MODER &= ~(0xC0000000);
 800031c:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <detect_init+0x90>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <detect_init+0x90>)
 8000322:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000326:	6013      	str	r3, [r2, #0]

	//Set A15 to pull up
	*GPIOA_PUPDR &= ~(0xC0000000);
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <detect_init+0x94>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <detect_init+0x94>)
 800032e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000332:	6013      	str	r3, [r2, #0]
	*GPIOA_PUPDR |= (0x40000000);
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <detect_init+0x94>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a16      	ldr	r2, [pc, #88]	; (8000394 <detect_init+0x94>)
 800033a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800033e:	6013      	str	r3, [r2, #0]

	//Enable interrupt
	*SYSCFG_EXTICR4 &= ~(0xF000);
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <detect_init+0x98>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <detect_init+0x98>)
 8000346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800034a:	6013      	str	r3, [r2, #0]

	//Enable trigger on both edges
	*EXTI_RTSR |= (1<<15);
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <detect_init+0x9c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a12      	ldr	r2, [pc, #72]	; (800039c <detect_init+0x9c>)
 8000352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000356:	6013      	str	r3, [r2, #0]
	*EXTI_FTSR |= (1<<15);
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <detect_init+0xa0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <detect_init+0xa0>)
 800035e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000362:	6013      	str	r3, [r2, #0]

	//Unmask interrupt
	*NVIC_ISER1 |= (1<<8);
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <detect_init+0xa4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <detect_init+0xa4>)
 800036a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800036e:	6013      	str	r3, [r2, #0]

	//Enable interrupt
	*EXTI_IMR |= (1<<15);
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <detect_init+0xa8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <detect_init+0xa8>)
 8000376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40023830 	.word	0x40023830
 800038c:	40023844 	.word	0x40023844
 8000390:	40020000 	.word	0x40020000
 8000394:	4002000c 	.word	0x4002000c
 8000398:	40013814 	.word	0x40013814
 800039c:	40013c08 	.word	0x40013c08
 80003a0:	40013c0c 	.word	0x40013c0c
 80003a4:	e000e104 	.word	0xe000e104
 80003a8:	40013c00 	.word	0x40013c00

080003ac <counter_start>:

/*
 * Starts the counter
 */
void counter_start(){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	timeTaken = 0;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <counter_start+0x1c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
	tim->CR1 = 1;
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <counter_start+0x20>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2201      	movs	r2, #1
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	20000088 	.word	0x20000088
 80003cc:	20000000 	.word	0x20000000

080003d0 <counter_stop>:

/*
 * Stops the counter
 */
void counter_stop(){
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	tim->CR1 &= ~1;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <counter_stop+0x20>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <counter_stop+0x20>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f022 0201 	bic.w	r2, r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000

080003f4 <counter_resetValue>:
uint32_t counter_getCount(){
	return timeTaken;
}

//resets value of counter
void counter_resetValue(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	tim->CNT = 0;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <counter_resetValue+0x18>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000000 	.word	0x20000000

08000410 <counter_resetFlag>:

//resets interrupt flag
void counter_resetFlag(){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	tim->SR &= ~1;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <counter_resetFlag+0x20>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	691a      	ldr	r2, [r3, #16]
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <counter_resetFlag+0x20>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f022 0201 	bic.w	r2, r2, #1
 8000422:	611a      	str	r2, [r3, #16]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000

08000434 <led_init>:
 * Enables the GPIOB in RCC_AHB1ENR
 * Sets LED0 - LED9 to output mode ("01")
 * Args: na
 * Return: na
 */
void led_init(){
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

	//Enables GPIOB in RCC_AHB1ENR
	*RCC_AHB1ENR |= (1<<GPIOBEN);
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <led_init+0x54>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a12      	ldr	r2, [pc, #72]	; (8000488 <led_init+0x54>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	6013      	str	r3, [r2, #0]

	//Enable lower 6 leds
	*GPIOB_MODER &= ~(0x3FFF<<10);
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <led_init+0x58>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a10      	ldr	r2, [pc, #64]	; (800048c <led_init+0x58>)
 800044a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800044e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000452:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x555<<10);
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <led_init+0x58>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0c      	ldr	r2, [pc, #48]	; (800048c <led_init+0x58>)
 800045a:	f443 13aa 	orr.w	r3, r3, #1392640	; 0x154000
 800045e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000462:	6013      	str	r3, [r2, #0]

	//Enables upper 4 leds
	*GPIOB_MODER &= ~(0xFF<<24);
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <led_init+0x58>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <led_init+0x58>)
 800046a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800046e:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0x55<<24);
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <led_init+0x58>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <led_init+0x58>)
 8000476:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800047a:	6013      	str	r3, [r2, #0]

}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40023830 	.word	0x40023830
 800048c:	40020400 	.word	0x40020400

08000490 <led_allOff>:
 * led_allOff()
 * Turn off all leds
 * Args: na
 * Return: na
 */
void led_allOff(){
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	//Set led output pins to 0
	*GPIOB_ODR &= ~((0b111111<<5) | (0b1111<<12));
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <led_allOff+0x20>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <led_allOff+0x20>)
 800049a:	f423 4377 	bic.w	r3, r3, #63232	; 0xf700
 800049e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40020414 	.word	0x40020414

080004b4 <led_on>:
 * led_on(uint8_t ledIndex)
 * Turn on specific led, prints error if out of range
 * Args: uint8_t ledIndex: index of led
 * Return: na
 */
void led_on(uint8_t ledIndex){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
	//Enables specific LED pin in BSRR set section
	switch (ledIndex) {
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b09      	cmp	r3, #9
 80004c2:	d85d      	bhi.n	8000580 <led_on+0xcc>
 80004c4:	a201      	add	r2, pc, #4	; (adr r2, 80004cc <led_on+0x18>)
 80004c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ca:	bf00      	nop
 80004cc:	080004f5 	.word	0x080004f5
 80004d0:	08000503 	.word	0x08000503
 80004d4:	08000511 	.word	0x08000511
 80004d8:	0800051f 	.word	0x0800051f
 80004dc:	0800052d 	.word	0x0800052d
 80004e0:	0800053b 	.word	0x0800053b
 80004e4:	08000549 	.word	0x08000549
 80004e8:	08000557 	.word	0x08000557
 80004ec:	08000565 	.word	0x08000565
 80004f0:	08000573 	.word	0x08000573
			case 0 : *GPIOB_BSRR |= (1<<5); break;
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <led_on+0xdc>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a25      	ldr	r2, [pc, #148]	; (8000590 <led_on+0xdc>)
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	e042      	b.n	8000588 <led_on+0xd4>
			case 1 : *GPIOB_BSRR |= (1<<6); break;
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <led_on+0xdc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a22      	ldr	r2, [pc, #136]	; (8000590 <led_on+0xdc>)
 8000508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800050c:	6013      	str	r3, [r2, #0]
 800050e:	e03b      	b.n	8000588 <led_on+0xd4>
			case 2 : *GPIOB_BSRR |= (1<<7); break;
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <led_on+0xdc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <led_on+0xdc>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	e034      	b.n	8000588 <led_on+0xd4>
			case 3 : *GPIOB_BSRR |= (1<<8); break;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <led_on+0xdc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <led_on+0xdc>)
 8000524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e02d      	b.n	8000588 <led_on+0xd4>
			case 4 : *GPIOB_BSRR |= (1<<9); break;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <led_on+0xdc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <led_on+0xdc>)
 8000532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	e026      	b.n	8000588 <led_on+0xd4>
			case 5 : *GPIOB_BSRR |= (1<<10); break;
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <led_on+0xdc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a14      	ldr	r2, [pc, #80]	; (8000590 <led_on+0xdc>)
 8000540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e01f      	b.n	8000588 <led_on+0xd4>
			case 6 : *GPIOB_BSRR |= (1<<12); break;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <led_on+0xdc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a10      	ldr	r2, [pc, #64]	; (8000590 <led_on+0xdc>)
 800054e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	e018      	b.n	8000588 <led_on+0xd4>
			case 7 : *GPIOB_BSRR |= (1<<13); break;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <led_on+0xdc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <led_on+0xdc>)
 800055c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	e011      	b.n	8000588 <led_on+0xd4>
			case 8 : *GPIOB_BSRR |= (1<<14); break;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <led_on+0xdc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <led_on+0xdc>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	e00a      	b.n	8000588 <led_on+0xd4>
			case 9 : *GPIOB_BSRR |= (1<<15); break;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <led_on+0xdc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a06      	ldr	r2, [pc, #24]	; (8000590 <led_on+0xdc>)
 8000578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e003      	b.n	8000588 <led_on+0xd4>
			default: printf("Args is out of range or not a number"); break;
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <led_on+0xe0>)
 8000582:	f000 f9fb 	bl	800097c <iprintf>
 8000586:	bf00      	nop
	}
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020418 	.word	0x40020418
 8000594:	08001840 	.word	0x08001840

08000598 <main>:
 * BUSY -> IDLE (E3)
 * COLLISION -> BUSY (E1)
 */

int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	//init_usart2(57600, F_CPU);
	//Test to to ensure connection
	//printf("CE4951 Networking Project");

	//Initialize leds
	led_init();
 800059c:	f7ff ff4a 	bl	8000434 <led_init>
	//Initialize counter with timeout of 1.1ms
	counter_init();
 80005a0:	f7ff fe86 	bl	80002b0 <counter_init>
	//Initialize pin PA15 and interrupts on any edge
	detect_init();
 80005a4:	f7ff feac 	bl	8000300 <detect_init>
	while(1){
		switch (currentState)
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x6c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d018      	beq.n	80005e2 <main+0x4a>
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	dc1f      	bgt.n	80005f4 <main+0x5c>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <main+0x26>
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d009      	beq.n	80005d0 <main+0x38>
 80005bc:	e01a      	b.n	80005f4 <main+0x5c>
		{
		case IDLE:
			//Left two LEDs on
			led_allOff();
 80005be:	f7ff ff67 	bl	8000490 <led_allOff>
			led_on(9);
 80005c2:	2009      	movs	r0, #9
 80005c4:	f7ff ff76 	bl	80004b4 <led_on>
			led_on(8);
 80005c8:	2008      	movs	r0, #8
 80005ca:	f7ff ff73 	bl	80004b4 <led_on>
			// Interrupt when E1

			break;
 80005ce:	e017      	b.n	8000600 <main+0x68>

		case BUSY:
			//Middle two LEDs on
			led_allOff();
 80005d0:	f7ff ff5e 	bl	8000490 <led_allOff>
			led_on(5);
 80005d4:	2005      	movs	r0, #5
 80005d6:	f7ff ff6d 	bl	80004b4 <led_on>
			led_on(4);
 80005da:	2004      	movs	r0, #4
 80005dc:	f7ff ff6a 	bl	80004b4 <led_on>
			//Interrupt when E2

			//Interrupt when E3

			break;
 80005e0:	e00e      	b.n	8000600 <main+0x68>

		case COLLISION:
			//Right two LEDs on
			led_allOff();
 80005e2:	f7ff ff55 	bl	8000490 <led_allOff>
			led_on(1);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff64 	bl	80004b4 <led_on>
			led_on(0);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff ff61 	bl	80004b4 <led_on>
			//Interrupt when E1

			break;
 80005f2:	e005      	b.n	8000600 <main+0x68>

		default:
			led_allOff();
 80005f4:	f7ff ff4c 	bl	8000490 <led_allOff>
			//Unexpected value for currentState
			//Resetting currentState to initial value
			currentState = IDLE;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <main+0x6c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]

			break;
 80005fe:	bf00      	nop
		switch (currentState)
 8000600:	e7d2      	b.n	80005a8 <main+0x10>
 8000602:	bf00      	nop
 8000604:	2000008c 	.word	0x2000008c

08000608 <TIM2_IRQHandler>:
 * Interrupt handler to handle interrupts
 * from the counter
 * Args: na
 * Return: na
 */
void TIM2_IRQHandler(void){
 8000608:	4668      	mov	r0, sp
 800060a:	f020 0107 	bic.w	r1, r0, #7
 800060e:	468d      	mov	sp, r1
 8000610:	b589      	push	{r0, r3, r7, lr}
 8000612:	af00      	add	r7, sp, #0
	counter_stop();
 8000614:	f7ff fedc 	bl	80003d0 <counter_stop>
	counter_resetValue();
 8000618:	f7ff feec 	bl	80003f4 <counter_resetValue>
	counter_resetFlag();
 800061c:	f7ff fef8 	bl	8000410 <counter_resetFlag>
	//get value on pin A15
	valueIn = (*GPIOA_IDR & 0x8000) >> 15;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <TIM2_IRQHandler+0x58>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	0bdb      	lsrs	r3, r3, #15
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <TIM2_IRQHandler+0x5c>)
 800062c:	6013      	str	r3, [r2, #0]

	if(currentState == BUSY){
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <TIM2_IRQHandler+0x60>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d10e      	bne.n	8000654 <TIM2_IRQHandler+0x4c>
		//if busy and E2 move to collision
		if(valueIn == 0){
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <TIM2_IRQHandler+0x5c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d103      	bne.n	8000646 <TIM2_IRQHandler+0x3e>
			currentState = COLLISION;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <TIM2_IRQHandler+0x60>)
 8000640:	2202      	movs	r2, #2
 8000642:	701a      	strb	r2, [r3, #0]
		} else if (valueIn == 1){
			currentState = IDLE;
		}
	}

}
 8000644:	e006      	b.n	8000654 <TIM2_IRQHandler+0x4c>
		} else if (valueIn == 1){
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <TIM2_IRQHandler+0x5c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d102      	bne.n	8000654 <TIM2_IRQHandler+0x4c>
			currentState = IDLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <TIM2_IRQHandler+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 800065c:	4685      	mov	sp, r0
 800065e:	4770      	bx	lr
 8000660:	40020010 	.word	0x40020010
 8000664:	20000004 	.word	0x20000004
 8000668:	2000008c 	.word	0x2000008c

0800066c <EXTI15_10_IRQHandler>:
 * Handles the interrupts for a signal edge
 * on pin A15
 * Args: na
 * Return: na
 */
void EXTI15_10_IRQHandler(void){
 800066c:	4668      	mov	r0, sp
 800066e:	f020 0107 	bic.w	r1, r0, #7
 8000672:	468d      	mov	sp, r1
 8000674:	b589      	push	{r0, r3, r7, lr}
 8000676:	af00      	add	r7, sp, #0
	//verify interrupt on pin 15
	if((*EXTI_PR) & (1<<15)){
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <EXTI15_10_IRQHandler+0x8c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d031      	beq.n	80006e8 <EXTI15_10_IRQHandler+0x7c>
		//clear interrupt
		*EXTI_PR |= 1<<15;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <EXTI15_10_IRQHandler+0x8c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <EXTI15_10_IRQHandler+0x8c>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
		switch (currentState)
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <EXTI15_10_IRQHandler+0x90>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d00e      	beq.n	80006b6 <EXTI15_10_IRQHandler+0x4a>
 8000698:	2b02      	cmp	r3, #2
 800069a:	dc1d      	bgt.n	80006d8 <EXTI15_10_IRQHandler+0x6c>
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <EXTI15_10_IRQHandler+0x3a>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d010      	beq.n	80006c6 <EXTI15_10_IRQHandler+0x5a>
 80006a4:	e018      	b.n	80006d8 <EXTI15_10_IRQHandler+0x6c>
				{
				case IDLE:
					//if idle and E1 move to busy
					currentState = BUSY;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <EXTI15_10_IRQHandler+0x90>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
					//reset counter value to 0
					counter_resetValue();
 80006ac:	f7ff fea2 	bl	80003f4 <counter_resetValue>
					//start counter
					counter_start();
 80006b0:	f7ff fe7c 	bl	80003ac <counter_start>
					break;
 80006b4:	e019      	b.n	80006ea <EXTI15_10_IRQHandler+0x7e>

				case COLLISION:
					//if collision and E1 move to busy
					currentState = BUSY;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <EXTI15_10_IRQHandler+0x90>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
					//reset counter value to 0
					counter_resetValue();
 80006bc:	f7ff fe9a 	bl	80003f4 <counter_resetValue>
					//start counter
					counter_start();
 80006c0:	f7ff fe74 	bl	80003ac <counter_start>
					break;
 80006c4:	e011      	b.n	80006ea <EXTI15_10_IRQHandler+0x7e>

				case BUSY:
					counter_stop();
 80006c6:	f7ff fe83 	bl	80003d0 <counter_stop>
					counter_resetValue();
 80006ca:	f7ff fe93 	bl	80003f4 <counter_resetValue>
					counter_resetFlag();
 80006ce:	f7ff fe9f 	bl	8000410 <counter_resetFlag>
					counter_start();
 80006d2:	f7ff fe6b 	bl	80003ac <counter_start>
					break;
 80006d6:	e008      	b.n	80006ea <EXTI15_10_IRQHandler+0x7e>

				default:
					// this should never happen
					led_allOff();
 80006d8:	f7ff feda 	bl	8000490 <led_allOff>
					//Unexpected value for currentState
					//Resetting currentState to initial value
					currentState = IDLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <EXTI15_10_IRQHandler+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
					//stop counter
					counter_stop();
 80006e2:	f7ff fe75 	bl	80003d0 <counter_stop>

					break;
 80006e6:	e000      	b.n	80006ea <EXTI15_10_IRQHandler+0x7e>
				}
	}
 80006e8:	bf00      	nop
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80006f2:	4685      	mov	sp, r0
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40013c14 	.word	0x40013c14
 80006fc:	2000008c 	.word	0x2000008c

08000700 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	return -1;
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000728:	605a      	str	r2, [r3, #4]
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_isatty>:

int _isatty(int file)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	return 1;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <_sbrk+0x50>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <_sbrk+0x16>
		heap_end = &end;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <_sbrk+0x50>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <_sbrk+0x54>)
 800077c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <_sbrk+0x50>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <_sbrk+0x50>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	466a      	mov	r2, sp
 800078e:	4293      	cmp	r3, r2
 8000790:	d907      	bls.n	80007a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000792:	f000 f8c1 	bl	8000918 <__errno>
 8000796:	4603      	mov	r3, r0
 8000798:	220c      	movs	r2, #12
 800079a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e006      	b.n	80007b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <_sbrk+0x50>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <_sbrk+0x50>)
 80007ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000090 	.word	0x20000090
 80007bc:	200000b0 	.word	0x200000b0

080007c0 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e012      	b.n	80007fc <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	3301      	adds	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80007dc:	f000 f836 	bl	800084c <usart2_getch>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b0a      	cmp	r3, #10
 80007ee:	d00a      	beq.n	8000806 <_read+0x46>
		ptr++;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbe8      	blt.n	80007d6 <_read+0x16>
 8000804:	e000      	b.n	8000808 <_read+0x48>
		if(*ptr == '\n') break;
 8000806:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 8000808:	693b      	ldr	r3, [r7, #16]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_write>:

int _write(int file, char *ptr, int len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e009      	b.n	8000838 <_write+0x26>
	{
		usart2_putch(*ptr++);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f82f 	bl	8000890 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf1      	blt.n	8000824 <_write+0x12>
	}
	return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <usart2_getch>:



char usart2_getch(){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8000852:	bf00      	nop
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <usart2_getch+0x3c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b20      	cmp	r3, #32
 800085e:	d1f9      	bne.n	8000854 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <usart2_getch+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f811 	bl	8000890 <usart2_putch>

	if (c == '\r'){  // If character is CR
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b0d      	cmp	r3, #13
 8000872:	d104      	bne.n	800087e <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 8000874:	200a      	movs	r0, #10
 8000876:	f000 f80b 	bl	8000890 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 800087a:	230a      	movs	r3, #10
 800087c:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 800087e:	79fb      	ldrb	r3, [r7, #7]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400
 800088c:	40004404 	.word	0x40004404

08000890 <usart2_putch>:

void usart2_putch(char c){
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 800089a:	bf00      	nop
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <usart2_putch+0x2c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a4:	2b80      	cmp	r3, #128	; 0x80
 80008a6:	d1f9      	bne.n	800089c <usart2_putch+0xc>
	*(USART_DR) = c;
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <usart2_putch+0x30>)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40004404 	.word	0x40004404

080008c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490e      	ldr	r1, [pc, #56]	; (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0b      	ldr	r4, [pc, #44]	; (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ee:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008f2:	f000 f817 	bl	8000924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f6:	f7ff fe4f 	bl	8000598 <main>

080008fa <LoopForever>:

LoopForever:
    b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
  ldr   r0, =_estack
 80008fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000908:	080019bc 	.word	0x080019bc
  ldr r2, =_sbss
 800090c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000910:	200000ac 	.word	0x200000ac

08000914 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC_IRQHandler>
	...

08000918 <__errno>:
 8000918:	4b01      	ldr	r3, [pc, #4]	; (8000920 <__errno+0x8>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008

08000924 <__libc_init_array>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	4d0d      	ldr	r5, [pc, #52]	; (800095c <__libc_init_array+0x38>)
 8000928:	4c0d      	ldr	r4, [pc, #52]	; (8000960 <__libc_init_array+0x3c>)
 800092a:	1b64      	subs	r4, r4, r5
 800092c:	10a4      	asrs	r4, r4, #2
 800092e:	2600      	movs	r6, #0
 8000930:	42a6      	cmp	r6, r4
 8000932:	d109      	bne.n	8000948 <__libc_init_array+0x24>
 8000934:	4d0b      	ldr	r5, [pc, #44]	; (8000964 <__libc_init_array+0x40>)
 8000936:	4c0c      	ldr	r4, [pc, #48]	; (8000968 <__libc_init_array+0x44>)
 8000938:	f000 ff76 	bl	8001828 <_init>
 800093c:	1b64      	subs	r4, r4, r5
 800093e:	10a4      	asrs	r4, r4, #2
 8000940:	2600      	movs	r6, #0
 8000942:	42a6      	cmp	r6, r4
 8000944:	d105      	bne.n	8000952 <__libc_init_array+0x2e>
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f855 3b04 	ldr.w	r3, [r5], #4
 800094c:	4798      	blx	r3
 800094e:	3601      	adds	r6, #1
 8000950:	e7ee      	b.n	8000930 <__libc_init_array+0xc>
 8000952:	f855 3b04 	ldr.w	r3, [r5], #4
 8000956:	4798      	blx	r3
 8000958:	3601      	adds	r6, #1
 800095a:	e7f2      	b.n	8000942 <__libc_init_array+0x1e>
 800095c:	080019b4 	.word	0x080019b4
 8000960:	080019b4 	.word	0x080019b4
 8000964:	080019b4 	.word	0x080019b4
 8000968:	080019b8 	.word	0x080019b8

0800096c <memset>:
 800096c:	4402      	add	r2, r0
 800096e:	4603      	mov	r3, r0
 8000970:	4293      	cmp	r3, r2
 8000972:	d100      	bne.n	8000976 <memset+0xa>
 8000974:	4770      	bx	lr
 8000976:	f803 1b01 	strb.w	r1, [r3], #1
 800097a:	e7f9      	b.n	8000970 <memset+0x4>

0800097c <iprintf>:
 800097c:	b40f      	push	{r0, r1, r2, r3}
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <iprintf+0x2c>)
 8000980:	b513      	push	{r0, r1, r4, lr}
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	b124      	cbz	r4, 8000990 <iprintf+0x14>
 8000986:	69a3      	ldr	r3, [r4, #24]
 8000988:	b913      	cbnz	r3, 8000990 <iprintf+0x14>
 800098a:	4620      	mov	r0, r4
 800098c:	f000 f9e8 	bl	8000d60 <__sinit>
 8000990:	ab05      	add	r3, sp, #20
 8000992:	9a04      	ldr	r2, [sp, #16]
 8000994:	68a1      	ldr	r1, [r4, #8]
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4620      	mov	r0, r4
 800099a:	f000 fbb9 	bl	8001110 <_vfiprintf_r>
 800099e:	b002      	add	sp, #8
 80009a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009a4:	b004      	add	sp, #16
 80009a6:	4770      	bx	lr
 80009a8:	20000008 	.word	0x20000008

080009ac <__swbuf_r>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	460e      	mov	r6, r1
 80009b0:	4614      	mov	r4, r2
 80009b2:	4605      	mov	r5, r0
 80009b4:	b118      	cbz	r0, 80009be <__swbuf_r+0x12>
 80009b6:	6983      	ldr	r3, [r0, #24]
 80009b8:	b90b      	cbnz	r3, 80009be <__swbuf_r+0x12>
 80009ba:	f000 f9d1 	bl	8000d60 <__sinit>
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <__swbuf_r+0x98>)
 80009c0:	429c      	cmp	r4, r3
 80009c2:	d12b      	bne.n	8000a1c <__swbuf_r+0x70>
 80009c4:	686c      	ldr	r4, [r5, #4]
 80009c6:	69a3      	ldr	r3, [r4, #24]
 80009c8:	60a3      	str	r3, [r4, #8]
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	071a      	lsls	r2, r3, #28
 80009ce:	d52f      	bpl.n	8000a30 <__swbuf_r+0x84>
 80009d0:	6923      	ldr	r3, [r4, #16]
 80009d2:	b36b      	cbz	r3, 8000a30 <__swbuf_r+0x84>
 80009d4:	6923      	ldr	r3, [r4, #16]
 80009d6:	6820      	ldr	r0, [r4, #0]
 80009d8:	1ac0      	subs	r0, r0, r3
 80009da:	6963      	ldr	r3, [r4, #20]
 80009dc:	b2f6      	uxtb	r6, r6
 80009de:	4283      	cmp	r3, r0
 80009e0:	4637      	mov	r7, r6
 80009e2:	dc04      	bgt.n	80009ee <__swbuf_r+0x42>
 80009e4:	4621      	mov	r1, r4
 80009e6:	4628      	mov	r0, r5
 80009e8:	f000 f926 	bl	8000c38 <_fflush_r>
 80009ec:	bb30      	cbnz	r0, 8000a3c <__swbuf_r+0x90>
 80009ee:	68a3      	ldr	r3, [r4, #8]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	60a3      	str	r3, [r4, #8]
 80009f4:	6823      	ldr	r3, [r4, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	6022      	str	r2, [r4, #0]
 80009fa:	701e      	strb	r6, [r3, #0]
 80009fc:	6963      	ldr	r3, [r4, #20]
 80009fe:	3001      	adds	r0, #1
 8000a00:	4283      	cmp	r3, r0
 8000a02:	d004      	beq.n	8000a0e <__swbuf_r+0x62>
 8000a04:	89a3      	ldrh	r3, [r4, #12]
 8000a06:	07db      	lsls	r3, r3, #31
 8000a08:	d506      	bpl.n	8000a18 <__swbuf_r+0x6c>
 8000a0a:	2e0a      	cmp	r6, #10
 8000a0c:	d104      	bne.n	8000a18 <__swbuf_r+0x6c>
 8000a0e:	4621      	mov	r1, r4
 8000a10:	4628      	mov	r0, r5
 8000a12:	f000 f911 	bl	8000c38 <_fflush_r>
 8000a16:	b988      	cbnz	r0, 8000a3c <__swbuf_r+0x90>
 8000a18:	4638      	mov	r0, r7
 8000a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <__swbuf_r+0x9c>)
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	d101      	bne.n	8000a26 <__swbuf_r+0x7a>
 8000a22:	68ac      	ldr	r4, [r5, #8]
 8000a24:	e7cf      	b.n	80009c6 <__swbuf_r+0x1a>
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <__swbuf_r+0xa0>)
 8000a28:	429c      	cmp	r4, r3
 8000a2a:	bf08      	it	eq
 8000a2c:	68ec      	ldreq	r4, [r5, #12]
 8000a2e:	e7ca      	b.n	80009c6 <__swbuf_r+0x1a>
 8000a30:	4621      	mov	r1, r4
 8000a32:	4628      	mov	r0, r5
 8000a34:	f000 f80c 	bl	8000a50 <__swsetup_r>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d0cb      	beq.n	80009d4 <__swbuf_r+0x28>
 8000a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8000a40:	e7ea      	b.n	8000a18 <__swbuf_r+0x6c>
 8000a42:	bf00      	nop
 8000a44:	08001940 	.word	0x08001940
 8000a48:	08001960 	.word	0x08001960
 8000a4c:	08001920 	.word	0x08001920

08000a50 <__swsetup_r>:
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <__swsetup_r+0xcc>)
 8000a52:	b570      	push	{r4, r5, r6, lr}
 8000a54:	681d      	ldr	r5, [r3, #0]
 8000a56:	4606      	mov	r6, r0
 8000a58:	460c      	mov	r4, r1
 8000a5a:	b125      	cbz	r5, 8000a66 <__swsetup_r+0x16>
 8000a5c:	69ab      	ldr	r3, [r5, #24]
 8000a5e:	b913      	cbnz	r3, 8000a66 <__swsetup_r+0x16>
 8000a60:	4628      	mov	r0, r5
 8000a62:	f000 f97d 	bl	8000d60 <__sinit>
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <__swsetup_r+0xd0>)
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	d10f      	bne.n	8000a8c <__swsetup_r+0x3c>
 8000a6c:	686c      	ldr	r4, [r5, #4]
 8000a6e:	89a3      	ldrh	r3, [r4, #12]
 8000a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a74:	0719      	lsls	r1, r3, #28
 8000a76:	d42c      	bmi.n	8000ad2 <__swsetup_r+0x82>
 8000a78:	06dd      	lsls	r5, r3, #27
 8000a7a:	d411      	bmi.n	8000aa0 <__swsetup_r+0x50>
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	6033      	str	r3, [r6, #0]
 8000a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a84:	81a3      	strh	r3, [r4, #12]
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	e03e      	b.n	8000b0a <__swsetup_r+0xba>
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <__swsetup_r+0xd4>)
 8000a8e:	429c      	cmp	r4, r3
 8000a90:	d101      	bne.n	8000a96 <__swsetup_r+0x46>
 8000a92:	68ac      	ldr	r4, [r5, #8]
 8000a94:	e7eb      	b.n	8000a6e <__swsetup_r+0x1e>
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <__swsetup_r+0xd8>)
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	bf08      	it	eq
 8000a9c:	68ec      	ldreq	r4, [r5, #12]
 8000a9e:	e7e6      	b.n	8000a6e <__swsetup_r+0x1e>
 8000aa0:	0758      	lsls	r0, r3, #29
 8000aa2:	d512      	bpl.n	8000aca <__swsetup_r+0x7a>
 8000aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aa6:	b141      	cbz	r1, 8000aba <__swsetup_r+0x6a>
 8000aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d002      	beq.n	8000ab6 <__swsetup_r+0x66>
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f000 fa59 	bl	8000f68 <_free_r>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8000aba:	89a3      	ldrh	r3, [r4, #12]
 8000abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ac0:	81a3      	strh	r3, [r4, #12]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	6923      	ldr	r3, [r4, #16]
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	81a3      	strh	r3, [r4, #12]
 8000ad2:	6923      	ldr	r3, [r4, #16]
 8000ad4:	b94b      	cbnz	r3, 8000aea <__swsetup_r+0x9a>
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ae0:	d003      	beq.n	8000aea <__swsetup_r+0x9a>
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f000 f9ff 	bl	8000ee8 <__smakebuf_r>
 8000aea:	89a0      	ldrh	r0, [r4, #12]
 8000aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000af0:	f010 0301 	ands.w	r3, r0, #1
 8000af4:	d00a      	beq.n	8000b0c <__swsetup_r+0xbc>
 8000af6:	2300      	movs	r3, #0
 8000af8:	60a3      	str	r3, [r4, #8]
 8000afa:	6963      	ldr	r3, [r4, #20]
 8000afc:	425b      	negs	r3, r3
 8000afe:	61a3      	str	r3, [r4, #24]
 8000b00:	6923      	ldr	r3, [r4, #16]
 8000b02:	b943      	cbnz	r3, 8000b16 <__swsetup_r+0xc6>
 8000b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b08:	d1ba      	bne.n	8000a80 <__swsetup_r+0x30>
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	0781      	lsls	r1, r0, #30
 8000b0e:	bf58      	it	pl
 8000b10:	6963      	ldrpl	r3, [r4, #20]
 8000b12:	60a3      	str	r3, [r4, #8]
 8000b14:	e7f4      	b.n	8000b00 <__swsetup_r+0xb0>
 8000b16:	2000      	movs	r0, #0
 8000b18:	e7f7      	b.n	8000b0a <__swsetup_r+0xba>
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	08001940 	.word	0x08001940
 8000b24:	08001960 	.word	0x08001960
 8000b28:	08001920 	.word	0x08001920

08000b2c <__sflush_r>:
 8000b2c:	898a      	ldrh	r2, [r1, #12]
 8000b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b32:	4605      	mov	r5, r0
 8000b34:	0710      	lsls	r0, r2, #28
 8000b36:	460c      	mov	r4, r1
 8000b38:	d458      	bmi.n	8000bec <__sflush_r+0xc0>
 8000b3a:	684b      	ldr	r3, [r1, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	dc05      	bgt.n	8000b4c <__sflush_r+0x20>
 8000b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	dc02      	bgt.n	8000b4c <__sflush_r+0x20>
 8000b46:	2000      	movs	r0, #0
 8000b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d0f9      	beq.n	8000b46 <__sflush_r+0x1a>
 8000b52:	2300      	movs	r3, #0
 8000b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b58:	682f      	ldr	r7, [r5, #0]
 8000b5a:	602b      	str	r3, [r5, #0]
 8000b5c:	d032      	beq.n	8000bc4 <__sflush_r+0x98>
 8000b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b60:	89a3      	ldrh	r3, [r4, #12]
 8000b62:	075a      	lsls	r2, r3, #29
 8000b64:	d505      	bpl.n	8000b72 <__sflush_r+0x46>
 8000b66:	6863      	ldr	r3, [r4, #4]
 8000b68:	1ac0      	subs	r0, r0, r3
 8000b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b6c:	b10b      	cbz	r3, 8000b72 <__sflush_r+0x46>
 8000b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b70:	1ac0      	subs	r0, r0, r3
 8000b72:	2300      	movs	r3, #0
 8000b74:	4602      	mov	r2, r0
 8000b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b78:	6a21      	ldr	r1, [r4, #32]
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	47b0      	blx	r6
 8000b7e:	1c43      	adds	r3, r0, #1
 8000b80:	89a3      	ldrh	r3, [r4, #12]
 8000b82:	d106      	bne.n	8000b92 <__sflush_r+0x66>
 8000b84:	6829      	ldr	r1, [r5, #0]
 8000b86:	291d      	cmp	r1, #29
 8000b88:	d82c      	bhi.n	8000be4 <__sflush_r+0xb8>
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <__sflush_r+0x108>)
 8000b8c:	40ca      	lsrs	r2, r1
 8000b8e:	07d6      	lsls	r6, r2, #31
 8000b90:	d528      	bpl.n	8000be4 <__sflush_r+0xb8>
 8000b92:	2200      	movs	r2, #0
 8000b94:	6062      	str	r2, [r4, #4]
 8000b96:	04d9      	lsls	r1, r3, #19
 8000b98:	6922      	ldr	r2, [r4, #16]
 8000b9a:	6022      	str	r2, [r4, #0]
 8000b9c:	d504      	bpl.n	8000ba8 <__sflush_r+0x7c>
 8000b9e:	1c42      	adds	r2, r0, #1
 8000ba0:	d101      	bne.n	8000ba6 <__sflush_r+0x7a>
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	b903      	cbnz	r3, 8000ba8 <__sflush_r+0x7c>
 8000ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8000ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000baa:	602f      	str	r7, [r5, #0]
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d0ca      	beq.n	8000b46 <__sflush_r+0x1a>
 8000bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d002      	beq.n	8000bbe <__sflush_r+0x92>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f000 f9d5 	bl	8000f68 <_free_r>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8000bc2:	e7c1      	b.n	8000b48 <__sflush_r+0x1c>
 8000bc4:	6a21      	ldr	r1, [r4, #32]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	4628      	mov	r0, r5
 8000bca:	47b0      	blx	r6
 8000bcc:	1c41      	adds	r1, r0, #1
 8000bce:	d1c7      	bne.n	8000b60 <__sflush_r+0x34>
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0c4      	beq.n	8000b60 <__sflush_r+0x34>
 8000bd6:	2b1d      	cmp	r3, #29
 8000bd8:	d001      	beq.n	8000bde <__sflush_r+0xb2>
 8000bda:	2b16      	cmp	r3, #22
 8000bdc:	d101      	bne.n	8000be2 <__sflush_r+0xb6>
 8000bde:	602f      	str	r7, [r5, #0]
 8000be0:	e7b1      	b.n	8000b46 <__sflush_r+0x1a>
 8000be2:	89a3      	ldrh	r3, [r4, #12]
 8000be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be8:	81a3      	strh	r3, [r4, #12]
 8000bea:	e7ad      	b.n	8000b48 <__sflush_r+0x1c>
 8000bec:	690f      	ldr	r7, [r1, #16]
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d0a9      	beq.n	8000b46 <__sflush_r+0x1a>
 8000bf2:	0793      	lsls	r3, r2, #30
 8000bf4:	680e      	ldr	r6, [r1, #0]
 8000bf6:	bf08      	it	eq
 8000bf8:	694b      	ldreq	r3, [r1, #20]
 8000bfa:	600f      	str	r7, [r1, #0]
 8000bfc:	bf18      	it	ne
 8000bfe:	2300      	movne	r3, #0
 8000c00:	eba6 0807 	sub.w	r8, r6, r7
 8000c04:	608b      	str	r3, [r1, #8]
 8000c06:	f1b8 0f00 	cmp.w	r8, #0
 8000c0a:	dd9c      	ble.n	8000b46 <__sflush_r+0x1a>
 8000c0c:	6a21      	ldr	r1, [r4, #32]
 8000c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c10:	4643      	mov	r3, r8
 8000c12:	463a      	mov	r2, r7
 8000c14:	4628      	mov	r0, r5
 8000c16:	47b0      	blx	r6
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	dc06      	bgt.n	8000c2a <__sflush_r+0xfe>
 8000c1c:	89a3      	ldrh	r3, [r4, #12]
 8000c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c22:	81a3      	strh	r3, [r4, #12]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	e78e      	b.n	8000b48 <__sflush_r+0x1c>
 8000c2a:	4407      	add	r7, r0
 8000c2c:	eba8 0800 	sub.w	r8, r8, r0
 8000c30:	e7e9      	b.n	8000c06 <__sflush_r+0xda>
 8000c32:	bf00      	nop
 8000c34:	20400001 	.word	0x20400001

08000c38 <_fflush_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	690b      	ldr	r3, [r1, #16]
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	b913      	cbnz	r3, 8000c48 <_fflush_r+0x10>
 8000c42:	2500      	movs	r5, #0
 8000c44:	4628      	mov	r0, r5
 8000c46:	bd38      	pop	{r3, r4, r5, pc}
 8000c48:	b118      	cbz	r0, 8000c52 <_fflush_r+0x1a>
 8000c4a:	6983      	ldr	r3, [r0, #24]
 8000c4c:	b90b      	cbnz	r3, 8000c52 <_fflush_r+0x1a>
 8000c4e:	f000 f887 	bl	8000d60 <__sinit>
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <_fflush_r+0x6c>)
 8000c54:	429c      	cmp	r4, r3
 8000c56:	d11b      	bne.n	8000c90 <_fflush_r+0x58>
 8000c58:	686c      	ldr	r4, [r5, #4]
 8000c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0ef      	beq.n	8000c42 <_fflush_r+0xa>
 8000c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c64:	07d0      	lsls	r0, r2, #31
 8000c66:	d404      	bmi.n	8000c72 <_fflush_r+0x3a>
 8000c68:	0599      	lsls	r1, r3, #22
 8000c6a:	d402      	bmi.n	8000c72 <_fflush_r+0x3a>
 8000c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c6e:	f000 f915 	bl	8000e9c <__retarget_lock_acquire_recursive>
 8000c72:	4628      	mov	r0, r5
 8000c74:	4621      	mov	r1, r4
 8000c76:	f7ff ff59 	bl	8000b2c <__sflush_r>
 8000c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c7c:	07da      	lsls	r2, r3, #31
 8000c7e:	4605      	mov	r5, r0
 8000c80:	d4e0      	bmi.n	8000c44 <_fflush_r+0xc>
 8000c82:	89a3      	ldrh	r3, [r4, #12]
 8000c84:	059b      	lsls	r3, r3, #22
 8000c86:	d4dd      	bmi.n	8000c44 <_fflush_r+0xc>
 8000c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c8a:	f000 f908 	bl	8000e9e <__retarget_lock_release_recursive>
 8000c8e:	e7d9      	b.n	8000c44 <_fflush_r+0xc>
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <_fflush_r+0x70>)
 8000c92:	429c      	cmp	r4, r3
 8000c94:	d101      	bne.n	8000c9a <_fflush_r+0x62>
 8000c96:	68ac      	ldr	r4, [r5, #8]
 8000c98:	e7df      	b.n	8000c5a <_fflush_r+0x22>
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <_fflush_r+0x74>)
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	bf08      	it	eq
 8000ca0:	68ec      	ldreq	r4, [r5, #12]
 8000ca2:	e7da      	b.n	8000c5a <_fflush_r+0x22>
 8000ca4:	08001940 	.word	0x08001940
 8000ca8:	08001960 	.word	0x08001960
 8000cac:	08001920 	.word	0x08001920

08000cb0 <std>:
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	b510      	push	{r4, lr}
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8000cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cbe:	6083      	str	r3, [r0, #8]
 8000cc0:	8181      	strh	r1, [r0, #12]
 8000cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8000cc4:	81c2      	strh	r2, [r0, #14]
 8000cc6:	6183      	str	r3, [r0, #24]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2208      	movs	r2, #8
 8000ccc:	305c      	adds	r0, #92	; 0x5c
 8000cce:	f7ff fe4d 	bl	800096c <memset>
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <std+0x38>)
 8000cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <std+0x3c>)
 8000cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <std+0x40>)
 8000cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <std+0x44>)
 8000ce0:	6224      	str	r4, [r4, #32]
 8000ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	bf00      	nop
 8000ce8:	080016b9 	.word	0x080016b9
 8000cec:	080016db 	.word	0x080016db
 8000cf0:	08001713 	.word	0x08001713
 8000cf4:	08001737 	.word	0x08001737

08000cf8 <_cleanup_r>:
 8000cf8:	4901      	ldr	r1, [pc, #4]	; (8000d00 <_cleanup_r+0x8>)
 8000cfa:	f000 b8af 	b.w	8000e5c <_fwalk_reent>
 8000cfe:	bf00      	nop
 8000d00:	08000c39 	.word	0x08000c39

08000d04 <__sfmoreglue>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	1e4a      	subs	r2, r1, #1
 8000d08:	2568      	movs	r5, #104	; 0x68
 8000d0a:	4355      	muls	r5, r2
 8000d0c:	460e      	mov	r6, r1
 8000d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d12:	f000 f979 	bl	8001008 <_malloc_r>
 8000d16:	4604      	mov	r4, r0
 8000d18:	b140      	cbz	r0, 8000d2c <__sfmoreglue+0x28>
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8000d20:	300c      	adds	r0, #12
 8000d22:	60a0      	str	r0, [r4, #8]
 8000d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d28:	f7ff fe20 	bl	800096c <memset>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}

08000d30 <__sfp_lock_acquire>:
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <__sfp_lock_acquire+0x8>)
 8000d32:	f000 b8b3 	b.w	8000e9c <__retarget_lock_acquire_recursive>
 8000d36:	bf00      	nop
 8000d38:	200000a4 	.word	0x200000a4

08000d3c <__sfp_lock_release>:
 8000d3c:	4801      	ldr	r0, [pc, #4]	; (8000d44 <__sfp_lock_release+0x8>)
 8000d3e:	f000 b8ae 	b.w	8000e9e <__retarget_lock_release_recursive>
 8000d42:	bf00      	nop
 8000d44:	200000a4 	.word	0x200000a4

08000d48 <__sinit_lock_acquire>:
 8000d48:	4801      	ldr	r0, [pc, #4]	; (8000d50 <__sinit_lock_acquire+0x8>)
 8000d4a:	f000 b8a7 	b.w	8000e9c <__retarget_lock_acquire_recursive>
 8000d4e:	bf00      	nop
 8000d50:	2000009f 	.word	0x2000009f

08000d54 <__sinit_lock_release>:
 8000d54:	4801      	ldr	r0, [pc, #4]	; (8000d5c <__sinit_lock_release+0x8>)
 8000d56:	f000 b8a2 	b.w	8000e9e <__retarget_lock_release_recursive>
 8000d5a:	bf00      	nop
 8000d5c:	2000009f 	.word	0x2000009f

08000d60 <__sinit>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4604      	mov	r4, r0
 8000d64:	f7ff fff0 	bl	8000d48 <__sinit_lock_acquire>
 8000d68:	69a3      	ldr	r3, [r4, #24]
 8000d6a:	b11b      	cbz	r3, 8000d74 <__sinit+0x14>
 8000d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d70:	f7ff bff0 	b.w	8000d54 <__sinit_lock_release>
 8000d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d78:	6523      	str	r3, [r4, #80]	; 0x50
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <__sinit+0x68>)
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <__sinit+0x6c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d82:	42a3      	cmp	r3, r4
 8000d84:	bf04      	itt	eq
 8000d86:	2301      	moveq	r3, #1
 8000d88:	61a3      	streq	r3, [r4, #24]
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f000 f820 	bl	8000dd0 <__sfp>
 8000d90:	6060      	str	r0, [r4, #4]
 8000d92:	4620      	mov	r0, r4
 8000d94:	f000 f81c 	bl	8000dd0 <__sfp>
 8000d98:	60a0      	str	r0, [r4, #8]
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f000 f818 	bl	8000dd0 <__sfp>
 8000da0:	2200      	movs	r2, #0
 8000da2:	60e0      	str	r0, [r4, #12]
 8000da4:	2104      	movs	r1, #4
 8000da6:	6860      	ldr	r0, [r4, #4]
 8000da8:	f7ff ff82 	bl	8000cb0 <std>
 8000dac:	68a0      	ldr	r0, [r4, #8]
 8000dae:	2201      	movs	r2, #1
 8000db0:	2109      	movs	r1, #9
 8000db2:	f7ff ff7d 	bl	8000cb0 <std>
 8000db6:	68e0      	ldr	r0, [r4, #12]
 8000db8:	2202      	movs	r2, #2
 8000dba:	2112      	movs	r1, #18
 8000dbc:	f7ff ff78 	bl	8000cb0 <std>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61a3      	str	r3, [r4, #24]
 8000dc4:	e7d2      	b.n	8000d6c <__sinit+0xc>
 8000dc6:	bf00      	nop
 8000dc8:	0800191c 	.word	0x0800191c
 8000dcc:	08000cf9 	.word	0x08000cf9

08000dd0 <__sfp>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	4607      	mov	r7, r0
 8000dd4:	f7ff ffac 	bl	8000d30 <__sfp_lock_acquire>
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <__sfp+0x84>)
 8000dda:	681e      	ldr	r6, [r3, #0]
 8000ddc:	69b3      	ldr	r3, [r6, #24]
 8000dde:	b913      	cbnz	r3, 8000de6 <__sfp+0x16>
 8000de0:	4630      	mov	r0, r6
 8000de2:	f7ff ffbd 	bl	8000d60 <__sinit>
 8000de6:	3648      	adds	r6, #72	; 0x48
 8000de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	d503      	bpl.n	8000df8 <__sfp+0x28>
 8000df0:	6833      	ldr	r3, [r6, #0]
 8000df2:	b30b      	cbz	r3, 8000e38 <__sfp+0x68>
 8000df4:	6836      	ldr	r6, [r6, #0]
 8000df6:	e7f7      	b.n	8000de8 <__sfp+0x18>
 8000df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000dfc:	b9d5      	cbnz	r5, 8000e34 <__sfp+0x64>
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <__sfp+0x88>)
 8000e00:	60e3      	str	r3, [r4, #12]
 8000e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e06:	6665      	str	r5, [r4, #100]	; 0x64
 8000e08:	f000 f847 	bl	8000e9a <__retarget_lock_init_recursive>
 8000e0c:	f7ff ff96 	bl	8000d3c <__sfp_lock_release>
 8000e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e18:	6025      	str	r5, [r4, #0]
 8000e1a:	61a5      	str	r5, [r4, #24]
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	4629      	mov	r1, r5
 8000e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e24:	f7ff fda2 	bl	800096c <memset>
 8000e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e30:	4620      	mov	r0, r4
 8000e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e34:	3468      	adds	r4, #104	; 0x68
 8000e36:	e7d9      	b.n	8000dec <__sfp+0x1c>
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4638      	mov	r0, r7
 8000e3c:	f7ff ff62 	bl	8000d04 <__sfmoreglue>
 8000e40:	4604      	mov	r4, r0
 8000e42:	6030      	str	r0, [r6, #0]
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d1d5      	bne.n	8000df4 <__sfp+0x24>
 8000e48:	f7ff ff78 	bl	8000d3c <__sfp_lock_release>
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	e7ee      	b.n	8000e30 <__sfp+0x60>
 8000e52:	bf00      	nop
 8000e54:	0800191c 	.word	0x0800191c
 8000e58:	ffff0001 	.word	0xffff0001

08000e5c <_fwalk_reent>:
 8000e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e60:	4606      	mov	r6, r0
 8000e62:	4688      	mov	r8, r1
 8000e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8000e72:	d505      	bpl.n	8000e80 <_fwalk_reent+0x24>
 8000e74:	6824      	ldr	r4, [r4, #0]
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d1f7      	bne.n	8000e6a <_fwalk_reent+0xe>
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e80:	89ab      	ldrh	r3, [r5, #12]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d907      	bls.n	8000e96 <_fwalk_reent+0x3a>
 8000e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	d003      	beq.n	8000e96 <_fwalk_reent+0x3a>
 8000e8e:	4629      	mov	r1, r5
 8000e90:	4630      	mov	r0, r6
 8000e92:	47c0      	blx	r8
 8000e94:	4307      	orrs	r7, r0
 8000e96:	3568      	adds	r5, #104	; 0x68
 8000e98:	e7e9      	b.n	8000e6e <_fwalk_reent+0x12>

08000e9a <__retarget_lock_init_recursive>:
 8000e9a:	4770      	bx	lr

08000e9c <__retarget_lock_acquire_recursive>:
 8000e9c:	4770      	bx	lr

08000e9e <__retarget_lock_release_recursive>:
 8000e9e:	4770      	bx	lr

08000ea0 <__swhatbuf_r>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	460e      	mov	r6, r1
 8000ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	b096      	sub	sp, #88	; 0x58
 8000eac:	4614      	mov	r4, r2
 8000eae:	461d      	mov	r5, r3
 8000eb0:	da07      	bge.n	8000ec2 <__swhatbuf_r+0x22>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	602b      	str	r3, [r5, #0]
 8000eb6:	89b3      	ldrh	r3, [r6, #12]
 8000eb8:	061a      	lsls	r2, r3, #24
 8000eba:	d410      	bmi.n	8000ede <__swhatbuf_r+0x3e>
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	e00e      	b.n	8000ee0 <__swhatbuf_r+0x40>
 8000ec2:	466a      	mov	r2, sp
 8000ec4:	f000 fc5e 	bl	8001784 <_fstat_r>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	dbf2      	blt.n	8000eb2 <__swhatbuf_r+0x12>
 8000ecc:	9a01      	ldr	r2, [sp, #4]
 8000ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ed6:	425a      	negs	r2, r3
 8000ed8:	415a      	adcs	r2, r3
 8000eda:	602a      	str	r2, [r5, #0]
 8000edc:	e7ee      	b.n	8000ebc <__swhatbuf_r+0x1c>
 8000ede:	2340      	movs	r3, #64	; 0x40
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	b016      	add	sp, #88	; 0x58
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}

08000ee8 <__smakebuf_r>:
 8000ee8:	898b      	ldrh	r3, [r1, #12]
 8000eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000eec:	079d      	lsls	r5, r3, #30
 8000eee:	4606      	mov	r6, r0
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	d507      	bpl.n	8000f04 <__smakebuf_r+0x1c>
 8000ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ef8:	6023      	str	r3, [r4, #0]
 8000efa:	6123      	str	r3, [r4, #16]
 8000efc:	2301      	movs	r3, #1
 8000efe:	6163      	str	r3, [r4, #20]
 8000f00:	b002      	add	sp, #8
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	ab01      	add	r3, sp, #4
 8000f06:	466a      	mov	r2, sp
 8000f08:	f7ff ffca 	bl	8000ea0 <__swhatbuf_r>
 8000f0c:	9900      	ldr	r1, [sp, #0]
 8000f0e:	4605      	mov	r5, r0
 8000f10:	4630      	mov	r0, r6
 8000f12:	f000 f879 	bl	8001008 <_malloc_r>
 8000f16:	b948      	cbnz	r0, 8000f2c <__smakebuf_r+0x44>
 8000f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f1c:	059a      	lsls	r2, r3, #22
 8000f1e:	d4ef      	bmi.n	8000f00 <__smakebuf_r+0x18>
 8000f20:	f023 0303 	bic.w	r3, r3, #3
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	81a3      	strh	r3, [r4, #12]
 8000f2a:	e7e3      	b.n	8000ef4 <__smakebuf_r+0xc>
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <__smakebuf_r+0x7c>)
 8000f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f30:	89a3      	ldrh	r3, [r4, #12]
 8000f32:	6020      	str	r0, [r4, #0]
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	81a3      	strh	r3, [r4, #12]
 8000f3a:	9b00      	ldr	r3, [sp, #0]
 8000f3c:	6163      	str	r3, [r4, #20]
 8000f3e:	9b01      	ldr	r3, [sp, #4]
 8000f40:	6120      	str	r0, [r4, #16]
 8000f42:	b15b      	cbz	r3, 8000f5c <__smakebuf_r+0x74>
 8000f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f000 fc2d 	bl	80017a8 <_isatty_r>
 8000f4e:	b128      	cbz	r0, 8000f5c <__smakebuf_r+0x74>
 8000f50:	89a3      	ldrh	r3, [r4, #12]
 8000f52:	f023 0303 	bic.w	r3, r3, #3
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	81a3      	strh	r3, [r4, #12]
 8000f5c:	89a0      	ldrh	r0, [r4, #12]
 8000f5e:	4305      	orrs	r5, r0
 8000f60:	81a5      	strh	r5, [r4, #12]
 8000f62:	e7cd      	b.n	8000f00 <__smakebuf_r+0x18>
 8000f64:	08000cf9 	.word	0x08000cf9

08000f68 <_free_r>:
 8000f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f6a:	2900      	cmp	r1, #0
 8000f6c:	d048      	beq.n	8001000 <_free_r+0x98>
 8000f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f72:	9001      	str	r0, [sp, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f1a1 0404 	sub.w	r4, r1, #4
 8000f7a:	bfb8      	it	lt
 8000f7c:	18e4      	addlt	r4, r4, r3
 8000f7e:	f000 fc35 	bl	80017ec <__malloc_lock>
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <_free_r+0x9c>)
 8000f84:	9801      	ldr	r0, [sp, #4]
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	4615      	mov	r5, r2
 8000f8a:	b933      	cbnz	r3, 8000f9a <_free_r+0x32>
 8000f8c:	6063      	str	r3, [r4, #4]
 8000f8e:	6014      	str	r4, [r2, #0]
 8000f90:	b003      	add	sp, #12
 8000f92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f96:	f000 bc2f 	b.w	80017f8 <__malloc_unlock>
 8000f9a:	42a3      	cmp	r3, r4
 8000f9c:	d90b      	bls.n	8000fb6 <_free_r+0x4e>
 8000f9e:	6821      	ldr	r1, [r4, #0]
 8000fa0:	1862      	adds	r2, r4, r1
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	bf04      	itt	eq
 8000fa6:	681a      	ldreq	r2, [r3, #0]
 8000fa8:	685b      	ldreq	r3, [r3, #4]
 8000faa:	6063      	str	r3, [r4, #4]
 8000fac:	bf04      	itt	eq
 8000fae:	1852      	addeq	r2, r2, r1
 8000fb0:	6022      	streq	r2, [r4, #0]
 8000fb2:	602c      	str	r4, [r5, #0]
 8000fb4:	e7ec      	b.n	8000f90 <_free_r+0x28>
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	b10b      	cbz	r3, 8000fc0 <_free_r+0x58>
 8000fbc:	42a3      	cmp	r3, r4
 8000fbe:	d9fa      	bls.n	8000fb6 <_free_r+0x4e>
 8000fc0:	6811      	ldr	r1, [r2, #0]
 8000fc2:	1855      	adds	r5, r2, r1
 8000fc4:	42a5      	cmp	r5, r4
 8000fc6:	d10b      	bne.n	8000fe0 <_free_r+0x78>
 8000fc8:	6824      	ldr	r4, [r4, #0]
 8000fca:	4421      	add	r1, r4
 8000fcc:	1854      	adds	r4, r2, r1
 8000fce:	42a3      	cmp	r3, r4
 8000fd0:	6011      	str	r1, [r2, #0]
 8000fd2:	d1dd      	bne.n	8000f90 <_free_r+0x28>
 8000fd4:	681c      	ldr	r4, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	6053      	str	r3, [r2, #4]
 8000fda:	4421      	add	r1, r4
 8000fdc:	6011      	str	r1, [r2, #0]
 8000fde:	e7d7      	b.n	8000f90 <_free_r+0x28>
 8000fe0:	d902      	bls.n	8000fe8 <_free_r+0x80>
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	6003      	str	r3, [r0, #0]
 8000fe6:	e7d3      	b.n	8000f90 <_free_r+0x28>
 8000fe8:	6825      	ldr	r5, [r4, #0]
 8000fea:	1961      	adds	r1, r4, r5
 8000fec:	428b      	cmp	r3, r1
 8000fee:	bf04      	itt	eq
 8000ff0:	6819      	ldreq	r1, [r3, #0]
 8000ff2:	685b      	ldreq	r3, [r3, #4]
 8000ff4:	6063      	str	r3, [r4, #4]
 8000ff6:	bf04      	itt	eq
 8000ff8:	1949      	addeq	r1, r1, r5
 8000ffa:	6021      	streq	r1, [r4, #0]
 8000ffc:	6054      	str	r4, [r2, #4]
 8000ffe:	e7c7      	b.n	8000f90 <_free_r+0x28>
 8001000:	b003      	add	sp, #12
 8001002:	bd30      	pop	{r4, r5, pc}
 8001004:	20000094 	.word	0x20000094

08001008 <_malloc_r>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	1ccd      	adds	r5, r1, #3
 800100c:	f025 0503 	bic.w	r5, r5, #3
 8001010:	3508      	adds	r5, #8
 8001012:	2d0c      	cmp	r5, #12
 8001014:	bf38      	it	cc
 8001016:	250c      	movcc	r5, #12
 8001018:	2d00      	cmp	r5, #0
 800101a:	4606      	mov	r6, r0
 800101c:	db01      	blt.n	8001022 <_malloc_r+0x1a>
 800101e:	42a9      	cmp	r1, r5
 8001020:	d903      	bls.n	800102a <_malloc_r+0x22>
 8001022:	230c      	movs	r3, #12
 8001024:	6033      	str	r3, [r6, #0]
 8001026:	2000      	movs	r0, #0
 8001028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800102a:	f000 fbdf 	bl	80017ec <__malloc_lock>
 800102e:	4921      	ldr	r1, [pc, #132]	; (80010b4 <_malloc_r+0xac>)
 8001030:	680a      	ldr	r2, [r1, #0]
 8001032:	4614      	mov	r4, r2
 8001034:	b99c      	cbnz	r4, 800105e <_malloc_r+0x56>
 8001036:	4f20      	ldr	r7, [pc, #128]	; (80010b8 <_malloc_r+0xb0>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b923      	cbnz	r3, 8001046 <_malloc_r+0x3e>
 800103c:	4621      	mov	r1, r4
 800103e:	4630      	mov	r0, r6
 8001040:	f000 fb2a 	bl	8001698 <_sbrk_r>
 8001044:	6038      	str	r0, [r7, #0]
 8001046:	4629      	mov	r1, r5
 8001048:	4630      	mov	r0, r6
 800104a:	f000 fb25 	bl	8001698 <_sbrk_r>
 800104e:	1c43      	adds	r3, r0, #1
 8001050:	d123      	bne.n	800109a <_malloc_r+0x92>
 8001052:	230c      	movs	r3, #12
 8001054:	6033      	str	r3, [r6, #0]
 8001056:	4630      	mov	r0, r6
 8001058:	f000 fbce 	bl	80017f8 <__malloc_unlock>
 800105c:	e7e3      	b.n	8001026 <_malloc_r+0x1e>
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	1b5b      	subs	r3, r3, r5
 8001062:	d417      	bmi.n	8001094 <_malloc_r+0x8c>
 8001064:	2b0b      	cmp	r3, #11
 8001066:	d903      	bls.n	8001070 <_malloc_r+0x68>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	441c      	add	r4, r3
 800106c:	6025      	str	r5, [r4, #0]
 800106e:	e004      	b.n	800107a <_malloc_r+0x72>
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	42a2      	cmp	r2, r4
 8001074:	bf0c      	ite	eq
 8001076:	600b      	streq	r3, [r1, #0]
 8001078:	6053      	strne	r3, [r2, #4]
 800107a:	4630      	mov	r0, r6
 800107c:	f000 fbbc 	bl	80017f8 <__malloc_unlock>
 8001080:	f104 000b 	add.w	r0, r4, #11
 8001084:	1d23      	adds	r3, r4, #4
 8001086:	f020 0007 	bic.w	r0, r0, #7
 800108a:	1ac2      	subs	r2, r0, r3
 800108c:	d0cc      	beq.n	8001028 <_malloc_r+0x20>
 800108e:	1a1b      	subs	r3, r3, r0
 8001090:	50a3      	str	r3, [r4, r2]
 8001092:	e7c9      	b.n	8001028 <_malloc_r+0x20>
 8001094:	4622      	mov	r2, r4
 8001096:	6864      	ldr	r4, [r4, #4]
 8001098:	e7cc      	b.n	8001034 <_malloc_r+0x2c>
 800109a:	1cc4      	adds	r4, r0, #3
 800109c:	f024 0403 	bic.w	r4, r4, #3
 80010a0:	42a0      	cmp	r0, r4
 80010a2:	d0e3      	beq.n	800106c <_malloc_r+0x64>
 80010a4:	1a21      	subs	r1, r4, r0
 80010a6:	4630      	mov	r0, r6
 80010a8:	f000 faf6 	bl	8001698 <_sbrk_r>
 80010ac:	3001      	adds	r0, #1
 80010ae:	d1dd      	bne.n	800106c <_malloc_r+0x64>
 80010b0:	e7cf      	b.n	8001052 <_malloc_r+0x4a>
 80010b2:	bf00      	nop
 80010b4:	20000094 	.word	0x20000094
 80010b8:	20000098 	.word	0x20000098

080010bc <__sfputc_r>:
 80010bc:	6893      	ldr	r3, [r2, #8]
 80010be:	3b01      	subs	r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	b410      	push	{r4}
 80010c4:	6093      	str	r3, [r2, #8]
 80010c6:	da08      	bge.n	80010da <__sfputc_r+0x1e>
 80010c8:	6994      	ldr	r4, [r2, #24]
 80010ca:	42a3      	cmp	r3, r4
 80010cc:	db01      	blt.n	80010d2 <__sfputc_r+0x16>
 80010ce:	290a      	cmp	r1, #10
 80010d0:	d103      	bne.n	80010da <__sfputc_r+0x1e>
 80010d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010d6:	f7ff bc69 	b.w	80009ac <__swbuf_r>
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	1c58      	adds	r0, r3, #1
 80010de:	6010      	str	r0, [r2, #0]
 80010e0:	7019      	strb	r1, [r3, #0]
 80010e2:	4608      	mov	r0, r1
 80010e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <__sfputs_r>:
 80010ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ec:	4606      	mov	r6, r0
 80010ee:	460f      	mov	r7, r1
 80010f0:	4614      	mov	r4, r2
 80010f2:	18d5      	adds	r5, r2, r3
 80010f4:	42ac      	cmp	r4, r5
 80010f6:	d101      	bne.n	80010fc <__sfputs_r+0x12>
 80010f8:	2000      	movs	r0, #0
 80010fa:	e007      	b.n	800110c <__sfputs_r+0x22>
 80010fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001100:	463a      	mov	r2, r7
 8001102:	4630      	mov	r0, r6
 8001104:	f7ff ffda 	bl	80010bc <__sfputc_r>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d1f3      	bne.n	80010f4 <__sfputs_r+0xa>
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001110 <_vfiprintf_r>:
 8001110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001114:	460d      	mov	r5, r1
 8001116:	b09d      	sub	sp, #116	; 0x74
 8001118:	4614      	mov	r4, r2
 800111a:	4698      	mov	r8, r3
 800111c:	4606      	mov	r6, r0
 800111e:	b118      	cbz	r0, 8001128 <_vfiprintf_r+0x18>
 8001120:	6983      	ldr	r3, [r0, #24]
 8001122:	b90b      	cbnz	r3, 8001128 <_vfiprintf_r+0x18>
 8001124:	f7ff fe1c 	bl	8000d60 <__sinit>
 8001128:	4b89      	ldr	r3, [pc, #548]	; (8001350 <_vfiprintf_r+0x240>)
 800112a:	429d      	cmp	r5, r3
 800112c:	d11b      	bne.n	8001166 <_vfiprintf_r+0x56>
 800112e:	6875      	ldr	r5, [r6, #4]
 8001130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001132:	07d9      	lsls	r1, r3, #31
 8001134:	d405      	bmi.n	8001142 <_vfiprintf_r+0x32>
 8001136:	89ab      	ldrh	r3, [r5, #12]
 8001138:	059a      	lsls	r2, r3, #22
 800113a:	d402      	bmi.n	8001142 <_vfiprintf_r+0x32>
 800113c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800113e:	f7ff fead 	bl	8000e9c <__retarget_lock_acquire_recursive>
 8001142:	89ab      	ldrh	r3, [r5, #12]
 8001144:	071b      	lsls	r3, r3, #28
 8001146:	d501      	bpl.n	800114c <_vfiprintf_r+0x3c>
 8001148:	692b      	ldr	r3, [r5, #16]
 800114a:	b9eb      	cbnz	r3, 8001188 <_vfiprintf_r+0x78>
 800114c:	4629      	mov	r1, r5
 800114e:	4630      	mov	r0, r6
 8001150:	f7ff fc7e 	bl	8000a50 <__swsetup_r>
 8001154:	b1c0      	cbz	r0, 8001188 <_vfiprintf_r+0x78>
 8001156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001158:	07dc      	lsls	r4, r3, #31
 800115a:	d50e      	bpl.n	800117a <_vfiprintf_r+0x6a>
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	b01d      	add	sp, #116	; 0x74
 8001162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001166:	4b7b      	ldr	r3, [pc, #492]	; (8001354 <_vfiprintf_r+0x244>)
 8001168:	429d      	cmp	r5, r3
 800116a:	d101      	bne.n	8001170 <_vfiprintf_r+0x60>
 800116c:	68b5      	ldr	r5, [r6, #8]
 800116e:	e7df      	b.n	8001130 <_vfiprintf_r+0x20>
 8001170:	4b79      	ldr	r3, [pc, #484]	; (8001358 <_vfiprintf_r+0x248>)
 8001172:	429d      	cmp	r5, r3
 8001174:	bf08      	it	eq
 8001176:	68f5      	ldreq	r5, [r6, #12]
 8001178:	e7da      	b.n	8001130 <_vfiprintf_r+0x20>
 800117a:	89ab      	ldrh	r3, [r5, #12]
 800117c:	0598      	lsls	r0, r3, #22
 800117e:	d4ed      	bmi.n	800115c <_vfiprintf_r+0x4c>
 8001180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001182:	f7ff fe8c 	bl	8000e9e <__retarget_lock_release_recursive>
 8001186:	e7e9      	b.n	800115c <_vfiprintf_r+0x4c>
 8001188:	2300      	movs	r3, #0
 800118a:	9309      	str	r3, [sp, #36]	; 0x24
 800118c:	2320      	movs	r3, #32
 800118e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001192:	f8cd 800c 	str.w	r8, [sp, #12]
 8001196:	2330      	movs	r3, #48	; 0x30
 8001198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800135c <_vfiprintf_r+0x24c>
 800119c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011a0:	f04f 0901 	mov.w	r9, #1
 80011a4:	4623      	mov	r3, r4
 80011a6:	469a      	mov	sl, r3
 80011a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011ac:	b10a      	cbz	r2, 80011b2 <_vfiprintf_r+0xa2>
 80011ae:	2a25      	cmp	r2, #37	; 0x25
 80011b0:	d1f9      	bne.n	80011a6 <_vfiprintf_r+0x96>
 80011b2:	ebba 0b04 	subs.w	fp, sl, r4
 80011b6:	d00b      	beq.n	80011d0 <_vfiprintf_r+0xc0>
 80011b8:	465b      	mov	r3, fp
 80011ba:	4622      	mov	r2, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	4630      	mov	r0, r6
 80011c0:	f7ff ff93 	bl	80010ea <__sfputs_r>
 80011c4:	3001      	adds	r0, #1
 80011c6:	f000 80aa 	beq.w	800131e <_vfiprintf_r+0x20e>
 80011ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011cc:	445a      	add	r2, fp
 80011ce:	9209      	str	r2, [sp, #36]	; 0x24
 80011d0:	f89a 3000 	ldrb.w	r3, [sl]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a2 	beq.w	800131e <_vfiprintf_r+0x20e>
 80011da:	2300      	movs	r3, #0
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011e4:	f10a 0a01 	add.w	sl, sl, #1
 80011e8:	9304      	str	r3, [sp, #16]
 80011ea:	9307      	str	r3, [sp, #28]
 80011ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011f0:	931a      	str	r3, [sp, #104]	; 0x68
 80011f2:	4654      	mov	r4, sl
 80011f4:	2205      	movs	r2, #5
 80011f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011fa:	4858      	ldr	r0, [pc, #352]	; (800135c <_vfiprintf_r+0x24c>)
 80011fc:	f7ff f808 	bl	8000210 <memchr>
 8001200:	9a04      	ldr	r2, [sp, #16]
 8001202:	b9d8      	cbnz	r0, 800123c <_vfiprintf_r+0x12c>
 8001204:	06d1      	lsls	r1, r2, #27
 8001206:	bf44      	itt	mi
 8001208:	2320      	movmi	r3, #32
 800120a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800120e:	0713      	lsls	r3, r2, #28
 8001210:	bf44      	itt	mi
 8001212:	232b      	movmi	r3, #43	; 0x2b
 8001214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001218:	f89a 3000 	ldrb.w	r3, [sl]
 800121c:	2b2a      	cmp	r3, #42	; 0x2a
 800121e:	d015      	beq.n	800124c <_vfiprintf_r+0x13c>
 8001220:	9a07      	ldr	r2, [sp, #28]
 8001222:	4654      	mov	r4, sl
 8001224:	2000      	movs	r0, #0
 8001226:	f04f 0c0a 	mov.w	ip, #10
 800122a:	4621      	mov	r1, r4
 800122c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001230:	3b30      	subs	r3, #48	; 0x30
 8001232:	2b09      	cmp	r3, #9
 8001234:	d94e      	bls.n	80012d4 <_vfiprintf_r+0x1c4>
 8001236:	b1b0      	cbz	r0, 8001266 <_vfiprintf_r+0x156>
 8001238:	9207      	str	r2, [sp, #28]
 800123a:	e014      	b.n	8001266 <_vfiprintf_r+0x156>
 800123c:	eba0 0308 	sub.w	r3, r0, r8
 8001240:	fa09 f303 	lsl.w	r3, r9, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	9304      	str	r3, [sp, #16]
 8001248:	46a2      	mov	sl, r4
 800124a:	e7d2      	b.n	80011f2 <_vfiprintf_r+0xe2>
 800124c:	9b03      	ldr	r3, [sp, #12]
 800124e:	1d19      	adds	r1, r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	9103      	str	r1, [sp, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfbb      	ittet	lt
 8001258:	425b      	neglt	r3, r3
 800125a:	f042 0202 	orrlt.w	r2, r2, #2
 800125e:	9307      	strge	r3, [sp, #28]
 8001260:	9307      	strlt	r3, [sp, #28]
 8001262:	bfb8      	it	lt
 8001264:	9204      	strlt	r2, [sp, #16]
 8001266:	7823      	ldrb	r3, [r4, #0]
 8001268:	2b2e      	cmp	r3, #46	; 0x2e
 800126a:	d10c      	bne.n	8001286 <_vfiprintf_r+0x176>
 800126c:	7863      	ldrb	r3, [r4, #1]
 800126e:	2b2a      	cmp	r3, #42	; 0x2a
 8001270:	d135      	bne.n	80012de <_vfiprintf_r+0x1ce>
 8001272:	9b03      	ldr	r3, [sp, #12]
 8001274:	1d1a      	adds	r2, r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	9203      	str	r2, [sp, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfb8      	it	lt
 800127e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001282:	3402      	adds	r4, #2
 8001284:	9305      	str	r3, [sp, #20]
 8001286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800136c <_vfiprintf_r+0x25c>
 800128a:	7821      	ldrb	r1, [r4, #0]
 800128c:	2203      	movs	r2, #3
 800128e:	4650      	mov	r0, sl
 8001290:	f7fe ffbe 	bl	8000210 <memchr>
 8001294:	b140      	cbz	r0, 80012a8 <_vfiprintf_r+0x198>
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	eba0 000a 	sub.w	r0, r0, sl
 800129c:	fa03 f000 	lsl.w	r0, r3, r0
 80012a0:	9b04      	ldr	r3, [sp, #16]
 80012a2:	4303      	orrs	r3, r0
 80012a4:	3401      	adds	r4, #1
 80012a6:	9304      	str	r3, [sp, #16]
 80012a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012ac:	482c      	ldr	r0, [pc, #176]	; (8001360 <_vfiprintf_r+0x250>)
 80012ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012b2:	2206      	movs	r2, #6
 80012b4:	f7fe ffac 	bl	8000210 <memchr>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d03f      	beq.n	800133c <_vfiprintf_r+0x22c>
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <_vfiprintf_r+0x254>)
 80012be:	bb1b      	cbnz	r3, 8001308 <_vfiprintf_r+0x1f8>
 80012c0:	9b03      	ldr	r3, [sp, #12]
 80012c2:	3307      	adds	r3, #7
 80012c4:	f023 0307 	bic.w	r3, r3, #7
 80012c8:	3308      	adds	r3, #8
 80012ca:	9303      	str	r3, [sp, #12]
 80012cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ce:	443b      	add	r3, r7
 80012d0:	9309      	str	r3, [sp, #36]	; 0x24
 80012d2:	e767      	b.n	80011a4 <_vfiprintf_r+0x94>
 80012d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80012d8:	460c      	mov	r4, r1
 80012da:	2001      	movs	r0, #1
 80012dc:	e7a5      	b.n	800122a <_vfiprintf_r+0x11a>
 80012de:	2300      	movs	r3, #0
 80012e0:	3401      	adds	r4, #1
 80012e2:	9305      	str	r3, [sp, #20]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0c0a 	mov.w	ip, #10
 80012ea:	4620      	mov	r0, r4
 80012ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012f0:	3a30      	subs	r2, #48	; 0x30
 80012f2:	2a09      	cmp	r2, #9
 80012f4:	d903      	bls.n	80012fe <_vfiprintf_r+0x1ee>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0c5      	beq.n	8001286 <_vfiprintf_r+0x176>
 80012fa:	9105      	str	r1, [sp, #20]
 80012fc:	e7c3      	b.n	8001286 <_vfiprintf_r+0x176>
 80012fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001302:	4604      	mov	r4, r0
 8001304:	2301      	movs	r3, #1
 8001306:	e7f0      	b.n	80012ea <_vfiprintf_r+0x1da>
 8001308:	ab03      	add	r3, sp, #12
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	462a      	mov	r2, r5
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <_vfiprintf_r+0x258>)
 8001310:	a904      	add	r1, sp, #16
 8001312:	4630      	mov	r0, r6
 8001314:	f3af 8000 	nop.w
 8001318:	4607      	mov	r7, r0
 800131a:	1c78      	adds	r0, r7, #1
 800131c:	d1d6      	bne.n	80012cc <_vfiprintf_r+0x1bc>
 800131e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001320:	07d9      	lsls	r1, r3, #31
 8001322:	d405      	bmi.n	8001330 <_vfiprintf_r+0x220>
 8001324:	89ab      	ldrh	r3, [r5, #12]
 8001326:	059a      	lsls	r2, r3, #22
 8001328:	d402      	bmi.n	8001330 <_vfiprintf_r+0x220>
 800132a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800132c:	f7ff fdb7 	bl	8000e9e <__retarget_lock_release_recursive>
 8001330:	89ab      	ldrh	r3, [r5, #12]
 8001332:	065b      	lsls	r3, r3, #25
 8001334:	f53f af12 	bmi.w	800115c <_vfiprintf_r+0x4c>
 8001338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800133a:	e711      	b.n	8001160 <_vfiprintf_r+0x50>
 800133c:	ab03      	add	r3, sp, #12
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	462a      	mov	r2, r5
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <_vfiprintf_r+0x258>)
 8001344:	a904      	add	r1, sp, #16
 8001346:	4630      	mov	r0, r6
 8001348:	f000 f880 	bl	800144c <_printf_i>
 800134c:	e7e4      	b.n	8001318 <_vfiprintf_r+0x208>
 800134e:	bf00      	nop
 8001350:	08001940 	.word	0x08001940
 8001354:	08001960 	.word	0x08001960
 8001358:	08001920 	.word	0x08001920
 800135c:	08001980 	.word	0x08001980
 8001360:	0800198a 	.word	0x0800198a
 8001364:	00000000 	.word	0x00000000
 8001368:	080010eb 	.word	0x080010eb
 800136c:	08001986 	.word	0x08001986

08001370 <_printf_common>:
 8001370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001374:	4616      	mov	r6, r2
 8001376:	4699      	mov	r9, r3
 8001378:	688a      	ldr	r2, [r1, #8]
 800137a:	690b      	ldr	r3, [r1, #16]
 800137c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001380:	4293      	cmp	r3, r2
 8001382:	bfb8      	it	lt
 8001384:	4613      	movlt	r3, r2
 8001386:	6033      	str	r3, [r6, #0]
 8001388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800138c:	4607      	mov	r7, r0
 800138e:	460c      	mov	r4, r1
 8001390:	b10a      	cbz	r2, 8001396 <_printf_common+0x26>
 8001392:	3301      	adds	r3, #1
 8001394:	6033      	str	r3, [r6, #0]
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	0699      	lsls	r1, r3, #26
 800139a:	bf42      	ittt	mi
 800139c:	6833      	ldrmi	r3, [r6, #0]
 800139e:	3302      	addmi	r3, #2
 80013a0:	6033      	strmi	r3, [r6, #0]
 80013a2:	6825      	ldr	r5, [r4, #0]
 80013a4:	f015 0506 	ands.w	r5, r5, #6
 80013a8:	d106      	bne.n	80013b8 <_printf_common+0x48>
 80013aa:	f104 0a19 	add.w	sl, r4, #25
 80013ae:	68e3      	ldr	r3, [r4, #12]
 80013b0:	6832      	ldr	r2, [r6, #0]
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	42ab      	cmp	r3, r5
 80013b6:	dc26      	bgt.n	8001406 <_printf_common+0x96>
 80013b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013bc:	1e13      	subs	r3, r2, #0
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	bf18      	it	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	0692      	lsls	r2, r2, #26
 80013c6:	d42b      	bmi.n	8001420 <_printf_common+0xb0>
 80013c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013cc:	4649      	mov	r1, r9
 80013ce:	4638      	mov	r0, r7
 80013d0:	47c0      	blx	r8
 80013d2:	3001      	adds	r0, #1
 80013d4:	d01e      	beq.n	8001414 <_printf_common+0xa4>
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	68e5      	ldr	r5, [r4, #12]
 80013da:	6832      	ldr	r2, [r6, #0]
 80013dc:	f003 0306 	and.w	r3, r3, #6
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	bf08      	it	eq
 80013e4:	1aad      	subeq	r5, r5, r2
 80013e6:	68a3      	ldr	r3, [r4, #8]
 80013e8:	6922      	ldr	r2, [r4, #16]
 80013ea:	bf0c      	ite	eq
 80013ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013f0:	2500      	movne	r5, #0
 80013f2:	4293      	cmp	r3, r2
 80013f4:	bfc4      	itt	gt
 80013f6:	1a9b      	subgt	r3, r3, r2
 80013f8:	18ed      	addgt	r5, r5, r3
 80013fa:	2600      	movs	r6, #0
 80013fc:	341a      	adds	r4, #26
 80013fe:	42b5      	cmp	r5, r6
 8001400:	d11a      	bne.n	8001438 <_printf_common+0xc8>
 8001402:	2000      	movs	r0, #0
 8001404:	e008      	b.n	8001418 <_printf_common+0xa8>
 8001406:	2301      	movs	r3, #1
 8001408:	4652      	mov	r2, sl
 800140a:	4649      	mov	r1, r9
 800140c:	4638      	mov	r0, r7
 800140e:	47c0      	blx	r8
 8001410:	3001      	adds	r0, #1
 8001412:	d103      	bne.n	800141c <_printf_common+0xac>
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800141c:	3501      	adds	r5, #1
 800141e:	e7c6      	b.n	80013ae <_printf_common+0x3e>
 8001420:	18e1      	adds	r1, r4, r3
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	2030      	movs	r0, #48	; 0x30
 8001426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800142a:	4422      	add	r2, r4
 800142c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001434:	3302      	adds	r3, #2
 8001436:	e7c7      	b.n	80013c8 <_printf_common+0x58>
 8001438:	2301      	movs	r3, #1
 800143a:	4622      	mov	r2, r4
 800143c:	4649      	mov	r1, r9
 800143e:	4638      	mov	r0, r7
 8001440:	47c0      	blx	r8
 8001442:	3001      	adds	r0, #1
 8001444:	d0e6      	beq.n	8001414 <_printf_common+0xa4>
 8001446:	3601      	adds	r6, #1
 8001448:	e7d9      	b.n	80013fe <_printf_common+0x8e>
	...

0800144c <_printf_i>:
 800144c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001450:	460c      	mov	r4, r1
 8001452:	4691      	mov	r9, r2
 8001454:	7e27      	ldrb	r7, [r4, #24]
 8001456:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001458:	2f78      	cmp	r7, #120	; 0x78
 800145a:	4680      	mov	r8, r0
 800145c:	469a      	mov	sl, r3
 800145e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001462:	d807      	bhi.n	8001474 <_printf_i+0x28>
 8001464:	2f62      	cmp	r7, #98	; 0x62
 8001466:	d80a      	bhi.n	800147e <_printf_i+0x32>
 8001468:	2f00      	cmp	r7, #0
 800146a:	f000 80d8 	beq.w	800161e <_printf_i+0x1d2>
 800146e:	2f58      	cmp	r7, #88	; 0x58
 8001470:	f000 80a3 	beq.w	80015ba <_printf_i+0x16e>
 8001474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800147c:	e03a      	b.n	80014f4 <_printf_i+0xa8>
 800147e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001482:	2b15      	cmp	r3, #21
 8001484:	d8f6      	bhi.n	8001474 <_printf_i+0x28>
 8001486:	a001      	add	r0, pc, #4	; (adr r0, 800148c <_printf_i+0x40>)
 8001488:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800148c:	080014e5 	.word	0x080014e5
 8001490:	080014f9 	.word	0x080014f9
 8001494:	08001475 	.word	0x08001475
 8001498:	08001475 	.word	0x08001475
 800149c:	08001475 	.word	0x08001475
 80014a0:	08001475 	.word	0x08001475
 80014a4:	080014f9 	.word	0x080014f9
 80014a8:	08001475 	.word	0x08001475
 80014ac:	08001475 	.word	0x08001475
 80014b0:	08001475 	.word	0x08001475
 80014b4:	08001475 	.word	0x08001475
 80014b8:	08001605 	.word	0x08001605
 80014bc:	08001529 	.word	0x08001529
 80014c0:	080015e7 	.word	0x080015e7
 80014c4:	08001475 	.word	0x08001475
 80014c8:	08001475 	.word	0x08001475
 80014cc:	08001627 	.word	0x08001627
 80014d0:	08001475 	.word	0x08001475
 80014d4:	08001529 	.word	0x08001529
 80014d8:	08001475 	.word	0x08001475
 80014dc:	08001475 	.word	0x08001475
 80014e0:	080015ef 	.word	0x080015ef
 80014e4:	680b      	ldr	r3, [r1, #0]
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	600a      	str	r2, [r1, #0]
 80014ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0a3      	b.n	8001640 <_printf_i+0x1f4>
 80014f8:	6825      	ldr	r5, [r4, #0]
 80014fa:	6808      	ldr	r0, [r1, #0]
 80014fc:	062e      	lsls	r6, r5, #24
 80014fe:	f100 0304 	add.w	r3, r0, #4
 8001502:	d50a      	bpl.n	800151a <_printf_i+0xce>
 8001504:	6805      	ldr	r5, [r0, #0]
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	2d00      	cmp	r5, #0
 800150a:	da03      	bge.n	8001514 <_printf_i+0xc8>
 800150c:	232d      	movs	r3, #45	; 0x2d
 800150e:	426d      	negs	r5, r5
 8001510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001514:	485e      	ldr	r0, [pc, #376]	; (8001690 <_printf_i+0x244>)
 8001516:	230a      	movs	r3, #10
 8001518:	e019      	b.n	800154e <_printf_i+0x102>
 800151a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800151e:	6805      	ldr	r5, [r0, #0]
 8001520:	600b      	str	r3, [r1, #0]
 8001522:	bf18      	it	ne
 8001524:	b22d      	sxthne	r5, r5
 8001526:	e7ef      	b.n	8001508 <_printf_i+0xbc>
 8001528:	680b      	ldr	r3, [r1, #0]
 800152a:	6825      	ldr	r5, [r4, #0]
 800152c:	1d18      	adds	r0, r3, #4
 800152e:	6008      	str	r0, [r1, #0]
 8001530:	0628      	lsls	r0, r5, #24
 8001532:	d501      	bpl.n	8001538 <_printf_i+0xec>
 8001534:	681d      	ldr	r5, [r3, #0]
 8001536:	e002      	b.n	800153e <_printf_i+0xf2>
 8001538:	0669      	lsls	r1, r5, #25
 800153a:	d5fb      	bpl.n	8001534 <_printf_i+0xe8>
 800153c:	881d      	ldrh	r5, [r3, #0]
 800153e:	4854      	ldr	r0, [pc, #336]	; (8001690 <_printf_i+0x244>)
 8001540:	2f6f      	cmp	r7, #111	; 0x6f
 8001542:	bf0c      	ite	eq
 8001544:	2308      	moveq	r3, #8
 8001546:	230a      	movne	r3, #10
 8001548:	2100      	movs	r1, #0
 800154a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800154e:	6866      	ldr	r6, [r4, #4]
 8001550:	60a6      	str	r6, [r4, #8]
 8001552:	2e00      	cmp	r6, #0
 8001554:	bfa2      	ittt	ge
 8001556:	6821      	ldrge	r1, [r4, #0]
 8001558:	f021 0104 	bicge.w	r1, r1, #4
 800155c:	6021      	strge	r1, [r4, #0]
 800155e:	b90d      	cbnz	r5, 8001564 <_printf_i+0x118>
 8001560:	2e00      	cmp	r6, #0
 8001562:	d04d      	beq.n	8001600 <_printf_i+0x1b4>
 8001564:	4616      	mov	r6, r2
 8001566:	fbb5 f1f3 	udiv	r1, r5, r3
 800156a:	fb03 5711 	mls	r7, r3, r1, r5
 800156e:	5dc7      	ldrb	r7, [r0, r7]
 8001570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001574:	462f      	mov	r7, r5
 8001576:	42bb      	cmp	r3, r7
 8001578:	460d      	mov	r5, r1
 800157a:	d9f4      	bls.n	8001566 <_printf_i+0x11a>
 800157c:	2b08      	cmp	r3, #8
 800157e:	d10b      	bne.n	8001598 <_printf_i+0x14c>
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	07df      	lsls	r7, r3, #31
 8001584:	d508      	bpl.n	8001598 <_printf_i+0x14c>
 8001586:	6923      	ldr	r3, [r4, #16]
 8001588:	6861      	ldr	r1, [r4, #4]
 800158a:	4299      	cmp	r1, r3
 800158c:	bfde      	ittt	le
 800158e:	2330      	movle	r3, #48	; 0x30
 8001590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001598:	1b92      	subs	r2, r2, r6
 800159a:	6122      	str	r2, [r4, #16]
 800159c:	f8cd a000 	str.w	sl, [sp]
 80015a0:	464b      	mov	r3, r9
 80015a2:	aa03      	add	r2, sp, #12
 80015a4:	4621      	mov	r1, r4
 80015a6:	4640      	mov	r0, r8
 80015a8:	f7ff fee2 	bl	8001370 <_printf_common>
 80015ac:	3001      	adds	r0, #1
 80015ae:	d14c      	bne.n	800164a <_printf_i+0x1fe>
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	b004      	add	sp, #16
 80015b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ba:	4835      	ldr	r0, [pc, #212]	; (8001690 <_printf_i+0x244>)
 80015bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	680e      	ldr	r6, [r1, #0]
 80015c4:	061f      	lsls	r7, r3, #24
 80015c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80015ca:	600e      	str	r6, [r1, #0]
 80015cc:	d514      	bpl.n	80015f8 <_printf_i+0x1ac>
 80015ce:	07d9      	lsls	r1, r3, #31
 80015d0:	bf44      	itt	mi
 80015d2:	f043 0320 	orrmi.w	r3, r3, #32
 80015d6:	6023      	strmi	r3, [r4, #0]
 80015d8:	b91d      	cbnz	r5, 80015e2 <_printf_i+0x196>
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	f023 0320 	bic.w	r3, r3, #32
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	2310      	movs	r3, #16
 80015e4:	e7b0      	b.n	8001548 <_printf_i+0xfc>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	2378      	movs	r3, #120	; 0x78
 80015f0:	4828      	ldr	r0, [pc, #160]	; (8001694 <_printf_i+0x248>)
 80015f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80015f6:	e7e3      	b.n	80015c0 <_printf_i+0x174>
 80015f8:	065e      	lsls	r6, r3, #25
 80015fa:	bf48      	it	mi
 80015fc:	b2ad      	uxthmi	r5, r5
 80015fe:	e7e6      	b.n	80015ce <_printf_i+0x182>
 8001600:	4616      	mov	r6, r2
 8001602:	e7bb      	b.n	800157c <_printf_i+0x130>
 8001604:	680b      	ldr	r3, [r1, #0]
 8001606:	6826      	ldr	r6, [r4, #0]
 8001608:	6960      	ldr	r0, [r4, #20]
 800160a:	1d1d      	adds	r5, r3, #4
 800160c:	600d      	str	r5, [r1, #0]
 800160e:	0635      	lsls	r5, r6, #24
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	d501      	bpl.n	8001618 <_printf_i+0x1cc>
 8001614:	6018      	str	r0, [r3, #0]
 8001616:	e002      	b.n	800161e <_printf_i+0x1d2>
 8001618:	0671      	lsls	r1, r6, #25
 800161a:	d5fb      	bpl.n	8001614 <_printf_i+0x1c8>
 800161c:	8018      	strh	r0, [r3, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	6123      	str	r3, [r4, #16]
 8001622:	4616      	mov	r6, r2
 8001624:	e7ba      	b.n	800159c <_printf_i+0x150>
 8001626:	680b      	ldr	r3, [r1, #0]
 8001628:	1d1a      	adds	r2, r3, #4
 800162a:	600a      	str	r2, [r1, #0]
 800162c:	681e      	ldr	r6, [r3, #0]
 800162e:	6862      	ldr	r2, [r4, #4]
 8001630:	2100      	movs	r1, #0
 8001632:	4630      	mov	r0, r6
 8001634:	f7fe fdec 	bl	8000210 <memchr>
 8001638:	b108      	cbz	r0, 800163e <_printf_i+0x1f2>
 800163a:	1b80      	subs	r0, r0, r6
 800163c:	6060      	str	r0, [r4, #4]
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	6123      	str	r3, [r4, #16]
 8001642:	2300      	movs	r3, #0
 8001644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001648:	e7a8      	b.n	800159c <_printf_i+0x150>
 800164a:	6923      	ldr	r3, [r4, #16]
 800164c:	4632      	mov	r2, r6
 800164e:	4649      	mov	r1, r9
 8001650:	4640      	mov	r0, r8
 8001652:	47d0      	blx	sl
 8001654:	3001      	adds	r0, #1
 8001656:	d0ab      	beq.n	80015b0 <_printf_i+0x164>
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	079b      	lsls	r3, r3, #30
 800165c:	d413      	bmi.n	8001686 <_printf_i+0x23a>
 800165e:	68e0      	ldr	r0, [r4, #12]
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	4298      	cmp	r0, r3
 8001664:	bfb8      	it	lt
 8001666:	4618      	movlt	r0, r3
 8001668:	e7a4      	b.n	80015b4 <_printf_i+0x168>
 800166a:	2301      	movs	r3, #1
 800166c:	4632      	mov	r2, r6
 800166e:	4649      	mov	r1, r9
 8001670:	4640      	mov	r0, r8
 8001672:	47d0      	blx	sl
 8001674:	3001      	adds	r0, #1
 8001676:	d09b      	beq.n	80015b0 <_printf_i+0x164>
 8001678:	3501      	adds	r5, #1
 800167a:	68e3      	ldr	r3, [r4, #12]
 800167c:	9903      	ldr	r1, [sp, #12]
 800167e:	1a5b      	subs	r3, r3, r1
 8001680:	42ab      	cmp	r3, r5
 8001682:	dcf2      	bgt.n	800166a <_printf_i+0x21e>
 8001684:	e7eb      	b.n	800165e <_printf_i+0x212>
 8001686:	2500      	movs	r5, #0
 8001688:	f104 0619 	add.w	r6, r4, #25
 800168c:	e7f5      	b.n	800167a <_printf_i+0x22e>
 800168e:	bf00      	nop
 8001690:	08001991 	.word	0x08001991
 8001694:	080019a2 	.word	0x080019a2

08001698 <_sbrk_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4d06      	ldr	r5, [pc, #24]	; (80016b4 <_sbrk_r+0x1c>)
 800169c:	2300      	movs	r3, #0
 800169e:	4604      	mov	r4, r0
 80016a0:	4608      	mov	r0, r1
 80016a2:	602b      	str	r3, [r5, #0]
 80016a4:	f7ff f860 	bl	8000768 <_sbrk>
 80016a8:	1c43      	adds	r3, r0, #1
 80016aa:	d102      	bne.n	80016b2 <_sbrk_r+0x1a>
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	b103      	cbz	r3, 80016b2 <_sbrk_r+0x1a>
 80016b0:	6023      	str	r3, [r4, #0]
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
 80016b4:	200000a8 	.word	0x200000a8

080016b8 <__sread>:
 80016b8:	b510      	push	{r4, lr}
 80016ba:	460c      	mov	r4, r1
 80016bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c0:	f000 f8a0 	bl	8001804 <_read_r>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	bfab      	itete	ge
 80016c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016ca:	89a3      	ldrhlt	r3, [r4, #12]
 80016cc:	181b      	addge	r3, r3, r0
 80016ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016d2:	bfac      	ite	ge
 80016d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80016d6:	81a3      	strhlt	r3, [r4, #12]
 80016d8:	bd10      	pop	{r4, pc}

080016da <__swrite>:
 80016da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016de:	461f      	mov	r7, r3
 80016e0:	898b      	ldrh	r3, [r1, #12]
 80016e2:	05db      	lsls	r3, r3, #23
 80016e4:	4605      	mov	r5, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	4616      	mov	r6, r2
 80016ea:	d505      	bpl.n	80016f8 <__swrite+0x1e>
 80016ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016f0:	2302      	movs	r3, #2
 80016f2:	2200      	movs	r2, #0
 80016f4:	f000 f868 	bl	80017c8 <_lseek_r>
 80016f8:	89a3      	ldrh	r3, [r4, #12]
 80016fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001702:	81a3      	strh	r3, [r4, #12]
 8001704:	4632      	mov	r2, r6
 8001706:	463b      	mov	r3, r7
 8001708:	4628      	mov	r0, r5
 800170a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800170e:	f000 b817 	b.w	8001740 <_write_r>

08001712 <__sseek>:
 8001712:	b510      	push	{r4, lr}
 8001714:	460c      	mov	r4, r1
 8001716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800171a:	f000 f855 	bl	80017c8 <_lseek_r>
 800171e:	1c43      	adds	r3, r0, #1
 8001720:	89a3      	ldrh	r3, [r4, #12]
 8001722:	bf15      	itete	ne
 8001724:	6560      	strne	r0, [r4, #84]	; 0x54
 8001726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800172a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800172e:	81a3      	strheq	r3, [r4, #12]
 8001730:	bf18      	it	ne
 8001732:	81a3      	strhne	r3, [r4, #12]
 8001734:	bd10      	pop	{r4, pc}

08001736 <__sclose>:
 8001736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800173a:	f000 b813 	b.w	8001764 <_close_r>
	...

08001740 <_write_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d07      	ldr	r5, [pc, #28]	; (8001760 <_write_r+0x20>)
 8001744:	4604      	mov	r4, r0
 8001746:	4608      	mov	r0, r1
 8001748:	4611      	mov	r1, r2
 800174a:	2200      	movs	r2, #0
 800174c:	602a      	str	r2, [r5, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	f7ff f85f 	bl	8000812 <_write>
 8001754:	1c43      	adds	r3, r0, #1
 8001756:	d102      	bne.n	800175e <_write_r+0x1e>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	b103      	cbz	r3, 800175e <_write_r+0x1e>
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	200000a8 	.word	0x200000a8

08001764 <_close_r>:
 8001764:	b538      	push	{r3, r4, r5, lr}
 8001766:	4d06      	ldr	r5, [pc, #24]	; (8001780 <_close_r+0x1c>)
 8001768:	2300      	movs	r3, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	602b      	str	r3, [r5, #0]
 8001770:	f7fe ffc6 	bl	8000700 <_close>
 8001774:	1c43      	adds	r3, r0, #1
 8001776:	d102      	bne.n	800177e <_close_r+0x1a>
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	b103      	cbz	r3, 800177e <_close_r+0x1a>
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	bd38      	pop	{r3, r4, r5, pc}
 8001780:	200000a8 	.word	0x200000a8

08001784 <_fstat_r>:
 8001784:	b538      	push	{r3, r4, r5, lr}
 8001786:	4d07      	ldr	r5, [pc, #28]	; (80017a4 <_fstat_r+0x20>)
 8001788:	2300      	movs	r3, #0
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	602b      	str	r3, [r5, #0]
 8001792:	f7fe ffc1 	bl	8000718 <_fstat>
 8001796:	1c43      	adds	r3, r0, #1
 8001798:	d102      	bne.n	80017a0 <_fstat_r+0x1c>
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	b103      	cbz	r3, 80017a0 <_fstat_r+0x1c>
 800179e:	6023      	str	r3, [r4, #0]
 80017a0:	bd38      	pop	{r3, r4, r5, pc}
 80017a2:	bf00      	nop
 80017a4:	200000a8 	.word	0x200000a8

080017a8 <_isatty_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	4d06      	ldr	r5, [pc, #24]	; (80017c4 <_isatty_r+0x1c>)
 80017ac:	2300      	movs	r3, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	602b      	str	r3, [r5, #0]
 80017b4:	f7fe ffc0 	bl	8000738 <_isatty>
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	d102      	bne.n	80017c2 <_isatty_r+0x1a>
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	b103      	cbz	r3, 80017c2 <_isatty_r+0x1a>
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
 80017c4:	200000a8 	.word	0x200000a8

080017c8 <_lseek_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4d07      	ldr	r5, [pc, #28]	; (80017e8 <_lseek_r+0x20>)
 80017cc:	4604      	mov	r4, r0
 80017ce:	4608      	mov	r0, r1
 80017d0:	4611      	mov	r1, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	602a      	str	r2, [r5, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f7fe ffb9 	bl	800074e <_lseek>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_lseek_r+0x1e>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_lseek_r+0x1e>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	200000a8 	.word	0x200000a8

080017ec <__malloc_lock>:
 80017ec:	4801      	ldr	r0, [pc, #4]	; (80017f4 <__malloc_lock+0x8>)
 80017ee:	f7ff bb55 	b.w	8000e9c <__retarget_lock_acquire_recursive>
 80017f2:	bf00      	nop
 80017f4:	200000a0 	.word	0x200000a0

080017f8 <__malloc_unlock>:
 80017f8:	4801      	ldr	r0, [pc, #4]	; (8001800 <__malloc_unlock+0x8>)
 80017fa:	f7ff bb50 	b.w	8000e9e <__retarget_lock_release_recursive>
 80017fe:	bf00      	nop
 8001800:	200000a0 	.word	0x200000a0

08001804 <_read_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	4d07      	ldr	r5, [pc, #28]	; (8001824 <_read_r+0x20>)
 8001808:	4604      	mov	r4, r0
 800180a:	4608      	mov	r0, r1
 800180c:	4611      	mov	r1, r2
 800180e:	2200      	movs	r2, #0
 8001810:	602a      	str	r2, [r5, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	f7fe ffd4 	bl	80007c0 <_read>
 8001818:	1c43      	adds	r3, r0, #1
 800181a:	d102      	bne.n	8001822 <_read_r+0x1e>
 800181c:	682b      	ldr	r3, [r5, #0]
 800181e:	b103      	cbz	r3, 8001822 <_read_r+0x1e>
 8001820:	6023      	str	r3, [r4, #0]
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	200000a8 	.word	0x200000a8

08001828 <_init>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr

08001834 <_fini>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	bf00      	nop
 8001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183a:	bc08      	pop	{r3}
 800183c:	469e      	mov	lr, r3
 800183e:	4770      	bx	lr
